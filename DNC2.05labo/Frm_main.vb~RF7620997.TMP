Imports log4net
Imports System.IO
Imports System.Text
Imports System.Data.OleDb

Public Class Frm_main

    Inherits System.Windows.Forms.Form

    '自分のパス(アプリケーションを開始した実行ファイルのフォルダ）
    Public Path As String = System.IO.Path.Combine(Application.StartupPath, "master") '150113 hishiki

    '指示書のバーコード（QRコード）に付与されている余分な先頭文字列の長さ
    Public BarCodeHeaderStrNum As Integer

    'PO読込フラグ。trueの場合、読み込んだPO情報をキーにして型式情報を参照する
    Public POReadFlg As Integer
    'PO読込→型式検索の場合の、参照先アドレス
    Public PO_address As String
    Public DSaccess As DataSet

    '基本テーブル保持用データセットと基本テーブル
    Public DSbase As DataSet
    Public T_ini As DataTable
    Public T_prg As DataTable
    Public T_header As DataTable
    Public T_math As DataTable
    Public T_type_define As DataTable
    Public T_type_relation As DataTable
    Public T_type_prg As DataTable
    Public T_type_chngvl As DataTable

    'プログラム毎のテーブル保持用データセットと、プログラム毎のテーブル
    Public DSprg As DataSet
    Public T_cntrl As DataTable
    Public T_cntrl_rex As DataTable
    Public T_load As DataTable
    Public T_select As DataTable
    Public T_relation As DataTable
    Public T_correct As DataTable
    Public T_ChngValue As DataTable
    Public T_define As DataTable
    Public T_calc As DataTable
    Public T_switch As DataTable
    Public T_measure As DataTable
    Public T_add As DataTable
    Public T_preset As DataTable
    Public T_input As DataTable '151118 hishiki input.csv追加

    Public fileErrCnt As Integer 'csvファイルをチェックし、エラーがあった場合にカウント

    Public addflg As Integer
    Public addprgNo As Integer
    Public AddGroups As DataTable
    Public AddNo As Integer
    Public DispGrpNo As Integer
    Public minAddNo As Integer
    Public maxAddNo As Integer
    Public LastWriteDates As DateTime()
    Public latestWriteDate As DateTime
    Public fileNum As Integer
    Public OperatorID As String
    Public OperatorName As String
    Public MachineID As String
    Public versionName As String
    Public operatorInfo As String
    Public PRO_STATUSCD As String
    Public PRO_S_STATUSCD As String

    '共通変数
    Public ChngPrgflg As Integer 'ボタン押下によりプログラム切替を行うかを設定するフラグ
    Public prgNum As Integer '使用するプログラム数
    Public dispPrgName As String '表示中のプログラム名
    Public dispPrgNo As Integer '表示中のプログラムNo
    Public prgDispFlg As String 'T_loadのDISPFLG。FLGが1の場合表示。それ以外非表示
    Public BtnChangePerformClickCnt As Integer 'BtnChangeパフォームクリックのクリック数保持用変数
    Public measureCnt As Integer '測定用コントロールの個数保持用変数。測定用コントロールは画面に１つだけしか作成しない
    Public measureDefine As String '測定用コントロールのコントロール名
    Public MeasureTextColor As String '測定用コントロールの測定値入力テキストの背景色
    Public AutoSendFlg As Integer '各コントロールに割り当てる自動送信フラグ。フラグオンの場合、テキストボックスの値が変化したら転送実行
    Public POInfoRecordFlg As Integer 'PO読み込み履歴記録フラグ　１：記録　0：記録しない
    Public WorkInfoRecordFlg As Integer '作業実績記録フラグ 1:記録　0:記録しない
    Public SendFileFormat As Integer = 1 'マクロ送信ファイルフォーマット　１：ファナック、ブラザー　２：レックスロス
    Public performClickFlg As Integer = 0 '160127 hishiki 
    Public onoffSwitchflg As Integer = 0 '160128 hishiki switchフォームにおいて、onoff.txtの値に応じて表示値を指定の値に変更する機能を使用しているか否かを判別するフラグ
    Public onoffCorrectflg As Integer = 0 '160216 hishiki correctフォームにおいて、onoff.txtの値に応じて表示値を指定の値に変更する機能を使用しているか否かを判別するフラグ
    Public onoff1to0Flg As Integer = 0 '160216 hishiki onoff.csvが1から0に変わったかどうかを判別するフラグ

    '動的生成コントロール用オブジェクト
    Private LBL As Label 'ラベル
    Private TLP As TableLayoutPanel 'テーブルレイアウトパネル
    Private TB As TextBox 'テキストボックス(マクロ用）
    Private TB_slct As TextBox 'テキストボックス(セレクト用）
    Private CMB As ComboBox 'コンボボックス
    Private CMB_selectPRG As ComboBox 'コンボボックス(selectPRG用)
    Private BTN_input As Button '計算機出力用ボタン
    Private BTN_pls As Button '「+」ボタン
    Private BTN_mns As Button '「-」ボタン
    Private BTN_switch As Button 'switch用ボタン
    Private BTN_changePRG As Button 'プログラム切り替えボタン
    Private BTN_add As Button 'コピー用ボタン
    Public PctrBx As PictureBox 'ピクチャーボックス（図面挿入用）
    Public targetTB As New TextBox '計算機フォーム実行結果反映テキストボックス
    Public targetTLP As New TableLayoutPanel '計算機フォーム実行結果反映テキストボックス用テーブルレイアウトパネル 151006 hishiki
    Public targetLBL As New Label '計算機フォーム実行中のマクロ名
    Public TB_measure As TextBox 'テキストボックス（測定値入力用）
    Public LBL_measure As Label '測定値入力用テキストボックスの前に使用するラベル

    Public errLabel As Label 'インフォ画面に表示する、エラーマクロ一覧用ラベル

    Public LBL_cmnt_B As Label 'コメント用ラベル（下側用）'160316 hishiki コメント機能対応
    Public LBL_cmnt_R As Label 'コメント用ラベル（右側用）'160316 hishiki コメント機能対応

    Public DScorrect As DataSet '補正ボタン用データセット
    Public correctTable As DataTable '補正コントロール用データテーブル

    'Public DScmb As DataSet 'スイッチ用データセット
    Public cmbTable As DataTable 'コンボボックス用データテーブル

    Public prgTable As DataTable '表示プログラム変更時使用テーブル
    Public relationTable As DataTable 'リレーションコントロール用テーブル
    Public relationDispflgTable As DataTable '151118 hishiki switch,input,correctの表示非表示対応 リレーションディスフラグ用テーブル
    Public relationDispflgValueTable As DataTable '151118 hishiki　switch,input,correctの表示非表示対応 リレーションディスプフラグ値保持用テーブル

    Public DSswitch As DataSet 'スイッチ用データセット
    Public switchTable As DataTable 'スイッチ用テーブル
    Public onoffTable As DataTable 'onoff用テーブル

    Public modelSplit As String() '型式を「-」で分割した文字列の保持用変数
    Public sizes As String() '型式情報中の数字のみのデータ用変数（size）

    'コントロールの高さ、幅、文字サイズ設定等
    Public PctrFlg As Integer
    Public PctrWidth As Integer
    Public PctrHeight As Integer
    Public pctrBorderStype As Integer = 0 '図面のボーダースタイル
    Public Btn_add_text As String = "add"

    Public TxtBorderStyle As Integer = 0 'テキストボックスのボーダースタイル
    Public TB_modelTxtStrSize As Integer 'TB_modelテキストボックスの文字サイズ
    Public TxtStrSize As Integer 'テキストボックスの文字サイズ
    Public LblStrSize As Integer 'ラベルの文字サイズ
    Public BtnStrSize As Integer 'ボタンの文字サイズ（input,add,del共通）

    Public TxtMaxInputNum As Integer 'テキストボックス最大入力数
    Public TB_PrgMaxInputNum As Integer 'TB_Prgテキストボックス最大入力数
    Public TB_PrgMaxInputStr As String 'TB_Prgテキストボックス最大入力数

    Public MeasureValueLength As Integer '測定器で測定した値の桁数

    Public TB_alart_text_machineON As String 'アラートテキストの機械稼働中メッセージ
    Public TB_alart_text_send As String 'アラートテキストの送信中メッセージ

    'ONOFF.txtのファイル名（絶対アドレス）
    Public ONOFF_txt As String
    Public OdtCreate As DateTime    '更新日時でのデータ更新用
    Public NdtCreate As DateTime    '更新日時でのデータ更新用
    Public MachineOnFlg_now As Integer     'ONOFFテキストの更新監視フラグnow(加工時：1）
    Public MachineOnFlg_old As Integer     'ONOFFテキストの更新監視フラグold(加工時：1）

    Public MACRO_txt As String 'Macro.txtのファイル名（絶対アドレス）

    Public WaitTime_TB_Focus As Integer 'フォーカスが外れた際元に戻すための許容時間の設定（秒）
    Public focusOffDate_old As DateTime
    Public focusOffDate_now As DateTime
    Public MefocusOffDate_old As DateTime
    Public MefocusOffDate_now As DateTime

    Public WaitTime_AfterSend As Integer 'マクロ転送後、操作不能時間（秒）

    Public txtChangeEventFlg As Integer 'テキストチェンジイベント有効化フラグ　有効：1　無効：０

    Public ID As Integer 'type_define.csvに定義したID。

    Public waitFlg As Integer = 0 '待機中フラグ　１：待機中　０：非待機
    Public waitTime_old As DateTime
    Public waitTime_now As DateTime

    Public sendFileFlg As Integer = 0 'macro.txt送信中フラグ　１：送信中　０：非送信中

    Public delAddContrlFlg As Integer = 0 'addContrl削除フラグ　１：削除実行

    Public ScreenSizeRatio As Integer = 100 'DNC画面サイズ比（対タブレット画面サイズ）'150901 hishiki 南通日報システム要求対応

    '150928 hishiki Brother機能追加
    Public COMMAND_txt As String
    Public TopMacro As Integer = 500
    Public EndMacro As Integer = 500

    '151006 hishiki csvファイル読込エラー機能追加
    Public csvErrFlg As Integer = 0
    Public csvErrFile As String = ""

    '151012 hishiki 
    Public SmacroBrother As String = ""
    Public commuState As Integer = 0

    '160805 hishiki 小数点以下桁数設定
    Public DecimalPlace As Integer = 4 'デフォルト値を4とする
    Public NumberOfDigit As Integer = 5 'デフォルト値を5とする

    'log4net用
    Public Shared ReadOnly Logger As log4net.ILog = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType)

    '●画面ロード時イベント
    Private Sub Frm_main_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        Try

            AddNo = 0 'AddNo初期化
            DispGrpNo = 0
            addflg = 0 'addflg初期化
            fileErrCnt = 0 'メッセージ初期化

            'txtchange動的イベントを無効化
            txtChangeEventFlg = 0

            'マスタファイル数初期化
            fileNum = 0

            'アラート用テキストボックスを初期非表示
            TB_alart.Visible = False

            'Btn_chngprgrm、TB_Prgをデフォルトで非表示とする（prgが複数ある場合、再度表示）
            Btn_chngprgrm.Visible = False
            TB_Prg.Visible = False

            DSbase = New DataSet 'データセット初期化
            dispPrgNo = 1 '表示プログラム番号にデフォルト値１を設定

            '基本テーブル初期化
            T_ini = New DataTable("T_ini")
            T_prg = New DataTable("T_prg")
            T_header = New DataTable("T_header")
            T_math = New DataTable("T_math")
            T_type_define = New DataTable("T_type_define")
            T_type_relation = New DataTable("T_type_relation")
            T_type_prg = New DataTable("T_type_prg")
            T_type_chngvl = New DataTable("T_type_chngvl")

            '基本テーブル用csvファイルを読み込んで、テーブルへセット
            LoadFileToTBL(Path, "ini.csv", DSbase, T_ini)
            LoadFileToTBL(Path, "prg.csv", DSbase, T_prg)
            LoadFileToTBL(Path, "header.csv", DSbase, T_header)
            LoadFileToTBL(Path, "math.csv", DSbase, T_math)
            LoadFileToTBL(Path, "type_define.csv", DSbase, T_type_define)
            LoadFileToTBL(Path, "type_relation.csv", DSbase, T_type_relation)
            LoadFileToTBL(Path, "type_prg.csv", DSbase, T_type_prg)
            LoadFileToTBL(Path, "type_chngvl.csv", DSbase, T_type_chngvl)

            setIni() 'iniファイル設定
            setPRG() 'prgファイル設定

            'プログラム毎のテーブル保持用データセット初期化()
            DSprg = New DataSet

            'プログラム毎のテーブルを初期化。CSVファイル読み込んでテーブルへセット
            For Each rw As DataRow In DSbase.Tables("T_prg").Rows
                Dim prgNo As String = rw.Item("PRGNO").ToString
                Dim folder As String = rw.Item("PRGNAME").ToString

                T_cntrl = New DataTable("T_cntrl" & prgNo)
                T_cntrl_rex = New DataTable("T_cntrl_rex" & prgNo)
                T_load = New DataTable("T_load" & prgNo)
                T_select = New DataTable("T_select" & prgNo)
                T_relation = New DataTable("T_relation" & prgNo)
                T_correct = New DataTable("T_correct" & prgNo)
                T_ChngValue = New DataTable("T_ChngValue" & prgNo)
                T_define = New DataTable("T_define" & prgNo)
                T_calc = New DataTable("T_calc" & prgNo)
                T_switch = New DataTable("T_switch" & prgNo)
                T_measure = New DataTable("T_measure" & prgNo)
                T_add = New DataTable("T_add" & prgNo)
                T_input = New DataTable("T_input" & prgNo)

                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "cntrl.csv", DSprg, T_cntrl) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "cntrl_rex.csv", DSprg, T_cntrl_rex) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "load.csv", DSprg, T_load) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "select.csv", DSprg, T_select) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "relation.csv", DSprg, T_relation) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "correct.csv", DSprg, T_correct) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "chngValue.csv", DSprg, T_ChngValue) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "define.csv", DSprg, T_define) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "calc.csv", DSprg, T_calc) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "switch.csv", DSprg, T_switch) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "measure.csv", DSprg, T_measure) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "add.csv", DSprg, T_add) '150113 hishiki
                LoadFileToTBL(System.IO.Path.Combine(Path, folder), "input.csv", DSprg, T_input) '151118 hishiki
            Next

            '本フォームの表示位置をデスクトップの左端に固定
            Me.StartPosition = FormStartPosition.Manual
            Me.DesktopLocation = New Point(0, 0)

            '151006 csvファイル読込チェックでエラーがあった場合は、エラーを表示して処理終了
            If fileErrCnt > 0 Or csvErrFlg = 1 Then
                Dim msg As String = ""
                'CSVファイルオープン時とそれ以外でメッセージを分ける
                If csvErrFlg = 1 Then
                    msg = "Close " & csvErrFile & " , and Restart DNC"
                Else
                    msg = "CSV File Error. Check LogFile."
                End If

                MsgBox(msg)
                Me.Close()
                Exit Sub

            End If

            'txtchange動的イベントを有効化
            txtChangeEventFlg = 1

            'フォーム初期起動時に、onoff.txtの値を0（非稼動）へ変更
            ChangeOnOffTextToZero()
            MachineOnFlg_now = 0
            MachineOnFlg_old = 0

            'バージョン情報をDNC画面に表示
            Dim appPath As String = System.Reflection.Assembly.GetExecutingAssembly().Location
            versionName = appPath.Replace(Application.StartupPath, "")
            versionName = versionName.Replace(".exe", "")
            versionName = versionName.Remove(0, 1) '先頭の「\」または「/」を削除
            If POReadFlg = 1 Then
                versionName = versionName & " " & "(PO read)"
            End If
            'マスタの更新日付の中から一番新しい更新日付を取得
            latestWriteDate = LastWriteDates(0)
            For i As Integer = 0 To UBound(LastWriteDates)
                If latestWriteDate <= LastWriteDates(i) Then
                    latestWriteDate = LastWriteDates(i)
                End If
            Next

            versionName = versionName & "  " & latestWriteDate

            '実績記録の場合（オペレーターID入力）
            If WorkInfoRecordFlg = 1 Then
                '見出し表示設定
                operatorInfo = "  Operator:" & OperatorName & "  MachineID:" & MachineID & "  Status:" & PRO_STATUSCD & "  S_Status:" & PRO_S_STATUSCD
            Else
                Btn_chgOperator.Dispose()
            End If

            Me.Text = versionName & operatorInfo

            'フォームサイズを使用環境に合わせてフルスクリーン(100%)へ変更
            changeFormSize(ScreenSizeRatio)

            '画面の上下のコントロール（デフォルトで設置されているコントロール）のサイズを設定
            setDefaultControlSize()

            'タイマー処理開始
            Timer1.Start()

            'エラー発生時は、各コントロール非表示
        Catch ex As Exception
            Logger.Warn("err1")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)

            '151006 csvファイル読込チェックでエラーがあった場合は、エラーを表示して処理終了
            MsgBox("Close " & csvErrFile & " , and Restart DNC")
            Me.Close()
            Exit Sub

        End Try

    End Sub

    '●ファイル情報読み込み関数
    '指定ファイルを読み込み、配列で返却。
    '引数：ファイル名（フルパス）
    '戻値：2次元配列　ファイルがない場合は1×1の配列（空白）を返却
    Private Sub LoadFileToTBL(ByVal folder As String, ByVal fileName As String, ByVal ds As DataSet, ByVal tbl As DataTable)

        Dim tmpStr As String
        Dim tmpArray() As String
        Dim i As Integer
        i = 0

        Dim headerStrNum As Integer = 0
        Dim tmpStrNum As Integer = 0

        Try
            If System.IO.File.Exists(System.IO.Path.Combine(folder, fileName)) Then '150113 hishiki 

                'masterフォルダ内のマスタファイルの更新日付取得
                Dim LastWriteDate As DateTime = System.IO.File.GetLastWriteTime(System.IO.Path.Combine(folder, fileName)) '150113 hishiki 
                ReDim Preserve LastWriteDates(fileNum)
                LastWriteDates(fileNum) = LastWriteDate
                fileNum = fileNum + 1

                'Dim cReader As New System.IO.StreamReader(System.IO.Path.Combine(folder, fileName), Encoding.GetEncoding("Shift_JIS")) '150113 hishiki
                Dim cReader As New System.IO.StreamReader(System.IO.Path.Combine(folder, fileName), System.Text.Encoding.Default) '150206 hishiki
                ' 読み込みできる文字がなくなるまで繰り返す
                While (cReader.Peek() >= 0)
                    ' ファイルを 1 行ずつ読み込む
                    tmpStr = cReader.ReadLine()
                    If tmpStr <> "" Then

                        ''各行の列数を取得
                        tmpArray = Split(tmpStr, ",")
                        If i = 0 Then '先頭行の場合
                            headerStrNum = UBound(tmpArray, 1) + 1 '先頭行の項目数をカウント
                            '先頭行を項目に設定
                            For j As Integer = 0 To UBound(tmpArray, 1)
                                tbl.Columns.Add(tmpArray(j), GetType(String))
                            Next

                        Else '2行目以降
                            tmpStrNum = UBound(tmpArray, 1) + 1 '2行目以降の各行の項目数をカウント

                            '先頭行の項目数の数を比較して、同じではない場合csvファイルエラーとしてエラーメッセージ作成(csvファイル文字化けによるカンマ削除現象対応)
                            If tmpStrNum <> headerStrNum Then
                                Logger.Warn("err15:csv file error")
                                Logger.Warn("fileName=" & System.IO.Path.Combine(folder, fileName))
                                Logger.Warn("line=" & i + 1)

                                fileErrCnt = fileErrCnt + 1
                            End If

                            Dim rw As DataRow = tbl.NewRow()
                            For k As Integer = 0 To UBound(tmpArray, 1)
                                rw(k) = tmpArray(k)
                            Next
                            tbl.Rows.Add(rw)

                        End If
                        i = i + 1

                    End If
                End While

                cReader.Close()

                'ファイルタイプに応じて、テーブルへ列（定義の長さ）追加
                Select Case fileName
                    Case "type.csv"
                        tbl.Columns.Add("TXTLEN", GetType(Integer), "LEN(TYPE)")
                    Case "type_define.csv"
                        tbl.Columns.Add("TXTLEN", GetType(Integer), "LEN(TYPE)")
                    Case "define.csv"
                        tbl.Columns.Add("TXTLEN", GetType(Integer), "LEN(BEFORE)")
                    Case "chngValue.csv"
                        tbl.Columns.Add("TXTLEN", GetType(Integer), "LEN(BEFORE)")
                    Case Else

                End Select

                ds.Tables.Add(tbl)

            End If

        Catch ex As Exception
            Logger.Warn("err2")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)

            '151006 hishiki csvファイル読込エラー機能追加
            csvErrFlg = 1
            csvErrFile = fileName

        End Try

    End Sub

    '●T_cntrlの「種類」に応じてコントロールを作成
    'Switch系
    Private Sub makeCntrlSwitch(ByVal macroName As String, ByVal LabelTxt As String, ByVal dispFlg As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        '引数が「switch」で始まる文字列では無い場合、コントロールを作成しない
        If value.IndexOf("switch") <> 0 Then Exit Sub

        Dim rw_switch As DataRow() = DSprg.Tables("T_switch" & dispPrgNo).Select("DEFINE=" & "'" & value & "'" & "")
        If rw_switch.Length < 1 Then Exit Sub 'T_switchにデータが無い場合、何もしない

        'テーブルが存在する場合、一旦削除(後でデータセットへ保存するため削除しても問題なし)
        If switchTable IsNot Nothing Then
            switchTable.Dispose()
        End If

        'ボタン押下時に使用するスイッチ用テーブルを作成
        switchTable = New DataTable(macroName)
        switchTable.Columns.Add("NO", GetType(Integer))
        switchTable.Columns.Add("DISPVALUE", GetType(String))
        switchTable.Columns.Add("SENDVALUE", GetType(String))
        switchTable.Columns.Add("ONOFF", GetType(String)) '160128 hishiki add　switch.csvにONOFFの項目追加

        Dim defaultSendValue As String = ""
        Dim maxlenStr As String = ""
        'スイッチ用テーブルに値を設定
        For i As Integer = 0 To rw_switch.Length - 1

            '151118 hishiki start switch,input,correctの表示非表示対応
            Dim define As String = rw_switch(i).Item("DISPVALUE").ToString
            If define.Contains("relation") Then
                setRelationDispFlgTbl(define, macroName)
                '151118 hishiki end switch,input,correctの表示非表示対応

            Else
                Dim row As DataRow = switchTable.NewRow()

                '160808 hishiki start
                'row("NO") = i + 1
                'row("DISPVALUE") = rw_switch(i).Item("DISPVALUE")
                'row("SENDVALUE") = rw_switch(i).Item("SENDVALUE")
                Dim dispVal As String = rw_switch(i).Item("DISPVALUE").ToString
                Dim sendVal As String = rw_switch(i).Item("SENDVALUE").ToString
                If IsNumeric(sendVal) Then
                    Dim formatStr As String = makeFormatStr(sendVal)
                    sendVal = Format(Decimal.Parse(sendVal), formatStr)
                End If

                row("NO") = i + 1
                row("DISPVALUE") = dispVal
                row("SENDVALUE") = sendVal
                If i = 0 Then
                    defaultSendValue = sendVal 'switchテーブルの先頭行のSENDVALUEをデフォルト値として使用
                End If
                '160808 hishiki end

                '160128 hishiki start　switch.csvにONOFFの項目がある場合、その値をT_switchのONOFFへ保存
                If DSprg.Tables("T_switch" & dispPrgNo).Columns.Contains("ONOFF") Then 'T_switchの中にONOFFの項目が存在した場合
                    Dim onoffValue As String = rw_switch(i).Item("ONOFF")
                    row("ONOFF") = onoffValue

                    'ONOFFの機能を使用している場合onoffSwitchflgオン
                    If onoffValue = "1" Then
                        onoffSwitchflg = 1 'onoffSwitchflgオン
                    End If

                    'T_switchの中にONOFFの項目が存在しなかった場合
                Else
                    row("ONOFF") = ""
                End If
                '160128 hishiki end

                switchTable.Rows.Add(row)

                'DISPVALUEの中から一番長い文字を取得
                If maxlenStr.Length <= rw_switch(i).Item("DISPVALUE").ToString.Length Then
                    maxlenStr = rw_switch(i).Item("DISPVALUE").ToString
                End If
            End If
        Next

        If DSswitch.Tables.Contains(macroName) Then
            DSswitch.Tables.Remove(macroName)
        End If
        DSswitch.Tables.Add(switchTable)

        '151214 hishiki start TB作成前にLBL作成によるバグ対応　LBL newを TB newの後に移動
        'ラベルコントロールの生成
        'LBL = New Label
        'makeLabel(LBL, macroName, LabelTxt, TB.Height)
        '151214 hishiki end

        'テキストボックスコントロールの生成

        ''160808 hishiki start 上の方に移動
        'Dim defaultSendValue As String = switchTable.Rows(0).Item("SENDVALUE")
        ''160808 hishiki end

        TB = New TextBox
        makeTextBox(TB, macroName, defaultSendValue)
        AddHandler TB.TextChanged, AddressOf txt_change

        '151214 hishiki start TB作成前にLBL作成によるバグ対応　TB newの後に移動
        'ラベルコントロールの生成
        LBL = New Label
        makeLabel(LBL, macroName, LabelTxt, TB.Height)
        '151214 hishiki end

        'ボタンコントロールの生成
        Dim defaultDispValue As String = switchTable.Rows(0).Item("DISPVALUE")
        BTN_switch = New Button
        makeButtonSwitch(BTN_switch, macroName, defaultDispValue, TB.Height, maxlenStr)

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel
        Dim wdth As Integer = LBL.Width + BTN_switch.Width + TB.Width
        Dim hght As Integer = TB.Height

        '160316 start 各コントロールにコメント付与機能追加
        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 3

        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        'テーブルレイアウトパネルに、コントロールを配置
        TLP.Controls.Add(LBL, 0, 0)
        TLP.Controls.Add(BTN_switch, 1, 0)
        TLP.Controls.Add(TB, 2, 0)

        'フローレイアウトパネルに作成したテーブルレイアウトパネルを配置
        FlowLayoutPanel1.Controls.Add(TLP)

        'T_cntrlのDISPFLGが0の場合、非表示にする
        If dispFlg = "0" Then
            TLP.Visible = False
        Else
            TLP.Visible = True
        End If

    End Sub

    'Measure系
    Private Sub makeCntrlMeasure(ByVal macroName As String, ByVal LabelTxt As String, ByVal dispFlg As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        '引数が「switch」で始まる文字列では無い場合、コントロールを作成しない
        If value.IndexOf("measure") <> 0 Then Exit Sub

        Dim rw_measure As DataRow() = DSprg.Tables("T_measure" & dispPrgNo).Select("DEFINE=" & "'" & value & "'" & "")
        If rw_measure.Length < 1 Then Exit Sub 'T_measureにデータが無い場合、何もしない
        Dim defaultValue As String = rw_measure(0).Item("DEFVALUE").ToString
        '160808 hishiki start
        If IsNumeric(defaultValue) Then
            Dim formatStr As String = makeFormatStr(defaultValue)
            defaultValue = Format(Decimal.Parse(defaultValue), formatStr)
        End If
        '160808 hishiki end

        'テキストボックスコントロールの生成
        TB = New TextBox
        makeTextBox(TB, macroName, defaultValue)
        AddHandler TB.TextChanged, AddressOf txt_change

        'ラベルコントロールの生成
        LBL = New Label
        makeLabel(LBL, macroName, LabelTxt, TB.Height)

        'ラベルコントロールの生成(測定値入力用)
        Dim LBLname As String = macroName
        Dim LBLvalue As String = rw_measure(0).Item("LABELVALUE")
        LBL_measure = New Label
        makeLabelMeasure(LBL_measure, LBLname, LBLvalue, TB.Height)

        'テキストボックスコントロールの生成(測定値入力用)
        If TB_measure IsNot Nothing Then
            TB_measure.Dispose()
        End If
        TB_measure = New TextBox
        Dim TB_measure_name As String = macroName & "M" '測定値入力用テキストボックスは「TB」＋マクロ名＋「M」で作成する
        makeTextBox(TB_measure, TB_measure_name, "")
        AddHandler TB_measure.TextChanged, AddressOf txtMeasure_change
        setMeasureTxtBackColor(TB_measure) '測定値入力用テキストボックスの背景色を設定
        measureDefine = rw_measure(0).Item("SENDVALUE") 'txtMeasure_changeイベントで使用

        '151103 hishiki MeasureValueLengthは、測定値用TBの初期widthとして使用　start
        TB_measure.Width = TextRenderer.MeasureText(New String("0", MeasureValueLength - 1), TB_measure.Font).Width '半角数字のサイズ×最大文字数でwidth設定
        '151103 hishiki end

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel
        Dim wdth As Integer = LBL.Width + TB.Width + LBL_measure.Width + TB_measure.Width
        Dim hght As Integer = TB.Height

        '160316 start 各コントロールにコメント付与機能追加
        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 4

        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        TLP.Controls.Add(LBL, 0, 0) 'テーブルレイアウトパネルの１列目にオブジェクト配置
        TLP.Controls.Add(LBL_measure, 1, 0) 'テーブルレイアウトパネルの２列目にオブジェクト配置
        TLP.Controls.Add(TB_measure, 2, 0) 'テーブルレイアウトパネルの３列目にオブジェクト配置
        TLP.Controls.Add(TB, 3, 0) 'テーブルレイアウトパネルの４列目にオブジェクト配置

        'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
        FlowLayoutPanel1.Controls.Add(TLP)

        'T_cntrlのDISPFLGが0の場合、非表示にする
        If dispFlg = "0" Then
            TLP.Visible = False
        Else
            TLP.Visible = True
        End If

    End Sub

    'correct系
    Private Sub makeCntrlCorrect(ByVal macroName As String, ByVal LabelTxt As String, ByVal dispFlg As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        '引数が「correct」で始まる文字列では無い場合、コントロールを作成しない
        If value.IndexOf("correct") <> 0 Then Exit Sub

        Dim rw_correct As DataRow() = DSprg.Tables("T_correct" & dispPrgNo).Select("DEFINE=" & "'" & value & "'" & "")
        If rw_correct.Length < 1 Then Exit Sub 'T_correctにデータが無い場合、何もしない

        '補正用テーブルが存在する場合、一旦削除
        If correctTable IsNot Nothing Then
            correctTable.Dispose()
        End If

        '補正用テーブル初期化
        correctTable = New DataTable(macroName)
        correctTable.Columns.Add("DEFINE", GetType(String))
        correctTable.Columns.Add("DEFVALUE", GetType(String))
        correctTable.Columns.Add("UPDWN", GetType(String))
        correctTable.Columns.Add("UPPER", GetType(String))
        correctTable.Columns.Add("LOWER", GetType(String))
        correctTable.Columns.Add("ONOFF", GetType(String)) '160216 hishiki add　correct.csvにONOFFの項目追加

        '151118 hishiki　switch,input,correctの表示非表示対応
        Dim cnt As Integer = 0
        For i As Integer = 0 To UBound(rw_correct)
            Dim defaultValue As String = rw_correct(i).Item("DEFVALUE")
            'DEFVALUEの項目に「relation」が含まれる場合、表示非表示制御あり。テーブルへ定義を保存
            If defaultValue.Contains("relation") Then
                setRelationDispFlgTbl(defaultValue, macroName)
            Else
                'correctTableへセットできるのは、1行分のみ
                If cnt = 0 Then
                    'preset対応 150501 hishiki
                    Dim presetDEFINE As String = ""
                    If defaultValue.Contains("preset") Then

                        'addの場合、presetDEFINEへ値をセットしない（presetが有効なのはadd前の登録のみ）
                        If AddNo = 0 Then
                            presetDEFINE = defaultValue
                        End If

                        Dim tmprows As DataRow() = DSprg.Tables("T_preset" & dispPrgNo).Select("DEFINE='" & defaultValue & "'")
                        If tmprows.Length = 1 Then
                            defaultValue = tmprows(0).Item("VALUE")
                        Else
                            defaultValue = ""
                        End If
                    End If

                    Dim UPDWN As String = rw_correct(i).Item("UPDWN")
                    Dim UPPER As String = rw_correct(i).Item("UPPER")
                    Dim LOWER As String = rw_correct(i).Item("LOWER")

                    Dim row As DataRow = correctTable.NewRow()
                    row("DEFINE") = macroName
                    row("DEFVALUE") = defaultValue
                    row("UPDWN") = UPDWN
                    row("UPPER") = UPPER
                    row("LOWER") = LOWER

                    '160216 hishiki start　correct.csvにONOFFの項目がある場合、その値をT_correctのONOFFへ保存
                    If DSprg.Tables("T_correct" & dispPrgNo).Columns.Contains("ONOFF") Then 'T_correctの中にONOFFの項目が存在した場合
                        Dim onoffValue As String = rw_correct(i).Item("ONOFF")
                        row("ONOFF") = onoffValue

                        'ONOFFの機能を使用している場合onoffCorrectflgオン
                        If onoffValue = "1" Then
                            onoffCorrectflg = 1 'onoffCorrectflgオン
                        End If

                        'T_correctの中にONOFFの項目が存在しなかった場合
                    Else
                        row("ONOFF") = ""
                    End If
                    '160216 hishiki end

                    correctTable.Rows.Add(row)

                    If DScorrect.Tables.Contains(macroName) Then
                        DScorrect.Tables.Remove(macroName)
                    End If
                    DScorrect.Tables.Add(correctTable)


                    '160805 hishiki start
                    'DEFVALUE,UPDWN,UPPER,LOWERの中から一番長い文字列の文字数取得
                    'Dim maxlenStrLngth As Integer = defaultValue.Length
                    'If maxlenStrLngth < UPDWN.Length Then
                    '    maxlenStrLngth = UPDWN.Length
                    'End If
                    'If maxlenStrLngth < UPPER.Length Then
                    '    maxlenStrLngth = UPPER.Length
                    'End If
                    'If maxlenStrLngth < LOWER.Length Then
                    '    maxlenStrLngth = LOWER.Length
                    'End If
                    'maxlenStrLngth = maxlenStrLngth + 1

                    Dim index_UPDWN As Integer = UPDWN.IndexOf(".") 'updwnの値の.の位置を取得
                    Dim index_Def As Integer = defaultValue.IndexOf(".") 'defaultvalueの値の.の位置を取得
                    Dim DecimalPlace_UP As Integer = Len(UPDWN) - index_UPDWN 'updwnの小数点以下桁数を取得
                    Dim DecimalPlace_Def As Integer = Len(defaultValue) - index_Def 'defaultvalueの小数点以下桁数を取得
                    Dim tmpStr As String = UPDWN
                    If DecimalPlace_Def > DecimalPlace_UP Then
                        tmpStr = defaultValue '小数点以下桁数が多いほうを、画面表示時のフォーマットのベースとして選択
                    End If
                    '画面表示時のフォーマットをUPDWNの値をベースに作成
                    'Dim tmpStr As String = row("UPDWN")

                    Dim formatStr As String = makeFormatStr(tmpStr)
                    Dim dispStr As String = Format(Decimal.Parse(defaultValue), formatStr)
                    Dim maxlenStrLngth As Integer = dispStr.Length + 1

                    '160805 hishiki end

                    'テキストボックスコントロールの生成
                    TB = New TextBox
                    makeTextBox(TB, macroName, defaultValue, maxlenStrLngth)

                    '160808 hishiki start
                    TB.Text = dispStr
                    'TB.Text = Format(Single.Parse(defaultValue), formatStr)
                    '160808 hishiki end                    

                    AddHandler TB.TextChanged, AddressOf txt_change

                    'ラベルコントロールの生成
                    LBL = New Label
                    If presetDEFINE = "" Then
                        makeLabel(LBL, macroName, LabelTxt, TB.Height)
                    Else
                        makeLabelPRESET(LBL, presetDEFINE, LabelTxt, TB.Height)
                    End If

                    'ボタン＋コントロールの生成
                    BTN_pls = New Button
                    makeButtonPlus(BTN_pls, macroName, "+", TB.Height)

                    'ボタン-コントロールの生成
                    BTN_mns = New Button
                    makeButtonMinus(BTN_mns, macroName, "-", TB.Height)

                    'テーブルレイアウトパネルの生成
                    TLP = New TableLayoutPanel
                    Dim wdth As Integer = LBL.Width + BTN_pls.Width + TB.Width + BTN_mns.Width
                    Dim hght As Integer = TB.Height

                    '160316 start 各コントロールにコメント付与機能追加
                    Dim rowCnt As Integer = 1
                    Dim columnCnt As Integer = 4

                    makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
                    makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
                    'makeTLP(TLP, macroName, hght, wdth, columnCnt)
                    '160316 end

                    TLP.Controls.Add(LBL, 0, 0)
                    TLP.Controls.Add(BTN_pls, 1, 0)
                    TLP.Controls.Add(TB, 2, 0)
                    TLP.Controls.Add(BTN_mns, 3, 0)

                    'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
                    FlowLayoutPanel1.Controls.Add(TLP)

                    'T_cntrlのDISPFLGが0の場合、非表示にする
                    If dispFlg = "0" Then
                        TLP.Visible = False
                    Else
                        TLP.Visible = True
                    End If

                    cnt = cnt + 1

                End If

            End If
        Next

    End Sub

    '160316 hishiki コメント用ラベル作成用関数
    Private Sub makeCmntLabel(ByVal macroName As String, ByVal cmnt_B As String, ByVal cmnt_R As String, ByRef rowCnt As Integer, ByRef columnCnt As Integer, ByRef wdth As Integer)
        'コメント用ラベルコントロールの生成
        LBL_cmnt_B = New Label
        LBL_cmnt_R = New Label
        Dim tmpName As String = ""
        '右側にコメントがある場合は、もう一列追加
        If cmnt_R <> "" Then
            tmpName = macroName.Replace("#", "")
            tmpName = tmpName & "_cmnt_R"
            makeLabel(LBL_cmnt_R, tmpName, cmnt_R, TB.Height)

            wdth = wdth + LBL_cmnt_R.Width
            columnCnt = columnCnt + 1
        End If

        '下側にコメントがある場合は、もう1行追加
        If cmnt_B <> "" Then
            tmpName = macroName.Replace("#", "")
            tmpName = tmpName & "_cmnt_B"
            cmnt_B = "  " & cmnt_B  '２マス間隔をあける
            makeLabel(LBL_cmnt_B, tmpName, cmnt_B, TB.Height)

            rowCnt = rowCnt + 1
            If LBL_cmnt_B.Width > wdth Then
                wdth = LBL_cmnt_B.Width
            End If

        End If
    End Sub

    'load系
    Private Sub makeCntrlLoad(ByVal macroName As String, ByVal labelTxt As String, ByVal dispFlg As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        'テキストボックスコントロールの生成
        TB = New TextBox
        makeTextBox(TB, macroName, value)
        AddHandler TB.TextChanged, AddressOf txt_change

        'ラベルコントロールの生成
        LBL = New Label
        makeLabel(LBL, macroName, labelTxt, TB.Height)

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel

        Dim wdth As Integer = LBL.Width + TB.Width
        Dim hght As Integer = TB.Height

        '160316 start 各コントロールにコメント付与機能追加
        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 2
        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        'TLPの1行目へ、オブジェクト配置
        TLP.Controls.Add(LBL, 0, 0) 'テーブルレイアウトパネルの１列目にオブジェクト配置
        TLP.Controls.Add(TB, 1, 0) 'テーブルレイアウトパネルの2列目にオブジェクト配置

        'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
        FlowLayoutPanel1.Controls.Add(TLP)

        'T_cntrlのDISPFLGが0の場合、非表示にする
        If dispFlg = "0" Then
            TLP.Visible = False
        Else
            TLP.Visible = True
        End If

    End Sub

    'input系
    Private Sub makeCntrlInput(ByVal macroName As String, ByVal LabelTxt As String, ByVal dispFlg As String, ByVal btnName As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        'preset対応 150501 hishiki
        Dim presetDEFINE As String = ""
        If value.Contains("preset") Then
            presetDEFINE = value 'presetDEFINEに値を設定
            Dim tmprows As DataRow() = DSprg.Tables("T_preset" & dispPrgNo).Select("DEFINE='" & value & "'")
            If tmprows.Length = 1 Then
                value = tmprows(0).Item("value")
            Else
                value = ""
            End If

            '151118 hishiki input.csv追加 start
        ElseIf value.Contains("input") Then 'load.csvに「input*」で定義されていた場合、input.csvから詳細を取得
            Dim rw_input As DataRow() = DSprg.Tables("T_input" & dispPrgNo).Select("DEFINE=" & "'" & value & "'" & "")
            If rw_input.Length < 1 Then Exit Sub 'rw_inputにデータが無い場合、何もしない

            For Each rw As DataRow In rw_input
                Dim defvalue As String = rw.Item("DEFVALUE").ToString
                'DEFVALUEの項目に「relation」が含まれる場合、表示非表示制御あり。テーブルへ定義を保存
                If defvalue.Contains("relation") Then
                    setRelationDispFlgTbl(defvalue, macroName)
                Else
                    'input.csvのDEFVALUEにprestが設定されていた場合
                    If defvalue.Contains("preset") Then

                        'addの場合、presetDEFINEへ値をセットしない（presetが有効なのはadd前の登録のみ）
                        If AddNo = 0 Then
                            presetDEFINE = defvalue 'presetDEFINEに値を設定
                        End If

                        Dim tmprows As DataRow() = DSprg.Tables("T_preset" & dispPrgNo).Select("DEFINE='" & defvalue & "'")
                        If tmprows.Length = 1 Then
                            value = tmprows(0).Item("value")
                        Else
                            value = ""
                        End If
                    Else
                        value = defvalue
                    End If

                    btnName = rw.Item("BTNNAME").ToString

                End If
            Next
            '151118 hishiki input.csv追加 end
        End If

        '160805 hishiki start
        '値が数字の場合、フォーマットを変換
        If IsNumeric(value) Then
            Dim formatStr As String = makeFormatStr(value)
            value = Format(Decimal.Parse(value), formatStr)
        End If
        '160805 hishiki end

        'テキストボックスコントロールの生成
        TB = New TextBox
        makeTextBox(TB, macroName, value)
        AddHandler TB.TextChanged, AddressOf txt_change

        'ラベルコントロールの生成
        LBL = New Label
        If presetDEFINE = "" Then
            makeLabel(LBL, macroName, LabelTxt, TB.Height)
        Else
            makeLabelPRESET(LBL, presetDEFINE, LabelTxt, TB.Height)
        End If

        'ボタンコントロールの生成
        BTN_input = New Button
        makeButtonInput(BTN_input, macroName, btnName, TB.Height)

        '160316 start 各コントロールにコメント付与機能追加
        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 3

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel
        Dim wdth As Integer = LBL.Width + BTN_input.Width + TB.Width
        Dim hght As Integer = TB.Height

        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        TLP.Controls.Add(LBL, 0, 0)
        TLP.Controls.Add(BTN_input, 1, 0)
        TLP.Controls.Add(TB, 2, 0)

        'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
        FlowLayoutPanel1.Controls.Add(TLP)

        'T_cntrlのDISPFLGが0の場合、非表示にする
        If dispFlg = "0" Then
            TLP.Visible = False
        Else
            TLP.Visible = True
        End If

    End Sub
    'select系
    Private Sub makeCntrlSelect(ByVal macroName As String, ByVal LabelTxt As String, ByVal dispFlg As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        '引数が「select」で始まる文字列では無い場合、コントロールを作成しない
        If value.IndexOf("select") <> 0 Then Exit Sub

        Dim rw_select As DataRow() = DSprg.Tables("T_select" & dispPrgNo).Select("DEFINE=" & "'" & value & "'" & "")
        If rw_select.Length = 0 Then Exit Sub

        'select系の場合は、select.csvファイルの最初値をデフォルト表示とする。
        Dim value_TBslct As String = ""
        Dim value_TB As String = ""
        Dim maxlengthStr As String = ""

        Dim defValue As String = ""

        cmbTable = New DataTable(dispPrgNo & "-" & macroName)
        cmbTable.Columns.Add("SelectValue", GetType(String))
        cmbTable.Columns.Add("MacroValue", GetType(String))

        'T_loadを読み込んで、データテーブルへ値を設定
        Dim i As Integer = 0
        For Each r As DataRow In rw_select

            value_TBslct = r.Item("DISPVALUE").ToString
            value_TB = r.Item("SENDVALUE").ToString

            '160808 hishiki start
            If IsNumeric(value_TB) Then
                Dim formatStr As String = makeFormatStr(value_TB)
                value_TB = Format(Decimal.Parse(value_TB), formatStr)
            End If
            '160808 hishiki end

            Dim row As DataRow = cmbTable.NewRow()
            row("SelectValue") = value_TBslct
            row("MacroValue") = value_TB
            cmbTable.Rows.Add(row)

            '150120 hishiki maxlengthStr.lengthからLenB(maxlengthStr)へ修正
            If LenB(maxlengthStr) < LenB(value_TBslct) Then
                maxlengthStr = value_TBslct
            End If

            '1つ目のデータをデフォルト値に設定
            If i = 0 Then
                defValue = value_TB
            End If
            i = i + 1

        Next

        'テキストボックスコントロールの生成
        TB = New TextBox
        makeTextBox(TB, macroName, defValue)
        AddHandler TB.TextChanged, AddressOf txt_change

        '150120 hishiki TB未作成での参照エラー対応のため、TB宣言後にLBL作成
        'ラベルコントロールの生成
        LBL = New Label
        makeLabel(LBL, macroName, LabelTxt, TB.Height)

        'コンボボックスの生成
        CMB = New ComboBox
        makeCMBBox(CMB, macroName, maxlengthStr, TB.Height)
        CMB.DataSource = cmbTable
        CMB.DisplayMember = "SelectValue"
        CMB.ValueMember = "MacroValue"
        'AddHandler CMB.Enter, AddressOf cmb_enter 'テキスト部に触るとリスト表示されるようにする
        AddHandler CMB.SelectedValueChanged, AddressOf cmb_change
        CMB.SelectedValue = defValue
        CMB.SelectionLength = 0

        '160316 start 各コントロールにコメント付与機能追加
        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 3

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel
        Dim wdth As Integer = LBL.Width + CMB.Width + TB.Width
        Dim hght As Integer = TB.Height
        If CMB.Height > TB.Height Then
            hght = CMB.Height
        End If
        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        TLP.Controls.Add(LBL, 0, 0)
        TLP.Controls.Add(CMB, 1, 0)
        TLP.Controls.Add(TB, 2, 0)

        'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
        FlowLayoutPanel1.Controls.Add(TLP)

        'T_cntrlのDISPFLGが0の場合、非表示にする
        If dispFlg = "0" Then
            TLP.Visible = False
        Else
            TLP.Visible = True
        End If

    End Sub
    'relation系
    Private Sub makeCntrlRelation(ByVal macroName As String, ByVal LabelTxt As String, ByVal dispFlg As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        'テキストボックスコントロールの生成
        'relation系は、txtchangeイベント無し
        TB = New TextBox
        makeTextBox(TB, macroName, value)

        'ラベルコントロールの生成
        LBL = New Label
        makeLabel(LBL, macroName, LabelTxt, TB.Height)

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel
        Dim wdth As Integer = LBL.Width + TB.Width
        Dim hght As Integer = TB.Height

        '160316 start 各コントロールにコメント付与機能追加
        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 2

        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        TLP.Controls.Add(LBL, 0, 0) 'テーブルレイアウトパネルの１列目にオブジェクト配置
        TLP.Controls.Add(TB, 1, 0) 'テーブルレイアウトパネルの2列目にオブジェクト配置

        'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
        FlowLayoutPanel1.Controls.Add(TLP)

        'T_cntrlのDISPFLGが0の場合、非表示にする
        If dispFlg = "0" Then
            TLP.Visible = False
        Else
            TLP.Visible = True
        End If

    End Sub
    'changePRG系
    Private Sub makeCntrlchangePRG(ByVal macroName As String, ByVal dispFlg As String, ByVal btnName As String, ByVal prgName As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        'テキストボックスコントロールの生成
        '作成するが使用しない（フォントのサイズ取得用）
        TB = New TextBox
        makeTextBox(TB, macroName, value)

        'ボタンコントロールの生成
        'Dim btnName As String = rw.Item("BTNNAME")
        BTN_changePRG = New Button
        makeButtonChangePRG(BTN_changePRG, prgName, btnName, TB.Height)

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel
        Dim wdth As Integer = BTN_changePRG.Width
        Dim hght As Integer = TB.Height

        '160316 start 各コントロールにコメント付与機能追加
        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 1

        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        TLP.Controls.Add(BTN_changePRG, 0, 0) 'テーブルレイアウトパネルの１列目にオブジェクト配置

        'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
        FlowLayoutPanel1.Controls.Add(TLP)

        'T_cntrlのDISPFLGが0の場合、非表示にする
        If dispFlg = "0" Then
            TLP.Visible = False
        Else
            TLP.Visible = True
        End If

    End Sub
    'selectPRG系
    Private Sub makeCntrlselectPRG(ByVal macroName As String, ByVal dispFlg As String, ByVal value As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        'テキストボックスコントロールの生成
        '作成するが使用しない（フォントのサイズ取得用）
        TB = New TextBox
        makeTextBox(TB, macroName, " ")

        Dim maxlenStr As String = TB_PrgMaxInputStr & " " '160314 hishiki 1文字分余裕を持たせる

        'デフォルト表示値作成
        Dim bufRow As DataRow() = prgTable.Select("DISPPRGNO=" & "'" & dispPrgNo & "'" & "")
        If bufRow.Length <> 1 Then Exit Sub
        Dim defaultValue As String = bufRow(0).Item("PRGTEXT")

        CMB_selectPRG = New ComboBox
        makeCMBBox(CMB_selectPRG, macroName, maxlenStr, TB.Height)
        CMB_selectPRG.DataSource = prgTable
        CMB_selectPRG.DisplayMember = "PRGTEXT"
        CMB_selectPRG.ValueMember = "PRGNAME"
        'AddHandler CMB_selectPRG.Enter, AddressOf cmb_enter 'テキスト部に触るとリスト表示されるようにする
        AddHandler CMB_selectPRG.DropDownClosed, AddressOf cmb_selectPRG_DropDownClosed
        CMB_selectPRG.SelectedValue = defaultValue

        CMB_selectPRG.SelectionLength = 0 '反転防止

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel
        Dim wdth As Integer = CMB_selectPRG.Width
        Dim hght As Integer = TB.Height
        If CMB_selectPRG.Height > hght Then
            hght = CMB_selectPRG.Height
        End If

        '160316 start 各コントロールにコメント付与機能追加
        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 1

        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        TLP.Controls.Add(CMB_selectPRG, 0, 0)

        'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
        FlowLayoutPanel1.Controls.Add(TLP)

        'T_cntrlのDISPFLGが0の場合、非表示にする
        If dispFlg = "0" Then
            TLP.Visible = False
        Else
            TLP.Visible = True
        End If

    End Sub

    'add系
    Private Sub makeCntrlAdd(ByVal btnName As String, ByVal cmnt_B As String, ByVal cmnt_R As String)

        'グループ数セット
        Dim dv = New DataView(DSprg.Tables("T_add" & dispPrgNo))
        dv.Sort = "GRP asc"
        AddGroups = dv.ToTable("GRP", True)

        'ボタンコントロールの生成
        BTN_add = New Button
        makeButtonAdd(BTN_add, btnName, TB.Height)
        addprgNo = dispPrgNo
        addflg = 1

        'テーブルレイアウトパネルの生成
        TLP = New TableLayoutPanel
        Dim wdth As Integer = BTN_add.Width
        Dim hght As Integer = BTN_add.Height

        '160316 start 各コントロールにコメント付与機能追加
        Dim macroName As String = "add_cmnt_R"

        Dim rowCnt As Integer = 1
        Dim columnCnt As Integer = 1

        makeCmntLabel(macroName, cmnt_B, cmnt_R, rowCnt, columnCnt, wdth)
        makeTLP(TLP, macroName, hght, wdth, columnCnt, rowCnt, cmnt_B, cmnt_R)
        'makeTLP(TLP, macroName, hght, wdth, columnCnt)
        '160316 end

        'テーブルレイアウトパネルの１列目にオブジェクト配置
        TLP.Controls.Add(BTN_add, 0, 0)

        'フローレイアウトパネルに作成したテーブルレイアウトパネルをセット
        FlowLayoutPanel1.Controls.Add(TLP)

    End Sub

    '●各コントロールの作成
    'テキストボックス作成(テキストボックスの幅デフォルト設定）
    Private Sub makeTextBox(ByVal T As TextBox, ByVal macroName As String, ByVal value As String)
        T.Name = "TB" & macroName
        T.Text = value
        T.Font = New System.Drawing.Font("MS UI Gothic", TxtStrSize, FontStyle.Bold, GraphicsUnit.Point, TxtStrSize)
        If value.Length >= TxtMaxInputNum Then
            Dim formatStr As String = makeFormatStr(value)
            T.MaxLength = formatStr.Length
            T.Width = TextRenderer.MeasureText(New String("0", LenB(value)), T.Font).Width '半角のサイズ×最大文字数でwidth設定
        Else
            T.MaxLength = TxtMaxInputNum
            T.Width = TextRenderer.MeasureText(New String("0", T.MaxLength), T.Font).Width '半角のサイズ×最大文字数でwidth設定
        End If
        T.Height = TextRenderer.MeasureText(New String("0", 1), T.Font).Height '半角数字のサイズでheight設定
        T.TextAlign = HorizontalAlignment.Right
    End Sub
    'テキストボックス作成(テキストボックスの幅指定）
    Private Sub makeTextBox(ByVal T As TextBox, ByVal macroName As String, ByVal value As String, ByVal StrNum As Integer)
        T.Name = "TB" & macroName
        T.Text = value
        T.Font = New System.Drawing.Font("MS UI Gothic", TxtStrSize, FontStyle.Bold, GraphicsUnit.Point, TxtStrSize)
        T.MaxLength = StrNum
        T.Width = TextRenderer.MeasureText(New String("0", T.MaxLength), T.Font).Width '半角のサイズ×最大文字数でwidth設定
        T.Height = TextRenderer.MeasureText(New String("0", 1), T.Font).Height '半角数字のサイズでheight設定
        T.TextAlign = HorizontalAlignment.Right
    End Sub
    'ラベル作成
    Private Sub makeLabel(ByVal L As Label, ByVal macroName As String, ByVal labelTxt As String, ByVal hght As Integer)
        L.Name = "LBL" & macroName
        L.Text = labelTxt
        L.Font = New System.Drawing.Font("MS UI Gothic", LblStrSize, FontStyle.Bold, GraphicsUnit.Point, LblStrSize)
        L.TextAlign = ContentAlignment.MiddleCenter
        L.Width = TextRenderer.MeasureText(New String("0", LenB(L.Text)), L.Font).Width '半角のサイズ×文字数でwidth設定
        L.Height = hght
    End Sub
    'ラベル作成(preset用)
    Private Sub makeLabelPRESET(ByVal L As Label, ByVal presetDefine As String, ByVal labelTxt As String, ByVal hght As Integer)
        L.Name = "LBL_PRESET" & presetDefine
        L.Text = labelTxt
        L.Font = New System.Drawing.Font("MS UI Gothic", LblStrSize, FontStyle.Bold, GraphicsUnit.Point, LblStrSize)
        L.TextAlign = ContentAlignment.MiddleCenter
        L.Width = TextRenderer.MeasureText(New String("0", LenB(L.Text)), L.Font).Width '半角のサイズ×文字数でwidth設定
        L.Height = hght
    End Sub
    'ラベル作成(measure用)
    Private Sub makeLabelMeasure(ByVal L As Label, ByVal Lname As String, ByVal Lvalue As String, ByVal hght As Integer)
        L.Name = "LBL" & Lname
        L.Text = Lvalue
        L.Font = New System.Drawing.Font("MS UI Gothic", LblStrSize, FontStyle.Bold, GraphicsUnit.Point, LblStrSize)
        L.TextAlign = ContentAlignment.MiddleCenter
        L.Width = TextRenderer.MeasureText(New String("0", LenB(L.Text)), L.Font).Width '半角のサイズ×文字数でwidth設定
        L.Height = hght
    End Sub
    'コンボボックス作成
    Private Sub makeCMBBox(ByVal C As ComboBox, ByVal macroName As String, ByVal maxlenStr As String, ByVal hght As Integer)
        C.Name = "CMB" & macroName
        C.Font = New System.Drawing.Font("MS UI Gothic", TxtStrSize, FontStyle.Bold, GraphicsUnit.Point, TxtStrSize)
        C.Width = TextRenderer.MeasureText(New String("0", LenB(maxlenStr)), C.Font).Width '半角のサイズ×文字数でwidth設定
        C.Height = hght
    End Sub
    'ボタンinput作成
    Private Sub makeButtonInput(ByVal B As Button, ByVal macroName As String, ByVal btnName As String, ByVal hght As Integer)
        B.Name = "BTN_input" & macroName
        B.Text = btnName
        B.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        B.TextAlign = ContentAlignment.MiddleCenter
        B.Width = TextRenderer.MeasureText(New String("0", LenB(B.Text) + 1), B.Font).Width '半角のサイズ×（文字数+1）でwidth設定
        B.Height = hght
        AddHandler BTN_input.Click, AddressOf btn_input_Click
    End Sub
    'ボタンswitch作成
    Private Sub makeButtonSwitch(ByVal B As Button, ByVal macroName As String, ByVal btnName As String, ByVal hght As Integer, ByVal maxlenStr As String)
        B.Name = "BTN_switch" & macroName
        B.Text = btnName
        B.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        B.TextAlign = ContentAlignment.MiddleCenter
        B.Width = TextRenderer.MeasureText(New String("0", LenB(maxlenStr)), B.Font).Width '半角のサイズ×（文字数+1）でwidth設定
        B.Height = hght
        AddHandler BTN_switch.Click, AddressOf Btn_switch_click
    End Sub
    'ボタン+作成
    Private Sub makeButtonPlus(ByVal B As Button, ByVal macroName As String, ByVal btnName As String, ByVal hght As Integer)
        B.Name = "BTN_pls" & macroName
        B.Text = btnName
        B.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        B.TextAlign = ContentAlignment.MiddleCenter
        B.Width = TextRenderer.MeasureText(New String("0", LenB(B.Text)), B.Font).Width '半角のサイズ×（文字数+1）でwidth設定
        B.Height = hght
        AddHandler BTN_pls.Click, AddressOf BTN_pls_Click
    End Sub
    'ボタン-作成
    Private Sub makeButtonMinus(ByVal B As Button, ByVal macroName As String, ByVal btnName As String, ByVal hght As Integer)
        B.Name = "BTN_mns" & macroName
        B.Text = btnName
        B.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        B.TextAlign = ContentAlignment.MiddleCenter
        B.Width = TextRenderer.MeasureText(New String("0", LenB(B.Text)), B.Font).Width '半角のサイズ×（文字数+1）でwidth設定
        B.Height = hght
        AddHandler BTN_mns.Click, AddressOf BTN_mns_Click
    End Sub
    'ボタンchangePRG作成
    Private Sub makeButtonChangePRG(ByVal B As Button, ByVal prgName As String, ByVal btnName As String, ByVal hght As Integer)
        B.Name = "BTN_changePRG_" & prgName
        B.Text = btnName
        B.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        B.TextAlign = ContentAlignment.MiddleCenter
        B.Width = TextRenderer.MeasureText(New String("0", LenB(B.Text)), B.Font).Width '半角のサイズ×（文字数+1）でwidth設定
        B.Height = hght
        AddHandler BTN_changePRG.Click, AddressOf BTN_changePRG_Click
    End Sub
    'ボタンcopy作成
    Private Sub makeButtonAdd(ByVal B As Button, ByVal btnName As String, ByVal hght As Integer)

        B.Name = "BTN_add"
        B.Text = btnName
        B.BackColor = Color.Blue
        B.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        B.TextAlign = ContentAlignment.MiddleCenter
        B.Width = TextRenderer.MeasureText(New String("0", LenB(B.Text)), B.Font).Width '半角のサイズ×（文字数+1）でwidth設定
        B.Height = hght
        AddHandler BTN_add.Click, AddressOf BTN_add_Click
    End Sub
    'テーブルレイアウトパネル作成
    Private Sub makeTLP(ByVal TLP As TableLayoutPanel, ByVal macroName As String, ByVal hght As Integer, ByVal wdth As Integer, ByVal columnCnt As Integer, ByVal rowCnt As Integer, ByVal cmnt_B As String, ByVal cmnt_R As String)
        TLP.Name = "TLP" & macroName
        TLP.RowCount = rowCnt
        TLP.ColumnCount = columnCnt
        Dim hght1 As Integer = hght * 1.15 'テーブルレイアウトパネルの1行分の高さ = TBの高さ×1.15倍
        TLP.Height = hght1 * rowCnt '行分の高さ確保
        TLP.Width = wdth + columnCnt * 10 '全コントロールの幅+列の数×10の幅を確保
        If TxtBorderStyle = 1 Then
            TLP.CellBorderStyle = TableLayoutPanelCellBorderStyle.Single
        End If

        'TLPの3列目にオブジェクト配置
        If cmnt_R <> "" Then
            TLP.Controls.Add(LBL_cmnt_R, columnCnt - 1, 0)
        End If

        'TLPの2行目へ、オブジェクト配置
        If cmnt_B <> "" Then
            Dim tmpPanel As Panel = New Panel 'TLPの罫線（けいせん）を隠すためにパネルを使用
            Dim tmpRatio As Single = 0.93 'パネルの幅と高さへ係数設定（外枠消えるの防止）
            tmpPanel.Width = TLP.Width * tmpRatio
            tmpPanel.Height = hght1 * tmpRatio
            tmpPanel.Controls.Add(LBL_cmnt_B) 'パネル上にラベル（下用）を配置
            tmpPanel.Margin = New Padding(0) 'パネルのマージンを0へ設定
            LBL_cmnt_B.AutoSize = False 'ラベルのTextAlignを設定するために、AutoSizeをFalseへ設定
            LBL_cmnt_B.TextAlign = ContentAlignment.TopLeft
            TLP.Controls.Add(tmpPanel, 0, 1) 'ラベルを配置したパネルをTLPへセット
            Dim c As Control = TLP.GetControlFromPosition(0, 1)
            TLP.SetColumnSpan(c, columnCnt) '2行目は全てのセルを結合する
        End If

    End Sub


    'ピクチャー作成
    Public Sub maketPctrBx(ByVal P As PictureBox)
        P.Name = "PictureBox1"
        P.Width = PctrWidth
        P.Height = PctrHeight
        If pctrBorderStype = 1 Then
            P.BorderStyle = BorderStyle.FixedSingle
        End If
    End Sub

    '●iniファイル情報を読み込んで設定
    Private Sub setIni()

        Try
            'iniファイルの設定情報読み込み
            For Each rw As DataRow In DSbase.Tables("T_ini").Rows
                Dim define As String = rw.Item("DEFINE")
                Dim value As String = rw.Item("VALUE")

                If define = "Btn_ChngPrm_text" Then
                    If value.Contains("?") = False And value <> "" Then
                        Btn_chngprgrm.Text = value '文字化けしている場合はデフォルト値使用
                    End If
                ElseIf define = "Btn_keyboard_text" Then
                    If value.Contains("?") = False And value <> "" Then
                        Btn_Keyboard.Text = value '文字化けしている場合や未設定時はデフォルト値使用
                    End If
                ElseIf define = "Btn_send_text" Then
                    If value.Contains("?") = False And value <> "" Then
                        Btn_send.Text = value '文字化けしている場合や未設定時はデフォルト値使用
                    End If
                ElseIf define = "Btn_chgOperator_text" Then
                    If value.Contains("?") = False And value <> "" Then
                        Btn_chgOperator.Text = value '文字化けしている場合や未設定時はデフォルト値使用
                    End If
                ElseIf define = "Btn_add_text" Then
                    If value.Contains("?") = False And value <> "" Then
                        Btn_add_text = value '文字化けしている場合や未設定時はデフォルト値使用
                    End If
                ElseIf define = "DrawingFlg" Then
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If tmpValue = 1 Then
                            PctrFlg = 1
                        Else
                            PctrFlg = 0
                        End If
                    Else
                        PctrFlg = 0
                    End If

                ElseIf define = "DrawingBorderStype" Then
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If tmpValue = 1 Then
                            pctrBorderStype = 1
                        Else
                            pctrBorderStype = 0
                        End If
                    Else
                        pctrBorderStype = 0
                    End If
                ElseIf define = "DrawingWidth" Then
                    If IsNumeric(value) Then
                        PctrWidth = value
                    Else
                        PctrWidth = 480
                    End If

                ElseIf define = "DrawingHeight" Then
                    If IsNumeric(value) Then
                        PctrHeight = value
                    Else
                        PctrHeight = 430
                    End If

                ElseIf define = "TxtBorderStyle" Then
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If tmpValue = 1 Then
                            TxtBorderStyle = 1
                        Else
                            TxtBorderStyle = 0
                        End If
                    Else
                        TxtBorderStyle = 0
                    End If

                ElseIf define = "TB_modelTextStringSize" Then
                    If IsNumeric(value) Then
                        TB_modelTxtStrSize = value
                    Else
                        TB_modelTxtStrSize = 26
                    End If

                ElseIf define = "TextStringSize" Then
                    If IsNumeric(value) Then
                        TxtStrSize = value
                    Else
                        TxtStrSize = 30
                    End If

                ElseIf define = "LabelStringSize" Then
                    If IsNumeric(value) Then
                        LblStrSize = value
                    Else
                        LblStrSize = 16
                    End If

                ElseIf define = "ButtnStringSize" Then
                    If IsNumeric(value) Then
                        BtnStrSize = value
                    Else
                        BtnStrSize = 16
                    End If

                ElseIf define = "onofftxt" Then
                    If value <> "" Then
                        ONOFF_txt = value
                    Else
                        ONOFF_txt = "C:\macro\onoff.txt"
                    End If

                ElseIf rw.Item("DEFINE") = "macrotxt" Then
                    If value <> "" Then
                        MACRO_txt = value
                    Else
                        MACRO_txt = "C:\macro\macro.txt"
                    End If
                ElseIf rw.Item("DEFINE") = "MachineID" Then
                    If value <> "" Then
                        MachineID = value
                    Else
                        MachineID = ""
                    End If

                ElseIf define = "WaitTime_AfterSend" Then
                    If IsNumeric(value) Then
                        WaitTime_AfterSend = value
                    Else
                        WaitTime_AfterSend = 3
                    End If

                ElseIf define = "WaitTime_TB_Focus" Then
                    If IsNumeric(value) Then
                        WaitTime_TB_Focus = value
                    Else
                        WaitTime_TB_Focus = 5
                    End If

                ElseIf define = "TB_alart_text_machineON" Then
                    If value.Contains("?") = False And value <> "" Then
                        TB_alart_text_machineON = value '文字化けしている場合や未設定時はデフォルト値使用
                    Else
                        TB_alart_text_machineON = "在加工过程中 不能操作"
                    End If
                ElseIf define = "TB_alart_text_send" Then
                    If value.Contains("?") = False And value <> "" Then
                        TB_alart_text_send = value '文字化けしている場合や未設定時はデフォルト値使用
                    Else
                        TB_alart_text_send = "数据转送后，5秒钟内不能变更"
                    End If
                ElseIf define = "TextMaxInputNum" Then
                    If IsNumeric(value) Then
                        TxtMaxInputNum = value
                    Else
                        TxtMaxInputNum = 4
                    End If

                ElseIf define = "BarCodeHeaderStrNum" Then
                    If IsNumeric(value) Then
                        BarCodeHeaderStrNum = value
                    Else
                        BarCodeHeaderStrNum = 11
                    End If

                ElseIf define = "POReadFlg" Then
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If tmpValue = 1 Then
                            POReadFlg = 1
                        Else
                            POReadFlg = 0
                        End If
                    Else
                        POReadFlg = 0
                    End If
                ElseIf define = "POAddress" Then
                    PO_address = value
                ElseIf define = "MeasureValueLength" Then
                    If IsNumeric(value) Then
                        MeasureValueLength = value
                    Else
                        MeasureValueLength = -1
                    End If

                ElseIf define = "MeasureTextColor" Then
                    If value <> "" Then
                        MeasureTextColor = value
                    Else
                        MeasureTextColor = "blue"
                    End If

                ElseIf define = "AutoSendFlg" Then
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If tmpValue = 1 Then
                            AutoSendFlg = 1
                        Else
                            AutoSendFlg = 0
                        End If
                    Else
                        AutoSendFlg = 0
                    End If
                ElseIf define = "POInfoRecordFlg" Then
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If tmpValue = 1 Then
                            POInfoRecordFlg = 1
                        Else
                            POInfoRecordFlg = 0
                        End If
                    Else
                        POInfoRecordFlg = 0
                    End If
                ElseIf define = "WorkInfoRecordFlg" Then
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If tmpValue = 1 Then
                            WorkInfoRecordFlg = 1
                        Else
                            WorkInfoRecordFlg = 0
                        End If
                    Else
                        WorkInfoRecordFlg = 0
                    End If
                ElseIf rw.Item("DEFINE") = "PRO_STATUS_CD" Then
                    If value <> "" Then
                        PRO_STATUSCD = value
                    Else
                        PRO_STATUSCD = ""
                    End If

                ElseIf rw.Item("DEFINE") = "PRO_S_STATUS_CD" Then
                    If value <> "" Then
                        PRO_S_STATUSCD = value
                    Else
                        PRO_S_STATUSCD = ""
                    End If
                ElseIf rw.Item("DEFINE") = "SendFileFormat" Then
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If tmpValue = 2 Then
                            SendFileFormat = 2
                        ElseIf tmpValue = 3 Then '150928 hishiki Brother機能追加
                            SendFileFormat = 3
                        Else
                            SendFileFormat = 1
                        End If
                    Else
                        SendFileFormat = 1 'デフォルト1（Funucにしておく）
                    End If
                ElseIf rw.Item("DEFINE") = "ScreenSizeRatio" Then '150901 hishiki 南通日報システム要求対応
                    If IsNumeric(value) Then
                        Dim tmpValue As Integer = Integer.Parse(value)
                        If 0 < tmpValue And tmpValue < 100 Then
                            ScreenSizeRatio = value '0から100までの指定ならその値採用
                        Else
                            ScreenSizeRatio = 100 '0未満、100以上の指定の場合強制的に100に設定
                        End If
                    Else
                        ScreenSizeRatio = 100 '値が数字ではない場合、強制的に100に指定
                    End If

                ElseIf rw.Item("DEFINE") = "commandtxt" Then
                    If value <> "" Then
                        COMMAND_txt = value
                    Else
                        COMMAND_txt = "C:\macro\command.txt"
                    End If

                ElseIf define = "TopMacro" Then '150928 hishiki Brother機能追加
                    If IsNumeric(value) Then
                        TopMacro = value
                    Else
                        TopMacro = 500 'デフォルト500にしておく
                    End If

                ElseIf define = "EndMacro" Then '150928 hishiki Brother機能追加
                    If IsNumeric(value) Then
                        EndMacro = value
                    Else
                        EndMacro = 500 'デフォルト500にしておく
                    End If

                ElseIf define = "SmacroBrother" Then '151012 hishiki Brother機能追加
                    If value <> "" Then
                        SmacroBrother = value
                    Else
                        SmacroBrother = "C:\SBrotherNcSys\SBrotherNcSys.exe"

                    End If
                    '160805 hishiki 小数点以下桁数をini.csvで可変にできるように修正
                ElseIf define = "DecimalPlace" Then
                    If IsNumeric(value) Then
                        If value >= 0 Then
                            DecimalPlace = value
                        End If
                    Else
                        DecimalPlace = 4 'デフォルト4にしておく
                    End If
                    '160805 hishiki input系の整数部の桁数をini.csvで可変にできるように修正
                ElseIf define = "NumberOfDigit" Then
                    If IsNumeric(value) Then
                        If value > 0 Then
                            NumberOfDigit = value
                        End If
                    Else
                        NumberOfDigit = 5 'デフォルト5にしておく
                    End If
                End If

            Next

        Catch ex As Exception
            Logger.Warn("err3")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)
        End Try

    End Sub

    '●prgファイル情報を読み込んで設定
    Private Sub setPRG()

        Try
            '使用するプログラム（prg*）の数を取得
            prgNum = DSbase.Tables("T_prg").Rows.Count
            If prgNum <= 1 Then
                ChngPrgflg = 0
            ElseIf prgNum > 1 Then 'プログラム数が2つ以上の場合、フラグオン
                ChngPrgflg = 1
            End If

            TB_PrgMaxInputNum = 0
            TB_PrgMaxInputStr = ""
            For Each rw As DataRow In DSbase.Tables("T_prg").Rows
                If rw.Item("PRGTEXT").ToString.Length > TB_PrgMaxInputNum Then
                    TB_PrgMaxInputNum = rw.Item("PRGTEXT").ToString.Length
                    TB_PrgMaxInputStr = rw.Item("PRGTEXT").ToString
                End If
            Next

        Catch ex As Exception
            Logger.Warn("err4")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)
        End Try

    End Sub

    '●イベント系
    'TextMeasureの値変更時イベント
    Private Sub txtMeasure_change(ByVal sender As Object, ByVal e As System.EventArgs)
        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        Dim SenderTBName As String = sender.Name
        '対象TB(sender)検索
        Dim c0 As Control() = FlowLayoutPanel1.Controls.Find(SenderTBName, True)
        If c0.Length <> 1 Then Exit Sub

        '条件を検索して、該当する結果を取得
        'センダーのテキストボックス名は 「TB + マクロ名」 + 「M」 (例)マクロ名が#502の場合TB#502M

        If measureDefine = "" Then Exit Sub 'measureDefineに値がセットされていない場合、処理を抜ける

        Dim dispValue As String
        If IsNumeric(measureDefine) Then 'measureDefineが数字の場合、その値を表示
            dispValue = measureDefine
        ElseIf measureDefine.IndexOf("#") = 0 Then
            dispValue = measureDefine
        Else 'measureDefineが数字以外の場合、定義をT_relationから検索して、検索結果を表示
            dispValue = searchT_relation(measureDefine, 0)
        End If

        '表示値がTBの値の場合、指定されたTBを検索し、その値をdispValueへセット
        If dispValue.IndexOf("#") = 0 And dispValue <> "" Then
            Dim c2 As Control() = FlowLayoutPanel1.Controls.Find("TB" & dispValue, True)
            If c2.Length <> 1 Then
                dispValue = ""
            Else
                dispValue = c2(0).Text
            End If

        End If

        '160808 hishiki start
        If IsNumeric(dispValue) Then
            Dim formatStr As String = makeFormatStr(dispValue)
            dispValue = Format(Decimal.Parse(dispValue), formatStr)
        End If
        '160808 hishiki end            

        '送信用TB(値変換先)検索し、得られた結果をセット
        Dim TargetTBName As String = SenderTBName.Replace("M", "") '「M」を削除
        Dim c1 As Control() = FlowLayoutPanel1.Controls.Find(TargetTBName, True)
        If c1.Length <> 1 Then Exit Sub
        c1(0).Text = dispValue

        '151103 hishiki  measure系のテキストボックス及びテーブルレイアウトパネルの幅を再設定　start
        '対象コントロールを検索()
        Dim tlpName As String = TargetTBName.Replace("TB", "TLP")
        Dim c3 As Control() = FlowLayoutPanel1.Controls.Find(tlpName, True)
        If c3.Length = 1 Then
            Dim macroTLP As TableLayoutPanel = c3(0)

            '測定値入力用TBの幅変更
            Dim defaultWidth1 As Integer = TextRenderer.MeasureText(New String("0", TxtMaxInputNum), c0(0).Font).Width '半角数字のサイズ×最大文字数でwidth設定
            Dim wdt1 As Integer = TextRenderer.MeasureText(New String("0", LenB(c0(0).Text) - 1), c0(0).Font).Width '半角のサイズ×最大文字数でwidth設定
            If wdt1 > defaultWidth1 Then
                c0(0).Width = wdt1
            Else
                c0(0).Width = defaultWidth1
            End If

            '送信用TBの幅変更
            Dim defaultWidth2 As Integer = TextRenderer.MeasureText(New String("0", TxtMaxInputNum), c1(0).Font).Width '半角数字のサイズ×最大文字数でwidth設定
            Dim wdt2 As Integer = TextRenderer.MeasureText(New String("0", LenB(c1(0).Text) - 1), c1(0).Font).Width '半角のサイズ×最大文字数でwidth設定
            If wdt2 > defaultWidth2 Then
                c1(0).Width = wdt2
            Else
                c1(0).Width = defaultWidth2
            End If

            Dim totalWdt As Object = 0
            'テーブルレイアウトパネル内のコントロールの幅合計算出
            For Each c As Control In macroTLP.Controls
                '160316 hishiki start tlpの2列目のコントロールを足し算対象外へ
                'totalWdt = totalWdt + c.Width
                If TLP.GetPositionFromControl(c).Row.ToString = "0" Then
                    totalWdt = totalWdt + c.Width
                End If
                '160316 hishiki end
            Next

            'テーブルレイアウトパネルの幅を再設定
            Dim clmnCnt As Integer = macroTLP.ColumnCount
            macroTLP.Width = totalWdt + clmnCnt * 10

        End If
        '151103 hishiki measure系のテキストボックス及びテーブルレイアウトパネルの幅を再設定　end


    End Sub

    'Textの値変更時イベント
    Private Sub txt_change(ByVal sender As Object, ByVal e As System.EventArgs)
        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        Dim macroName As String = sender.Name
        '対象TB(sender)検索
        Dim c0 As Control() = FlowLayoutPanel1.Controls.Find(macroName, True)
        If c0.Length <> 1 Then Exit Sub

        macroName = macroName.Replace("TB", "")

        'relation系コントロールが存在する場合、値を設定
        If relationTable.Rows.Count <> 0 Then
            setValueToRelationCntrl() 'リレーション系コントロールに値を設定
        End If
        chkTxtIsNumeric() 'テキストボックスの値が数字か確認。数字ではない場合、背景を赤に変更


        Dim rws As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO=" & "'" & macroName & "'" & "")

        '160127 hishiki start
        'If rws.Length <> 1 Then Exit Sub
        If rws.Length <> 1 Then
            If DispGrpNo > 0 Then 'addモードの場合、add.csvの中から対象マクロを探す。
                Dim rws_add As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("DEFINE=" & "'" & macroName & "'" & "")
                Dim copymacroName As String = rws_add(0).Item("COPY")
                rws = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO=" & "'" & copymacroName & "'" & "")
            Else
                Exit Sub
            End If
        End If

        '160127 hishiki end

        Dim AutosendFlg_cntrl As String = rws(0).Item("AUTOSENDFLG")


        'AutsendFlgオンかつ、対照テキストのAutSendFlgがオンの場合、テキストの値が変化する毎にマクロの値を転送
        If AutoSendFlg = 1 And AutosendFlg_cntrl = "1" And MachineOnFlg_now = 0 Then

            Dim chk As Integer = chkTextBox() 'テキストボックスの値が設定されておりエラーが無い場合、送信ボタン押下と同じ処理実行
            If chk = 1 Then
                performClickFlg = 1 '160127 hishiki
                Btn_send.PerformClick()
            End If

        End If

    End Sub
    '表示プログラム切替用コンボボックスイベント
    Private Sub cmb_selectPRG_DropDownClosed(ByVal sender As Object, ByVal e As System.EventArgs)
        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        'センダーから選択値を取得
        Dim targetPRG = sender.SelectedValue.ToString() '選択項目に対応する値をテキストボックスへ入力

        '現在と同じプログラムを選択した場合、何もせず処理を抜ける
        If targetPRG = dispPrgName Then Exit Sub

        '次表示プログラムの情報を取得
        Dim rw As DataRow() = prgTable.Select("PRGNAME=" & "'" & targetPRG & "'" & "")
        If rw.Length <> 1 Then Exit Sub

        Dim targetPRGNO As Integer = rw(0).Item("DISPPRGNO")
        Try
            dispTargetPRG(targetPRGNO)
        Catch ex As Exception
            Logger.Warn("err11")
        End Try

    End Sub

    'comboBoxの値変更時イベント
    Private Sub cmb_change(ByVal sender As Object, ByVal e As System.EventArgs)

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        'マクロ　（例）#502
        Dim macroName As String = sender.Name.Replace("CMB", "")

        '対象コンボボックス検索
        Dim c As Control() = FlowLayoutPanel1.Controls.Find("CMB" & macroName, True)
        If c.Length <> 1 Then Exit Sub '対象コンボボックスが1つ以外の場合、処理を抜ける
        'コンボボックスが未選択状態の場合、処理を抜ける
        Dim cb As ComboBox = c(0)
        If cb.SelectedIndex = -1 Then Exit Sub

        '対象テキストボックス検索
        c = FlowLayoutPanel1.Controls.Find("TB" & macroName, True)
        '対象テキストボックスが1つだけ見つかった場合以外、処理を抜ける
        If c.Length <> 1 Then Exit Sub
        Dim t As TextBox = c(0)
        t.Text = cb.SelectedValue.ToString() '選択項目に対応する値をテキストボックスへ入力
        Me.ActiveControl = Nothing '反転防止

        TB_Barcode.Focus()

    End Sub
    'inputボタンクリック時のイベント（計算機フォーム呼び出し）
    Private Sub btn_input_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        'info画面表示時は、対象画面表示しない
        If Frm_Info.Visible Then
            Frm_Info.Focus()
            Exit Sub
        End If

        Dim b As Button = sender
        Dim macroName As String 'マクロ　（例）#502

        Try
            'センダーの名前からマクロ名を取得
            macroName = b.Name.Replace("BTN_input", "")

            '対象TableLayoutPanelを検索し、その中から対象Label及び対象TextBoxを取得する
            '（Frm_calcから対象Label及び対象TextBoxを操作する）
            Dim c As Control()
            c = FlowLayoutPanel1.Controls.Find("TLP" & macroName, True)
            If c.Length <> 1 Then Exit Sub
            targetTLP = c(0)
            For Each cc As Control In c(0).Controls
                If cc.GetType.ToString.Contains("Label") Then
                    targetLBL = cc '対象Label設定 Frm_calcで使用
                ElseIf cc.GetType.ToString.Contains("TextBox") Then
                    targetTB = cc '対象TextBox設定
                End If
            Next

            'すでに計算機フォームが表示されている場合、一旦閉じる
            If Frm_Calc.Visible = True Then
                Frm_Calc.Close()
            End If
            'その他のフォームも表示されていたら閉じる。
            If Frm_Input.Visible = True Then
                Frm_Input.Close()
            End If
            If Frm_KeyBoard.Visible = True Then
                Frm_KeyBoard.Close()
            End If

            '計算機フォーム表示
            Frm_Calc.Show()
            '計算機フォームがメインフォームの後ろに隠れないようにする
            Me.AddOwnedForm(Frm_Calc)

        Catch ex As Exception
            Logger.Warn("err5")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)
        End Try

    End Sub
    'switchボタンクリック時のイベント
    Private Sub Btn_switch_click(ByVal sender As Object, ByVal e As System.EventArgs)

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        Dim b As Button = sender
        Dim macroName As String 'マクロ　（例）#502

        Try
            'センダーの名前からマクロ名を取得
            macroName = b.Name.Replace("BTN_switch", "")

            '対象TextBox検索
            Dim c As Control()
            c = FlowLayoutPanel1.Controls.Find("TB" & macroName, True)
            If c.Length <> 1 Then Exit Sub

            '対象TextBoxの現在の表示値を取得
            Dim macroTB As TextBox = CType(c(0), TextBox)
            Dim TBvalue As String = macroTB.Text

            'switchTableから、NOの最大値を取得
            Dim bufrow_Max As DataRow() = DSswitch.Tables(macroName).Select("NO=max(NO)")
            If bufrow_Max.Length = 0 Then Exit Sub '値が得られない場合エラー
            Dim maxNo As Integer = bufrow_Max(0).Item("NO")

            'switchTableから、現在のNOを取得
            Dim bufrow_now As DataRow() = DSswitch.Tables(macroName).Select("SENDVALUE=" & "'" & TBvalue & "'" & "")
            If bufrow_now.Length = 0 Then Exit Sub '値が得られない場合エラー
            Dim nowNo As Integer = bufrow_now(0).Item("NO")

            '次回表示するNoを決定
            Dim nextNo As Integer
            If nowNo + 1 <= maxNo Then
                nextNo = nowNo + 1
            Else
                nextNo = 1
            End If

            '対象行を取得
            Dim bufrow_next As DataRow() = DSswitch.Tables(macroName).Select("NO=" & "'" & nextNo & "'" & "")
            If bufrow_next.Length = 0 Then Exit Sub '値が得られない場合エラー

            '対象行から値を取得し、対象テキストボックスへ反映
            macroTB.Text = bufrow_next(0).Item("SENDVALUE")
            b.Text = bufrow_next(0).Item("DISPVALUE")

        Catch ex As Exception
            Logger.Warn("err6")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)
        End Try

    End Sub
    'プラスボタンクリック時のイベント
    Private Sub BTN_pls_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        Dim b As Button = sender
        Dim macroName As String
        'Dim tmpLBL As New Label
        Dim tmpTB As New TextBox

        'センダーの名前からマクロ名を取得
        macroName = b.Name.Replace("BTN_pls", "")

        'フローレイアウトパネル上に配置されたコントロールを検索
        '対象TextBox検索
        Dim c As Control()
        c = FlowLayoutPanel1.Controls.Find("TB" & macroName, True)
        If c.Length <> 1 Then Exit Sub
        tmpTB = c(0)

        '160805 hishiki start 
        Dim rw_correct As DataRow() = DScorrect.Tables(macroName).Select("DEFINE=" & "'" & macroName & "'" & "")
        If rw_correct.Length <> 1 Then Exit Sub

        Dim UPPRVal As Decimal
        Dim TBVal As Decimal
        Dim UPDWNVal As Decimal
        Dim Upperflg As Integer = 1 '上限値設定フラグ1:設定　0:未設定

        '上限値取得（上限がない場合は、flgを0に設定）
        Dim tmpStr As String = rw_correct(0).Item("UPPER")
        If IsNumeric(tmpStr) Then
            UPPRVal = Decimal.Parse(tmpStr)
        Else
            Upperflg = 0
        End If

        'デフォルト値取得
        tmpStr = rw_correct(0).Item("DEFVALUE")
        If IsNumeric(tmpStr) Then
            TBVal = Decimal.Parse(tmpStr)
        Else
            Exit Sub
        End If

        '増減値取得
        tmpStr = rw_correct(0).Item("UPDWN")
        If IsNumeric(tmpStr) Then
            UPDWNVal = Decimal.Parse(tmpStr)
        Else
            Exit Sub
        End If

        Dim rslt As Decimal = TBVal + UPDWNVal

        '上限有無により処理変更
        If Upperflg = 1 Then
            If rslt <= UPPRVal Then '上限を超えない場合、「+」した値を反映
                Dim formatStr As String = makeFormatStr(rslt)
                tmpTB.Text = Format(rslt, formatStr)
                rw_correct(0).Item("DEFVALUE") = rslt 'プラスした後の値を、テーブルのDEFVALUEへ反映
            End If
        Else '上限設定無しの場合+した値を無条件で反映
            tmpTB.Text = rslt
            rw_correct(0).Item("DEFVALUE") = rslt 'プラスした後の値を、テーブルのDEFVALUEへ反映
        End If

        'Dim tmpStr As String
        'Dim addValue As Single
        'Dim Upper As Single
        'Dim TBValue As Single
        'Dim Upperflg As Integer = 1 '上限値設定フラグ1:設定　0:未設定

        'Dim rw_correct As DataRow() = DScorrect.Tables(macroName).Select("DEFINE=" & "'" & macroName & "'" & "")
        'If rw_correct.Length <> 1 Then Exit Sub

        ''上限値を取得
        'tmpStr = rw_correct(0).Item("UPPER")
        'If IsNumeric(tmpStr) Then
        '    Upper = Single.Parse(tmpStr)
        'Else
        '    Upperflg = 0
        'End If

        ''テキストボックスの値を取得
        'tmpStr = tmpTB.Text
        'If IsNumeric(tmpStr) Then
        '    TBValue = Single.Parse(tmpStr)
        'End If

        ''「±」押下時の増減値を取得
        'tmpStr = rw_correct(0).Item("UPDWN")
        'If IsNumeric(tmpStr) Then
        '    addValue = Single.Parse(tmpStr)
        'End If

        ''計算結果取得
        'Dim formatStr As String = makeFormatStr(tmpStr)
        'Dim rslt As Single = TBValue + addValue

        ''上限を超えない場合、「+」した値を反映
        'If Upperflg = 1 Then
        '    If rslt <= Upper Then
        '        tmpTB.Text = Format(rslt, formatStr)
        '    End If
        'Else '上限設定無しの場合+した値を無条件で反映
        '    tmpTB.Text = rslt
        'End If

        '160805 hishiki end

    End Sub
    'マイナスボタンクリック時のイベント
    Private Sub BTN_mns_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        Dim b As Button = sender
        Dim macroName As String

        Dim tmpLBL As New Label
        Dim tmpTB As New TextBox

        'センダーの名前からマクロ名を取得
        macroName = b.Name.Replace("BTN_mns", "")

        'フローレイアウトパネル上に配置されたコントロールを検索
        '対象TextBox検索
        Dim c As Control()
        c = FlowLayoutPanel1.Controls.Find("TB" & macroName, True)
        If c.Length <> 1 Then Exit Sub
        tmpTB = c(0)

        '160805 hishiki start 
        Dim rw_correct As DataRow() = DScorrect.Tables(macroName).Select("DEFINE=" & "'" & macroName & "'" & "")
        If rw_correct.Length <> 1 Then Exit Sub

        Dim LWRVal As Decimal
        Dim TBVal As Decimal
        Dim UPDWNVal As Decimal
        Dim Lowerflg As Integer = 1 '下限値設定フラグ1:設定　0:未設定

        '下限値取得（下限がない場合は、flgを0に設定）
        Dim tmpStr As String = rw_correct(0).Item("LOWER")
        If IsNumeric(tmpStr) Then
            LWRVal = Decimal.Parse(tmpStr)
        Else
            Lowerflg = 0
        End If

        'デフォルト値取得
        tmpStr = rw_correct(0).Item("DEFVALUE")
        If IsNumeric(tmpStr) Then
            TBVal = Decimal.Parse(tmpStr)
        Else
            Exit Sub
        End If

        '増減値取得
        tmpStr = rw_correct(0).Item("UPDWN")
        If IsNumeric(tmpStr) Then
            UPDWNVal = Decimal.Parse(tmpStr)
        Else
            Exit Sub
        End If

        Dim rslt As Decimal = TBVal - UPDWNVal

        '下限有無により処理変更
        If Lowerflg = 1 Then
            If rslt >= LWRVal Then '下限を超えない場合、「-」した値を反映
                Dim formatStr As String = makeFormatStr(rslt)
                tmpTB.Text = Format(rslt, formatStr)
                rw_correct(0).Item("DEFVALUE") = rslt 'マイナスした後の値を、テーブルのDEFVALUEへ反映
            End If
        Else '上限設定無しの場合+した値を無条件で反映
            tmpTB.Text = rslt
            rw_correct(0).Item("DEFVALUE") = rslt 'プラスした後の値を、テーブルのDEFVALUEへ反映
        End If

        'Dim tmpStr As String
        'Dim delValue As Single
        'Dim Lower As Single
        'Dim TBValue As Single
        'Dim Lowerflg As Integer = 1 '下限値設定フラグ1:設定　0:未設定

        ''対応する行を検索（マクロ名をキー）
        'Dim rw_correct As DataRow() = DScorrect.Tables(macroName).Select("DEFINE=" & "'" & macroName & "'" & "")

        'If rw_correct.Length <> 1 Then Exit Sub

        ''下限値を取得
        'tmpStr = rw_correct(0).Item("LOWER")
        'If IsNumeric(tmpStr) Then
        '    Lower = Single.Parse(tmpStr)
        'Else
        '    Lowerflg = 0
        'End If

        ''テキストボックスの値を取得
        'tmpStr = tmpTB.Text
        'If IsNumeric(tmpStr) Then
        '    TBValue = Single.Parse(tmpStr)
        'End If

        ''「±」押下時の増減値を取得
        'tmpStr = rw_correct(0).Item("UPDWN")
        'If IsNumeric(tmpStr) = False Then Exit Sub
        'delValue = Single.Parse(tmpStr)

        ''計算結果取得
        'Dim formatStr As String = makeFormatStr(tmpStr)
        'Dim rslt As Single = TBValue - delValue

        ''下限を超えない場合、「-」した値を反映
        'If Lowerflg = 1 Then
        '    If rslt >= Lower Then
        '        tmpTB.Text = Format(rslt, formatStr)
        '    End If
        'Else '下限設定無しの場合-した値を無条件で反映
        '    tmpTB.Text = rslt
        'End If

        '160805 hishiki end

    End Sub
    'ボタンaddクリック時のイベント
    Private Sub BTN_add_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        Dim b As Button = sender

        'If addflg = 1 Then
        '    setBtnAdd(0)
        'Else
        '    setBtnAdd(1)
        'End If

    End Sub

    'ボタンchangePRGクリック時のイベント
    Private Sub BTN_changePRG_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        'センダーの名前からマクロ名を取得
        Dim macroName As String = sender.name.Replace("BTN_mns", "")
        Dim targetPRG = macroName.Replace("BTN_changePRG_", "")

        '次表示プログラムの情報を取得
        Dim rw As DataRow() = prgTable.Select("PRGNAME=" & "'" & targetPRG & "'" & "")
        If rw.Length <> 1 Then Exit Sub

        Dim targetPRGNO As Integer = rw(0).Item("DISPPRGNO")
        Try
            dispTargetPRG(targetPRGNO)
        Catch ex As Exception
            Logger.Warn("err12")
        End Try


    End Sub

    'プログラム切り替えボタン押下時のイベント
    Private Sub Btn_chngprgrm_Click(sender As System.Object, e As System.EventArgs) Handles Btn_chngprgrm.Click

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        AddNo = 0 'AddNo初期化
        DispGrpNo = 0
        addflg = 0 'addflg初期化

        TB_Barcode.Focus() '本ボタン押下時は、すぐにフォーカスを元に戻す

        If ChngPrgflg <> 1 Then Exit Sub 'フラグがONの場合のみ表示切り替え

        '表示中プログラムの表示順取得
        Dim bufrow0 As DataRow() = prgTable.Select("DISPPRGNO=" & "'" & dispPrgNo & "'" & "") ' 150128 hishiki
        If bufrow0.Length <> 1 Then Exit Sub ' 150128 hishiki
        Dim dispOrder_now As Integer = bufrow0(0).Item("DISPORDER") ' 150128 hishiki

        '表示順の最大値取得
        Dim bufrow1 As DataRow() = prgTable.Select("DISPORDER=max(DISPORDER)")
        If bufrow1.Length = 0 Then Exit Sub '値を得られない場合エラー
        Dim maxNo As Integer = bufrow1(0).Item("DISPORDER")

        '現在表示中プログラムの表示順が最大値かどうか確認
        Dim dispOrder_next As Integer
        If dispOrder_now < maxNo Then '最大ではない場合、次のプログラムを表示
            dispOrder_next = dispOrder_now + 1
        Else '最大値なら、最初のプログラムを表示
            dispOrder_next = 1
        End If

        '次に表示するプログラムのプログラムNO取得
        Dim bufrow2 As DataRow() = prgTable.Select("DISPORDER=" & "'" & dispOrder_next & "'" & "") ' 150128 hishiki
        If bufrow2.Length <> 1 Then Exit Sub ' 150128 hishiki
        Dim targetPrgNo As String = bufrow2(0).Item("DISPPRGNO") ' 150128 hishiki

        Try
            '次に表示するプログラムを表示
            dispTargetPRG(targetPrgNo) ' 150128 hishiki
        Catch ex As Exception
            Logger.Warn("err13")
        End Try


    End Sub

    'SPさん用。作業実績データインサート用関数
    Private Function makeInsertSQL(ByVal rw As DataRow, ByVal opeName As String) As String
        Dim sql As String

        Dim nowdate As String = Now.ToString("yyyy/MM/dd")
        nowdate = "#" & nowdate & "#"

        Dim nowtime As String = Now.ToString("HH:mm:ss")
        nowtime = "#" & nowtime & "#"

        Dim orderDate As Date = rw.Item("ORDER_DATE")

        Dim SECTION_CD As String = rw.Item("SECTION_CD") '部門
        Dim CLIENT_CD As String = rw.Item("CLIENT_CD") '納入先ｺｰﾄﾞ
        Dim ORDER_CD As String = rw.Item("ORDER_CD") '受発注No
        Dim ORDER_DATE As Date = rw.Item("ORDER_DATE") '発注年月日
        Dim PRO_SEQ As Integer = rw.Item("PRO_SEQ") '加工ｼｰｹﾝｽ番号

        Dim PRO_STATUS_CD As String = PRO_STATUSCD 'ｽﾃｰﾀｽｺｰﾄﾞ　10:加工開始　12:追加工開始
        Dim PRO_S_STATUS_CD As String = PRO_S_STATUSCD 'ｻﾌﾞｽﾃｰﾀｽｺｰﾄﾞ 1など（端末毎に設定）
        Dim MAC_CD As String = MachineID '製造機械番号
        Dim PRO_QUA As String = rw.Item("PRO_QUA") '加工数量

        Dim PRO_WK_NAME As String = opeName '作業者

        Dim PRO_DATE As String = nowdate '作業日　yyyy/mm/dd  初期値:NULL
        Dim PRO_TIME As String = nowtime '作業時刻　hh:nn:ss  初期値:NULL
        Dim UPD_FLG As String = "0" '更新ﾌﾗｸﾞ 0:未更新　1:更新済み(DNCから送る場合は0固定）
        Dim VERSION_NO As String = "0" 'ﾊﾞｰｼﾞｮﾝNo 登録時:0

        sql = "INSERT INTO dnc_itf_dat ( " & _
       "SECTION_CD," _
     & "CLIENT_CD," _
     & "ORDER_CD," _
     & "ORDER_DATE," _
     & "PRO_SEQ," _
     & "PRO_STATUS_CD," _
     & "PRO_S_STATUS_CD," _
     & "MAC_CD," _
     & "PRO_QUA," _
     & "PRO_WK_NAME," _
     & "PRO_DATE," _
     & "PRO_TIME," _
     & "UPD_FLG," _
     & "VERSION_NO" _
     & ") " _
     & "VALUES (" _
     & "'" & SECTION_CD & "'," _
     & "'" & CLIENT_CD & "'," _
     & "'" & ORDER_CD & "'," _
     & "'" & ORDER_DATE & "'," _
     & "'" & PRO_SEQ & "'," _
     & "'" & PRO_STATUS_CD & "'," _
     & "'" & PRO_S_STATUS_CD & "'," _
     & "'" & MAC_CD & "'," _
     & "'" & PRO_QUA & "'," _
     & "'" & PRO_WK_NAME & "'," _
     & PRO_DATE & "," _
     & PRO_TIME & "," _
     & "'" & UPD_FLG & "'," _
     & "'" & VERSION_NO & "'" _
     & ");"

        Return sql

    End Function

    Private Function getOperatorName(ByVal opeID As String) As String
        Dim opeName As String
        Try
            Dim sql As String = "SELECT STAFF_NAME FROM staff_mst WHERE " _
            & "staff_mst.STAFF_CD='" & opeID & "';"
            Dim tblname As String = "OPEINFO"
            ExecuteDBtoDataset(PO_address, sql, tblname)

            'データビューへデータセットを格納
            Dim DV As New DataView(DSaccess.Tables(tblname))
            Dim tmptbl As DataTable = DV.ToTable(False)
            opeName = tmptbl.Rows(0).Item("STAFF_NAME")
        Catch ex As Exception
            opeName = ""
        End Try

        Return opeName

    End Function

    'TB_Barcodeに値が入力された時のイベント
    Private Sub TB_Barcode_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles TB_Barcode.KeyDown
        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        If (e.KeyCode = Keys.Enter) Then

            '測定値が入力された場合
            If TB_Barcode.Text.Contains(".") And IsNumeric(TB_Barcode.Text) Then

                '151103 hishiki 測定値の桁数条件削除 Start
                'If TB_Barcode.Text.Length = MeasureValueLength Then

                If TB_measure IsNot Nothing Then
                    setValueToMeasureTB() 'measure用コントロールに測定値を反映
                    'TB_measure.Text = TB_Barcode.Text
                End If

                'End If
                '151103 hishiki 測定値の桁数条件削除 End


                '型式が入力された場合
            Else
                Dim modelName As String
                Dim rw As DataRow
                Dim insertChk As Integer = 0
                Dim sql As String = ""

                'PO読込→型式検索の場合
                If POReadFlg = 1 Then

                    Dim PONum As String = TB_Barcode.Text
                    If PONum = "" Then Exit Sub

                    Try
                        rw = SearchModelDatafrmTbl(PONum)
                        sql = makeInsertSQL(rw, OperatorName)
                        modelName = rw.Item("IN_PROD_NAME")

                        'エラーが発生した場合、modelNameを空白に設定
                    Catch ex As Exception
                        modelName = ""
                        sql = ""
                    End Try

                    'modelNameが取得できなかった場合、コントロール削除しTB_Modelにエラー表示
                    If modelName = "" Then
                        delControls()
                        TB_Model.Text = "PO data Nothing" & " : " & PONum

                        Logger.Info("No Data(PO):" & PONum)

                        'TB_Barcodeの入力文字を削除
                        'RemoveHandler TB_Barcode.TextChanged, AddressOf TB_Barcode_TextChanged
                        TB_Barcode.Text = ""
                        'AddHandler TB_Barcode.TextChanged, AddressOf TB_Barcode_TextChanged

                        Exit Sub

                    End If

                    '160706 hishiki start SP機能修正 WorkInforRecordFlg = 0 の場合は、実績書き込みしない様に修正
                    If WorkInfoRecordFlg = 1 Then
                        'Insert用sqlを作成して、作業実績書き込み実行
                        insertChk = executeNonQuery(PO_address, sql)
                    Else
                        insertChk = 1
                    End If
                    '160706 hishiki end

                Else '型式の場合（ヘッダー付き）

                    TB_Model.BackColor = Color.White
                    If TB_Barcode.Text.Length <= BarCodeHeaderStrNum Then

                        '150909 hishiki 日報システム用のバーコードが入力された場合、スルーする処理へ変更（BarCodeHeaderStrNumがある程度の長さがないと成立しない）
                        'modelName = TB_Barcode.Text
                        modelName = ""

                    Else
                        '150909 hishiki 日報システム用のバーコードが入力された場合、スルーする処理へ変更（BarCodeHeaderStrNumがある程度の長さがないと成立しない）
                        If IsNumeric(TB_Barcode.Text) Then
                            modelName = "" '南通日報システム用のPO12桁の場合（BarCodeHeaderStrNum=11よりも長い）、modelNameを""へ設定
                        Else
                            modelName = TB_Barcode.Text.Substring(BarCodeHeaderStrNum)
                        End If

                    End If
                End If

                '150909 hishiki　modelnameが""の場合、検索しない処理追加
                If modelName <> "" Then
                    SearchTB_Model(modelName) '型式をマスタから検索して画面に表示
                End If


                'insert失敗時は、info画面表示(フォーカスの問題のため、フォーム表示後に画面表示）
                If POReadFlg = 1 And insertChk <> 1 Then

                    Dim str1 As String = "Database Insert Err"
                    Dim str2 As String = ""
                    ShowFrmInfo(str1, str2)
                    Logger.Warn("Database Insert Err")

                End If
            End If

            'TB_Barcodeの入力文字を削除
            'RemoveHandler TB_Barcode.TextChanged, AddressOf TB_Barcode_TextChanged
            TB_Barcode.Text = ""
            'AddHandler TB_Barcode.TextChanged, AddressOf TB_Barcode_TextChanged

        End If
    End Sub

    'TB_Barcodeからフォーカスが外れた時のイベント
    '（タイマーにて経過時間を監視し、経過したらフォーカスを元に戻す）
    Private Sub TB_Barcode_Leave(sender As System.Object, e As System.EventArgs) Handles TB_Barcode.Leave

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        focusOffDate_old = Now 'TB_Barcodeからフォーカスが外れたら秒数カウント開始
    End Sub

    'キーボードボタン押下時のイベント
    Private Sub Btn_Keyboard_Click(sender As System.Object, e As System.EventArgs) Handles Btn_Keyboard.Click

        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

        'info画面表示時は、対象画面表示しない
        If Frm_Info.Visible Then
            Frm_Info.Focus()
            Exit Sub
        End If

        'その他のサブフォームが表示されていたら閉じる。
        If Frm_Calc.Visible = True Then
            Frm_Calc.Close()
        End If
        If Frm_Input.Visible = True Then
            Frm_Input.Close()
        End If
        'キーボードフォームが表示済みなら、フォーカスをあてる
        If Frm_KeyBoard.Visible = True Then
            Frm_KeyBoard.Focus()
        Else
            'Frm_KeyBoard.Show() 'キーボード表示       'mod 2015/08/31 owner指定
            Frm_KeyBoard.Show(Me) 'キーボード表示      'mod 2015/08/31 owner指定
        End If

    End Sub

    ''TB_Barcodeテキストボックスの値が変化したときのイベント（測定値にエンターキーが無い場合を考慮したイベント）
    'Private Sub TB_Barcode_TextChanged(sender As System.Object, e As System.EventArgs) Handles TB_Barcode.TextChanged

    '    If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

    '    '測定値取り出し
    '    If TB_Barcode.Text.Contains(".") And IsNumeric(TB_Barcode.Text) Then 'テキストに「.」が含まれる、かつ、数字だけの場合
    '        '151103 hishiki 桁数条件削除 Start
    '        'If TB_Barcode.Text.Length = MeasureValueLength Then 'テキストの長さが、ini.csvで指定した長さと同じ場合
    '            If TB_measure IsNot Nothing Then
    '                setValueToMeasureTB() 'measure用コントロールに測定値を反映
    '            End If
    '        'End If
    '        '151103 hishiki 桁数条件削除 End
    '    End If

    'End Sub

    'Btn_chgOperator_Clickイベント
    Private Sub Btn_chgOperator_Click(sender As System.Object, e As System.EventArgs) Handles Btn_chgOperator.Click

        'info画面表示時は、対象画面表示しない
        If Frm_Info.Visible Then
            Frm_Info.Focus()
            Exit Sub
        End If

        'その他のサブフォームが表示されていたら閉じる。
        If Frm_Calc.Visible = True Then
            Frm_Calc.Close()
        End If
        If Frm_KeyBoard.Visible = True Then
            Frm_KeyBoard.Close()
        End If

        'Inputフォームが表示済みなら、フォーカスをあてる
        If Frm_Input.Visible Then
            Frm_Input.Focus()
        Else
            Frm_Input.Show()
        End If

    End Sub

    '●onoff.txtの値を「0」に書き換えるメソッド
    Private Sub ChangeOnOffTextToZero()
        'onoff.txtの値を「0」に書き換える
        Try
            Dim write As New System.IO.StreamWriter(ONOFF_txt, False, System.Text.Encoding.Default)
            'Dim write As New System.IO.StreamWriter(ONOFF_txt, False, System.Text.Encoding.GetEncoding("shift_jis"))
            write.WriteLine("0")
            write.Close()
        Catch ex As Exception
            Logger.Warn("err7")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)

        End Try
    End Sub

    '●指定されたプログラムを表示するメソッド
    Private Sub dispTargetPRG(ByVal PRGNo As String)

        '次表示プログラムの情報を取得
        Dim rw As DataRow() = prgTable.Select("DISPPRGNO=" & "'" & PRGNo & "'" & "")
        If rw.Length <> 1 Then Exit Sub

        '***コントロール削除中のちらつき防止開始***
        FlowLayoutPanel1.Visible = False

        If TB_Model.Text <> "" Then

            txtChangeEventFlg = 0 '動的イベントを一時無効

            onoffSwitchflg = 0 '160128 hishiki 表示プログラム変更の度にonoffSwitchflg初期化
            onoffCorrectflg = 0 '160216 hishiki 表示プログラム変更のたびにonoffCorrectflg初期化

            'preset.csvの処理記述 hishiki 150501
            Dim folder As String = rw(0).Item("PRGNAME").ToString
            T_preset = New DataTable("T_preset" & PRGNo)
            If DSprg.Tables.Contains("T_preset" & PRGNo) Then
                DSprg.Tables.Remove("T_preset" & PRGNo) 'データセット内のテーブルを破棄
            End If
            LoadFileToTBL(System.IO.Path.Combine(Path, folder), "preset.csv", DSprg, T_preset) '150501 hishiki
            If fileErrCnt > 0 Or csvErrFlg = 1 Then
                Dim msg As String = ""
                'CSVファイルオープン時とそれ以外でメッセージを分ける
                If csvErrFlg = 1 Then
                    msg = "Close " & csvErrFile & " , and Restart DNC"
                Else
                    msg = "CSV File Error. Check LogFile."
                End If

                MsgBox(msg)
                Me.Close()
                Exit Sub
            End If

            'addflgが1の場合は、現在の画面にコントロールを追加描画
            If addflg = 1 Then

                'T_addのGRPの最大値を取得
                Dim bufrow1 As DataRow() = AddGroups.Select("GRP=max(GRP)")
                If bufrow1.Length = 0 Then Exit Sub '値を得られない場合エラー
                maxAddNo = bufrow1(0).Item("GRP")

                'T_addのGRPの最小値を取得
                Dim bufrow2 As DataRow() = AddGroups.Select("GRP=min(GRP)")
                If bufrow2.Length = 0 Then Exit Sub '値を得られない場合エラー
                minAddNo = bufrow2(0).Item("GRP")

                'addNo初期化
                If AddNo = 0 Then
                    AddNo = minAddNo
                    DispGrpNo = 0
                End If

                'addNoが最大値以下の場合、画面上にコントロールを追加
                If AddNo <= maxAddNo Then
                    AddNo = AddNo + addControls()
                    DispGrpNo = AddNo - 1
                End If

                'AddNoが最大値を超えたらaddflgを0にし、ボタンカラーを赤に変更
                If AddNo > maxAddNo Then
                    setBtnAdd(0)
                    AddNo = 0 'AddNo初期化
                    DispGrpNo = maxAddNo
                End If

                'addflgが0の場合は、画面を一旦クリアにしてコントロール描画
            Else
                dispPrgName = rw(0).Item("PRGNAME")
                TB_Prg.Text = rw(0).Item("PRGTEXT")
                dispPrgNo = PRGNo '表示プログラム設定(addフラグオンの場合は、変更しない)

                delControls() 'flowlayoutpanel上のコントロールを一旦削除

                AddNo = 0
                setControls() 'コントロールを作成

            End If

            chkTxtIsNumeric() 'テキストボックスの値が数字か確認。数字ではない場合、背景を赤に変更
            txtChangeEventFlg = 1 '動的イベントの無効解除

        End If

        'T_loadのDISPFLGが1以外なら、次のプログラムを表示 
        If prgNum > 1 And prgDispFlg <> "1" Then '150909 hishiki prgNumが1の場合は、prgDispFlgが0でも、下記処理を実行しないように修正
            'If prgDispFlg <> "1" Then

            BtnChangePerformClickCnt = BtnChangePerformClickCnt + 1
            'プログラム内のDISPFLGが全て0（1以外）の場合（表示なし）、コントロールを削除して表示。
            If BtnChangePerformClickCnt > prgTable.Rows.Count Then
                delControls()
                Btn_chngprgrm.Visible = False
                TB_Prg.Visible = False
                BtnChangePerformClickCnt = 0
            Else
                Btn_chngprgrm.PerformClick()
            End If
        Else
            BtnChangePerformClickCnt = 0
        End If

        'AutsendFlgオンの場合、テキストの値が変化する毎にマクロの値を転送
        If AutoSendFlg = 1 And MachineOnFlg_now = 0 Then
            Dim chk As Integer = chkTextBox()
            If chk = 1 Then 'テキストボックスの値が設定されておりエラーが無い場合、送信ボタン押下

                '160127 hishiki start
                '最後のadd（の場合はaddflgが0に戻されている）の時には、AutsendFlgが1の場合、performClickを実行
                If addflg = 0 Then
                    performClickFlg = 1
                    Btn_send.PerformClick()
                End If
                'Btn_send.PerformClick()

                '160127 hishiki end
            End If
        End If

        '***コントロール削除中のちらつき防止終了***
        FlowLayoutPanel1.Visible = True

        If Frm_Info.Visible = False Then
            TB_Barcode.Focus() 'TB_Barcodeにフォーカスを戻す
        End If


    End Sub

    'addで定義されたマクロを検索して、削除する関数
    Public Sub delAddControls()

        '対象マクロを検索して、削除
        Dim tmprows0 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & AddNo & "'")
        '***コントロール削除中のちらつき防止開始***
        FlowLayoutPanel1.Visible = False

        For Each rws As DataRow In tmprows0
            Dim delMacro As String = rws.Item("DEFINE")
            Dim c As Control() = FlowLayoutPanel1.Controls.Find("TLP" & delMacro, True)
            If c.Length <> 0 Then
                c(0).Dispose()
            End If
        Next

        delAddContrlFlg = 0 'フラグを元に戻す

        '***コントロール削除中のちらつき防止開始***
        FlowLayoutPanel1.Visible = True

    End Sub

    'CHK対象マクロを確認して、値がCOPYとDEFINEのマクロで同じかどうかチェックする関数
    Private Function chkAddControls() As String

        Dim errMacros As String = ""

        'CHK対象マクロを確認して、値がCOPYとDEFINEのマクロで同じかどうかチェック
        Dim tmprows0 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & AddNo & "' AND " & "CHK='" & 1 & "'")
        For Each rws As DataRow In tmprows0
            Dim defMacro As String = rws.Item("DEFINE")
            Dim c_defMacro As Control() = FlowLayoutPanel1.Controls.Find("TB" & defMacro, True)

            Dim cpyMacro As String = rws.Item("COPY")
            Dim c_cpyMacro As Control() = FlowLayoutPanel1.Controls.Find("TB" & cpyMacro, True)

            If c_defMacro.Length <> 0 And c_cpyMacro.Length <> 0 Then
                If c_defMacro(0).Text <> c_cpyMacro(0).Text Then

                    Dim tmpStr As String = cpyMacro & "=" & c_cpyMacro(0).Text & " " & defMacro & "=" & c_defMacro(0).Text
                    errMacros = errMacros & " " & tmpStr
                End If
            End If
        Next

        Return errMacros
    End Function

    'addボタンの状態を変更する関数
    Private Sub setBtnAdd(ByVal flg As Integer)

        'フローレイアウトパネル上に配置されたコントロールを検索
        Dim c As Control()
        c = FlowLayoutPanel1.Controls.Find("BTN_add", True) '対象ボタン検索
        If c.Length <> 1 Then Exit Sub

        Select Case flg
            Case 1
                addflg = 1
                c(0).BackColor = Color.Blue 'ボタンカラーを青に変更
            Case 0
                addflg = 0
                c(0).BackColor = Color.Pink 'ボタンカラーをピンクに変更
        End Select

    End Sub

    '●フローレイアウトパネル上のテキストボックスコントロールを検索して
    '値が入力されているか
    'エラーがないか
    'を確認。確認結果を返却するメソッド
    Private Function chkTextBox() As Integer
        Dim chk As Integer = 1

        'T_cntrlを基にFlowLayoutPanel1へコントロール配置
        For Each rw As DataRow In DSprg.Tables("T_cntrl" & dispPrgNo).Rows
            Dim sendFlg As String = rw.Item("SENDFLG")
            Dim macroName As String = rw.Item("MACRO")

            If sendFlg = "1" Then
                '対象TextBox検索
                Dim c As Control() = FlowLayoutPanel1.Controls.Find("TB" & macroName, True)
                '対象TextBoxが１つだけ見つかった場合
                If c.Length = 1 Then
                    'エラーの場合
                    If c(0).Text = "" Or c(0).BackColor = Color.Red Then
                        chk = chk * 0
                    Else 'エラーではない場合
                        chk = chk * 1
                    End If

                End If
            End If
        Next

        Return chk

    End Function

    'sql文と、設定するテーブル名を引数にして、データセットを返すメソッド
    Private Sub ExecuteDBtoDataset(ByVal DBad As String, ByVal sql As String, ByVal tableName As String)
        Dim con As New OleDbConnection()
        Dim cmd As New OleDbCommand()
        Dim da As New OleDbDataAdapter()

        Try
            'access2007以降へ接続
            con.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & DBad

            cmd.Connection = con
            cmd.CommandText = sql

            DSaccess = New DataSet

            da.SelectCommand = cmd

            da.Fill(DSaccess, tableName)
            con.Close()

            '接続失敗時の処理
        Catch ex As Exception

        End Try

        ' DB接続を閉じる
        If Not con Is Nothing Then
            con.Close()
        End If

    End Sub

    '結果を返さないsql実行関数
    Private Function executeNonQuery(ByVal DBad As String, ByVal sql As String) As Integer
        Dim con As New OleDbConnection()
        Dim cmd As New OleDbCommand()
        Dim da As New OleDbDataAdapter()
        Dim iRet As Integer = 0

        Try
            con.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & DBad
            con.Open()
            cmd.Connection = con
            cmd.CommandText = sql
            iRet = cmd.ExecuteNonQuery()
            con.Close()

        Catch ex As Exception

        End Try

        ' DB接続を閉じる
        If Not con Is Nothing Then
            con.Close()
        End If

        Return iRet

    End Function

    'SPさん用関数。入力されたPO番号から対象レコードを検索する
    Private Function SearchModelDatafrmTbl(ByVal PO As String) As DataRow

        Dim rw As DataRow

        Dim sectionCD As String = PO.Substring(0, 2) '部門
        Dim clientCD As String = PO.Substring(2, 6) '納入先ｺｰﾄﾞ
        Dim orderCD As String = PO.Substring(8, 6) '受発注No
        '入力文字列（数字）からsectionCD & clientCD & orderCDを取り除いた値をproseqとして認識
        Dim proseq As String = PO.Replace(sectionCD & clientCD & orderCD, "") '加工ｼｰｹﾝｽ番号
        'proseqはNUMBER型のため、integerへ変換
        Dim intproseq As Integer
        intproseq = Integer.Parse(proseq)

        Dim sql As String = "SELECT * FROM pro_order WHERE " _
                            & "(((pro_order.section_cd)='" & sectionCD & "') AND " _
                            & "((pro_order.client_cd)='" & clientCD & "') AND " _
                            & "((pro_order.order_cd)='" & orderCD & "') AND " _
                            & "((pro_order.pro_seq)=" & intproseq & "));"

        Dim tblname As String = "POINFO"
        ExecuteDBtoDataset(PO_address, sql, tblname)

        'データビューへデータセットを格納
        Dim DV As New DataView(DSaccess.Tables(tblname))
        DV.Sort = "ORDER_DATE DESC" 'ORDER_DATEで降順ソート
        Dim tmptbl As DataTable = DV.ToTable(False)
        Dim PRO_QUA As String = tmptbl.Rows(0).Item("PRO_SEQ")
        Dim modelName As String = tmptbl.Rows(0).Item("IN_PROD_NAME") 'ORDER_DATEが最新のレコードから型式情報抽出
        rw = tmptbl.Rows(0)

        Return rw

    End Function

    '●指定されたPOをCSVから検索し、型式を返却するメソッド
    Private Function SearchPOfrmCSV(ByVal PO As String) As String
        Dim bufStr() As String                'CSV格納配列
        Dim modelName As String = ""
        Dim fs As FileStream = File.Open(PO_address, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
        Dim st As StreamReader = New StreamReader(fs, Encoding.Default)
        Dim stBuffer As String = st.ReadLine() ' 読み込んだ結果をすべて格納するための変数を宣言

        ' 読み込みできる文字がなくなるまで繰り返す
        While (stBuffer <> "")
            stBuffer = stBuffer.Replace(" ", "")
            '読み込んだものを追加で格納する
            bufStr = Split(stBuffer, ",") ' ファイルを 1 行ずつ読み込む
            ' 文字列に付与されている「"」を削除

            Dim searchPO As String = ""
            For i As Integer = 0 To bufStr(0).Length - 1
                If IsNumeric(bufStr(0)(i)) Then
                    searchPO = searchPO & bufStr(0)(i)
                End If
            Next
            Dim removeStr As String = """"

            If PO = searchPO Then
                'ファイルクローズ
                st.Close()
                fs.Close()
                '前後の文字を削除
                bufStr(1) = bufStr(1).Replace(removeStr, "")
                modelName = bufStr(1)
                Return modelName
                Exit Function
            End If

            stBuffer = st.ReadLine()
        End While

        'ファイルクローズ
        st.Close()
        fs.Close()

        '検索して見つからなかった場合、""返却
        Return modelName

    End Function

    '●TB_Modelの入力値を元にテーブルを検索しID取得。IDに紐づいたコントロール表示
    Public Sub SearchTB_Model(ByVal modelName As String)

        TB_Model.Text = modelName

        If addflg = 0 Then
            AddNo = 0 'AddNo初期化
            DispGrpNo = 0
        End If

        Try
            '●TB_Modelに入力された文字列の長さに応じて、TB_Modelのwidthを変更
            Dim flg As Integer = 0
            Dim Tstrsize As Single = TB_modelTxtStrSize 'デフォルト値を読み込み integerからsingleへ変更 141222hishiki
            TB_Model.Font = New System.Drawing.Font("MS UI Gothic", TxtStrSize, FontStyle.Bold, GraphicsUnit.Point, TxtStrSize) '一旦デフォルト値に戻す
            Dim wdt As Integer
            Do While flg = 0
                'TB_Modelの文字サイズを「Tstrsize」で設定
                TB_Model.Font = New System.Drawing.Font("MS UI Gothic", Tstrsize, FontStyle.Bold, GraphicsUnit.Point, Tstrsize)
                '半角のサイズ×（文字長さ+1）でwidth計算
                wdt = TextRenderer.MeasureText(New String("A", TB_Model.Text.Length + 1), TB_Model.Font).Width
                'wdtがTB_Modelのwidthよりも小さいならループを抜ける（TB_Modelのwidthを変更しない）
                If wdt <= TB_Model.Width Then
                    flg = 1
                End If
                Tstrsize = Tstrsize - 0.5 'TB_Modelの文字サイズを1サイズ小さくする
                'TB_Modelの文字サイズが12になったら、処理を抜ける（12未満にならないように制御）
                If Tstrsize < 12 Then
                    flg = 1
                End If
            Loop

            '●header.csvで「del」で登録された文字を削除
            Dim modelFullName As String = TB_Model.Text
            modelFullName = searchT_headerDel(modelFullName) 'header.csvにてdelで定義された文字を除外


            '●分割文字列作成
            modelSplit = Split(modelFullName, "-")
            '「-」で分割した文字列が2つ以上存在する場合
            If modelSplit.Length >= 2 Then
                'T_header情報を読み込んで分割文字列操作
                '（例）「G」がヘッダーに登録されていた場合「G-」を2つ目の文字列とくっつける
                modelSplit = searchT_headerAdd(modelSplit)
            End If

            '●size1、size2など「size*」の内部定義作成
            '分割文字列群の中から数字だけの文字列を抜き出してsize（）へ設定
            Dim cnt As Integer = 0
            Dim bufSize(0) As String 'サイズ1から使用
            sizes = bufSize
            For i As Integer = 0 To UBound(modelSplit)
                Dim c1 As String = Mid(modelSplit(i), 1, 1)
                '分割文字列の1文字目が数字の場合
                If IsNumeric(c1) Then
                    ReDim Preserve bufSize(cnt)
                    bufSize(cnt) = modelSplit(i)
                    cnt = cnt + 1
                End If
            Next
            sizes = bufSize

            '●T_type_defineから型式を検索し、そのID（列番号）を取得（以降、IDをキーにして各テーブルを検索）
            'prgTableへソートして渡すための仮テーブル
            Dim tmpTable As DataTable = New DataTable
            tmpTable.Columns.Add("DISPORDER", GetType(Integer)) '150128 hishiki プログラム表示順
            tmpTable.Columns.Add("DISPPRGNO", GetType(Integer)) 'プログラムNo
            tmpTable.Columns.Add("PRGNAME", GetType(String)) 'プログラム名
            tmpTable.Columns.Add("PRGTEXT", GetType(String)) 'プログラム表示名

            ID = searchT_type_define(modelFullName) 'IDが見つからなかった場合「-1」が返却される
            If ID >= 0 Then 'IDが見つかった場合
                'IDをキーにして、T_type_prgから対象行を取得
                Dim rw_type_prg As DataRow() = DSbase.Tables("T_type_prg").Select("NO=" & "'" & ID & "'" & "")
                If rw_type_prg.Length = 0 Then Exit Sub

                '入力された型式の表示プログラム取得
                For i As Integer = 0 To prgNum - 1 'T_prgに登録された情報分ループ
                    Dim prgNo As String = DSbase.Tables("T_prg").Rows(i).Item("PRGNO")
                    Dim PrgName As String = DSbase.Tables("T_prg").Rows(i).Item("PRGNAME")
                    Dim PrgText As String = DSbase.Tables("T_prg").Rows(i).Item("PRGTEXT")

                    If rw_type_prg(0).Item(PrgName) <> "" Then
                        Dim row As DataRow = tmpTable.NewRow()
                        row("DISPORDER") = rw_type_prg(0).Item(PrgName) '150128 hishiki T_type_prgからプログラム名に紐づいた表示順を取得
                        row("DISPPRGNO") = prgNo
                        row("PRGNAME") = PrgName
                        row("PRGTEXT") = PrgText
                        tmpTable.Rows.Add(row)
                    End If
                Next

                '仮テーブルをDISPORDERで昇順ソート
                Dim tmprows As DataRow() = tmpTable.Select(Nothing, "DISPORDER").Clone
                prgTable = New DataTable("PRG")
                prgTable = tmpTable.Clone

                '仮テーブルの値（ソート済）をprgTableへセット
                For Each rw As DataRow In tmprows
                    prgTable.ImportRow(rw)
                Next

                '表示用プログラムが設定できなければNG
                If prgTable.Rows.Count = 0 Then
                    Exit Sub
                    '１より大きい場合、プログラム切り替えボタン及びプログラム名テキストボックスを表示させる
                    '（１の場合は、何もしないため非表示のまま）
                ElseIf prgTable.Rows.Count > 1 Then
                    Btn_chngprgrm.Visible = True
                    TB_Prg.Visible = True
                End If

                '●IDをキーにして対象型式のデータを抽出し画面上に表示
                Dim targetPRGNo As String = prgTable.Rows(0).Item("DISPPRGNO") 'prgTableの最初の行が初期表示プログラム
                dispTargetPRG(targetPRGNo)


                '●フラグオンなら、型式読み込み実績記録
                If POInfoRecordFlg = 1 Then
                    Logger.Info("InputData:" & TB_Barcode.Text)
                End If

                'T_Typeにデータが無かった場合、コントロールを削除し「No Data」表示
            Else
                txtChangeEventFlg = 0

                'addflgオンの場合コントロール表示そのまま
                If addflg = 1 Then

                    'addflgオフの場合コントロール全部削除
                Else
                    delControls()
                End If

                Logger.Info("No Data:" & TB_Model.Text)
                TB_Model.Text = "No Data" & ":" & TB_Model.Text

                txtChangeEventFlg = 1
                TB_Barcode.Focus() 'TB_Barcodeにフォーカスを戻す

            End If
        Catch ex As Exception
            Logger.Warn("err8")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)
        End Try

    End Sub


    '●テキストボックスの値が数字か確認。数字ではない場合、背景を赤に変更
    Private Sub chkTxtIsNumeric()
        For Each c As Control In FlowLayoutPanel1.Controls
            If c.Name.IndexOf("TLP") = 0 Then
                For Each cc As Control In c.Controls
                    If cc.Name.IndexOf("TB") = 0 Then
                        If Not cc.Name.Contains("M") Then '測定値入力用テキストボックスは対象外
                            If IsNumeric(cc.Text) = True Or cc.Text = "" Then
                                cc.BackColor = Color.White
                            Else
                                cc.BackColor = Color.Red
                            End If
                        End If
                    End If
                Next

            End If
        Next
    End Sub

    '●フローレイアウトパネル上のコントロールを削除する関数
    Private Sub delControls()

        '***コントロール削除中のちらつき防止開始***
        FlowLayoutPanel1.Visible = False

        'フローレイアウトパネル上のコントロールを検索
        '数を数えて配列サイズとして使用
        Dim cntrlNum As Integer = 0
        Dim Array_Cntrls(0) As Control 'フローレイアウトパネル上のコントロール
        For Each c As Control In FlowLayoutPanel1.Controls
            ReDim Preserve Array_Cntrls(cntrlNum)
            Array_Cntrls(cntrlNum) = c
            cntrlNum = cntrlNum + 1
        Next

        'フローレイアウトパネル上のコントロールを削除（図面用コントロールを除く）
        'コントロールを検索して直接削除するとエラーになるため一旦配列へ格納してから削除
        For i As Integer = 0 To UBound(Array_Cntrls)
            If Array_Cntrls(i) IsNot Nothing Then
                Array_Cntrls(i).Dispose()
            End If
        Next

        '***コントロール削除中のちらつき防止終了***
        FlowLayoutPanel1.Visible = True

    End Sub

    '●マスタの情報からコントロールを作成し画面上に設置（値は後で設定。コントロールだけ作成）
    Private Sub setControls()

        measureCnt = 0 '測定用コントロールのカウントをリセット
        measureDefine = ""

        'データセット初期化
        DScorrect = New DataSet '補正用データセット初期化
        DSswitch = New DataSet 'switchコントロール用データセット初期化
        ''DScmb = New DataSet 'コンボボックス用データセット初期化

        'リレーション用テーブル初期化
        If relationTable IsNot Nothing Then
            relationTable.Dispose()
        End If
        relationTable = New DataTable
        relationTable.Columns.Add("NO", GetType(String))
        relationTable.Columns.Add("MACRO", GetType(String))
        relationTable.Columns.Add("VALUE", GetType(String))
        relationTable.Columns.Add("GRPNO", GetType(String))

        '151118 hishiki start switch,input,correctの表示非表示対応
        'マクロ名とrelationDispFlgの定義名を保持するテーブル
        If relationDispflgTable IsNot Nothing Then
            relationDispflgTable.Dispose()
        End If
        relationDispflgTable = New DataTable
        relationDispflgTable.Columns.Add("NO", GetType(String))
        relationDispflgTable.Columns.Add("MACRO", GetType(String))
        relationDispflgTable.Columns.Add("VALUE", GetType(String))
        relationDispflgTable.Columns.Add("GRPNO", GetType(String))

        'マクロ名とrelationDispFlgの値を保持するテーブル
        If relationDispflgValueTable IsNot Nothing Then
            relationDispflgValueTable.Dispose()
        End If
        relationDispflgValueTable = New DataTable
        relationDispflgValueTable.Columns.Add("MACRO", GetType(String))
        relationDispflgValueTable.Columns.Add("VALUE", GetType(String))
        '151118 hishiki start switch,input,correctの表示非表示対応

        'T_loadから、IDをキーにして対象行取得
        Dim rw_load As DataRow() = DSprg.Tables("T_load" & dispPrgNo).Select("NO=" & "'" & ID & "'" & "")
        If rw_load.Length <> 1 Then Exit Sub

        'T_loadのDISPFLGを設定
        prgDispFlg = rw_load(0).Item("DISPFLG")

        'ピクチャーボックス作成(図面表示用)
        '図面未使用の場合は作成しない
        If PctrFlg = 1 Then
            PctrBx = New PictureBox
            maketPctrBx(PctrBx)
            FlowLayoutPanel1.Controls.Add(PctrBx)

            Dim fileName As String = rw_load(0).Item("DRAWING")
            Dim folderName As String = System.IO.Path.Combine(Path, dispPrgName) '150129 hishiki
            folderName = System.IO.Path.Combine(folderName, "drawing") '150129 hishiki
            folderName = System.IO.Path.Combine(folderName, fileName) '150113 hishiki
            'ファイルが見つかったら描画
            If System.IO.File.Exists(folderName) Then
                setDrawing(folderName)
            End If
        End If

        '160316 hishiki add
        Dim cmnt_B As String = ""
        Dim cmnt_R As String = ""

        'T_cntrlを基にFlowLayoutPanel1へコントロール配置
        For Each rw_cntrl As DataRow In DSprg.Tables("T_cntrl" & dispPrgNo).Rows


            Dim Cntrl_Kind As String = rw_cntrl.Item("KIND")

            'ラベルの表示値を設定。項目「LABELTXT」に登録があればその値を、なければ項目「MACRO」の値を表示
            Dim LabelTxt As String = rw_cntrl.Item("MACRO") 'ラベル表示はデフォルト表示はMacro名を設定
            If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("LABELTXT") Then 'T_cntrlの中にDISPVALUEのフィールドが存在した場合
                If IsDBNull(rw_cntrl.Item("LABELTXT")) = False Then '150609 文字化け時に空白ではなく、NULLが設定されるため条件追加
                    If rw_cntrl.Item("LABELTXT") <> "" Then
                        LabelTxt = rw_cntrl.Item("LABELTXT") 'LABELTXTに値設定の場合、LABELTXTの値を表示
                    End If
                End If
            End If

            Dim macro As String = rw_cntrl.Item("MACRO")
            Dim value As String = "-"

            'T_cntrlで定義されたマクロ名が、T_loadに存在する場合処理実行
            If DSprg.Tables("T_load" & dispPrgNo).Columns.Contains(macro) Then
                If rw_load(0).Item(macro) <> "" Then
                    'T_loadの設定値を基に対応するマクロの値を取得
                    value = getValueFrmMaster(rw_load(0).Item(macro), macro, 0)
                    'relation系は、後で値を設定するためここでは空白にしておく
                    If value.IndexOf("relation") = 0 Then
                        value = ""
                    End If

                    '160419 hishiki start input系で、load.csvに初期値の設定がない場合valueを「-」から「」へ変更（inputフォームが表示されないバグ対応）
                Else
                    If Cntrl_Kind = "input" Then
                        value = ""
                    End If
                    '160419 hishiki end
                End If
            End If

            'changePRG、selectPRGの場合、load.csvにマクロ名を記入しなくてもOK
            If Cntrl_Kind = "changePRG" Or Cntrl_Kind = "selectPRG" Then
                value = ""

                '160316 hishiki start　コメントアウト input系のload.csvでの設定値が「-」の場合は、画面非表示
                '    'input系の場合、load.csvの設定値が空白でもOK
                'ElseIf Cntrl_Kind = "input" And value = "-" Then
                '    value = ""
                '160316 hishiki end　コメントアウト

            End If

            '値が数字の場合、フォーマットを変換(小数点を含む場合、ini.csvのDecimalPlaceの位置まで表示制限）
            If IsNumeric(value) Then
                Dim formatStr As String = makeFormatStr(value)
                '160808 hishiki start Single.parse→Decimal.parseへ修正
                value = Format(Decimal.Parse(value), formatStr)
                'value = Format(Single.Parse(value), formatStr)
                '160808 hishiki end
            End If

            'T_loadの設定値が「-」の場合コントロールを作成しない（""の場合は、空白で設定）
            If value <> "-" Then
                Dim macroName As String = rw_cntrl.Item("MACRO")
                Dim dispFlg As String = rw_cntrl.Item("DISPFLG")
                Dim btnName As String = rw_cntrl.Item("BTNNAME")
                Dim prgName As String = rw_cntrl.Item("CHANGEPRG")

                '160316 hishiki start 各コントロールにコメント付与機能追加

                If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("CMNT_B") Then
                    cmnt_B = rw_cntrl.Item("CMNT_B")
                End If
                If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("CMNT_R") Then
                    cmnt_R = rw_cntrl.Item("CMNT_R")
                End If
                '160316 hishiki end 

                Select Case Cntrl_Kind
                    Case "load" 'ロード系 実数、size、defineで変換できる値は変換。relation、calcの場合後で計算して表示
                        makeCntrlLoad(macroName, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                    Case "input" 'インプット系
                        makeCntrlInput(macroName, LabelTxt, dispFlg, btnName, value, cmnt_B, cmnt_R)
                    Case "select" 'セレクト系
                        makeCntrlSelect(macroName, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                    Case "correct" '補正系
                        makeCntrlCorrect(macroName, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                    Case "relation" '条件系
                        makeCntrlRelation(macroName, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                    Case "switch" 'ボタン押下表示切替系
                        makeCntrlSwitch(macroName, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                    Case "measure" 'デジタルノギス等の測定値受付
                        If measureCnt = 0 Then '測定用コントロールは画面に１つだけしか作成しない
                            makeCntrlMeasure(macroName, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                            measureCnt = measureCnt + 1
                        End If
                    Case "selectPRG" 'コンボボックスで指定したプログラムへ遷移
                        makeCntrlselectPRG(macroName, dispFlg, value, cmnt_B, cmnt_R)
                    Case "changePRG" 'ボタンを押下すると設定されたプログラムへ遷移
                        makeCntrlchangePRG(macroName, dispFlg, btnName, prgName, value, cmnt_B, cmnt_R)

                End Select

            End If

        Next

        'relation系の値をテーブルへ設定
        setRelationTBL()

        'リレーション系コントロールに値を設定
        If relationTable.Rows.Count <> 0 Then
            setValueToRelationCntrl()
        End If

        'cntrl.csvのMACROの列に「add」があった場合、addボタン作成(1つだけ）
        AddNo = 0
        Dim tmpCopyRow As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO='add'")
        If tmpCopyRow.Length = 0 Then Exit Sub

        '160316 hishiki start changePRG,selectPRGがあった場合、addはマスタに登録しても表示されない仕様とする
        Dim tmpCopyRow_changePRG As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("KIND='changePRG'")
        Dim tmpCopyRow_selectPRG As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("KIND='selectPRG'")
        If tmpCopyRow_changePRG.Length > 0 Or tmpCopyRow_selectPRG.Length > 0 Then Exit Sub
        '160316 hishiki end

        '160316 hishiki start 各コントロールにコメント付与機能追加
        If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("CMNT_B") Then
            cmnt_B = tmpCopyRow(0).Item("CMNT_B")
        End If
        If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("CMNT_R") Then
            cmnt_R = tmpCopyRow(0).Item("CMNT_R")
        End If
        '160316 hishiki end 

        If SendFileFormat <> 2 Then '150928 hishiki Brother機能追加
            'If SendFileFormat = 1 Then 'sendfileformatが2の場合はaddは使用できないこととする

            '160408 start hishiki add.csvが未入力の場合ボタン非表示条件追加
            Dim tmprows As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & AddNo & "'")
            If tmprows.Length > 0 Then Exit Sub
            '160408 end
            makeCntrlAdd(Btn_add_text, cmnt_B, cmnt_R)
        End If

    End Sub

    'add.csvで定義されたフォームを画面に追加するメソッド 　返却値　1:成功　0:失敗
    Private Function addControls() As Integer
        Dim rtnvalue As Integer = 1 '1:成功　0:失敗

        'T_addから対象グループの行抽出
        Dim tmprows As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & AddNo & "'")
        If tmprows.Length = 0 Then
            rtnvalue = 0
            Return rtnvalue
            Exit Function
        End If

        'T_loadから、IDをキーにして対象行取得
        Dim rw_load As DataRow() = DSprg.Tables("T_load" & dispPrgNo).Select("NO=" & "'" & ID & "'" & "")
        If rw_load.Length <> 1 Then
            rtnvalue = 0
            Return rtnvalue
            Exit Function
        End If

        Try
            For Each rw_add As DataRow In tmprows
                Dim macro As String = rw_add.Item("DEFINE")
                Dim copyMacro As String = rw_add.Item("COPY")

                Dim rw_cntrl As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO='" & copyMacro & "'")
                If rw_cntrl.Length <> 1 Then
                    rtnvalue = 0
                    Return rtnvalue
                    Exit Function
                End If

                Dim Cntrl_Kind As String = rw_cntrl(0).Item("KIND")

                'ラベルの表示値を設定。項目「LABELTXT」に登録があればその値を、なければ項目「MACRO」の値を表示

                '151118 hishiki start　addの場合のLABEL表示条件修正
                'Dim LabelTxt As String = rw_cntrl(0).Item("MACRO")
                'If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("LABELTXT") Then 'T_cntrlの中にDISPVALUEのフィールドが存在した場合
                '    If rw_cntrl(0).Item("LABELTXT") = "" Then
                '        LabelTxt = rw_cntrl(0).Item("MACRO") '項目に値未設定の場合、MACROの値を表示
                '    Else
                '        LabelTxt = rw_cntrl(0).Item("LABELTXT")
                '    End If
                'End If

                Dim LabelTxt As String = macro
                If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("LABELTXT") Then 'T_cntrlの中にDISPVALUEのフィールドが存在した場合
                    If rw_cntrl(0).Item("LABELTXT") = "" Then
                        LabelTxt = macro '項目に値未設定の場合、MACROの値を表示
                    Else
                        LabelTxt = rw_cntrl(0).Item("LABELTXT")
                    End If
                End If
                '151118 hishiki end　addの場合のLABEL表示条件修正

                Dim value As String = "-"

                'T_cntrlで定義されたマクロ名が、T_loadに存在する場合処理実行
                If DSprg.Tables("T_load" & dispPrgNo).Columns.Contains(copyMacro) Then
                    If rw_load(0).Item(copyMacro) <> "" Then
                        'T_loadの設定値を基に対応するマクロの値を取得
                        value = getValueFrmMaster(rw_load(0).Item(copyMacro), macro, AddNo)
                        'relation系は、後で値を設定するためここでは空白にしておく
                        If value.IndexOf("relation") = 0 Then
                            value = ""
                        End If

                        '160419 hishiki start input系で、load.csvに初期値の設定がない場合valueを「-」から「」へ変更（inputフォームが表示されないバグ対応）
                    Else
                        If Cntrl_Kind = "input" Then
                            value = ""
                        End If
                        '160419 hishiki end
                    End If
                End If

                'changePRG、selectPRGの場合、load.csvにマクロ名を記入しなくてもOK
                If Cntrl_Kind = "changePRG" Or Cntrl_Kind = "selectPRG" Then
                    value = ""

                    '160419 hishiki start　コメントアウト input系のload.csvでの設定値が「-」の場合は、画面非表示
                    'input系の場合、load.csvの設定値が空白でもOK
                    'ElseIf Cntrl_Kind = "input" And value = "-" Then
                    '    value = ""
                    '160419 hishiki end　コメントアウト
                End If

                '値が数字の場合、フォーマットを変換(小数点付与の場合、小数点以下4桁まで表示に制限）
                If IsNumeric(value) Then
                    Dim formatStr As String = makeFormatStr(value)
                    '160808 hishiki start Single.parse→Decimal.parseへ修正
                    value = Format(Decimal.Parse(value), formatStr)
                    'value = Format(Single.Parse(value), formatStr)
                    '160808 hishiki end 
                End If

                'T_loadの設定値が「-」の場合コントロールを作成しない（""の場合は、空白で設定）
                If value <> "-" Then
                    'Dim macroName As String = rw_cntrl(0).Item("MACRO")
                    Dim dispFlg As String = rw_cntrl(0).Item("DISPFLG")
                    Dim btnName As String = rw_cntrl(0).Item("BTNNAME")
                    Dim prgName As String = rw_cntrl(0).Item("CHANGEPRG")

                    '160316 hishiki start 各コントロールにコメント付与機能追加
                    Dim cmnt_B As String = ""
                    Dim cmnt_R As String = ""
                    If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("CMNT_B") Then
                        cmnt_B = rw_cntrl(0).Item("CMNT_B")
                    End If
                    If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("CMNT_R") Then
                        cmnt_R = rw_cntrl(0).Item("CMNT_R")
                    End If
                    '160316 hishiki end 

                    Select Case Cntrl_Kind
                        Case "load" 'ロード系 実数、size、defineで変換できる値は変換。relation、calcの場合後で計算して表示
                            makeCntrlLoad(macro, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                        Case "input" 'インプット系
                            makeCntrlInput(macro, LabelTxt, dispFlg, btnName, value, cmnt_B, cmnt_R)
                        Case "select" 'セレクト系
                            makeCntrlSelect(macro, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                        Case "correct" '補正系
                            makeCntrlCorrect(macro, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                        Case "relation" '条件系
                            makeCntrlRelation(macro, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                        Case "switch" 'ボタン押下表示切替系
                            makeCntrlSwitch(macro, LabelTxt, dispFlg, value, cmnt_B, cmnt_R)
                        Case "measure" 'デジタルノギス等の測定値受付
                            '対象外
                        Case "selectPRG" 'コンボボックスで指定したプログラムへ遷移
                            '対象外
                        Case "changePRG" 'ボタンを押下すると設定されたプログラムへ遷移
                            '対象外
                    End Select

                End If

            Next

            'relation系の値をテーブルへ設定
            '151118 start add時のrelationTableへの追加用関数新規作成
            'setRelationTBL()
            addRelationTBL(AddNo)
            '151118 end add時のrelationTableへの追加用関数新規作成

            'リレーション系コントロールに値を設定
            If relationTable.Rows.Count <> 0 Then
                setValueToRelationCntrl()
            End If

            'CHK対象マクロを確認して、値がCOPYとDEFINEのマクロで同じかどうかチェック
            Dim errMacroName As String = ""
            errMacroName = chkAddControls()
            'エラーがあったら、リレーション用テーブルを修正し、画面からコントロール削除
            If errMacroName <> "" Then
                modRelationTBL()
                delAddContrlFlg = 1
                'delAddControls()
                Dim str1 As String = "Check Next TextBox"
                rtnvalue = 0
                ShowFrmInfo(str1, errMacroName)
            End If

        Catch ex As Exception
            rtnvalue = 0
        End Try

        Return rtnvalue

    End Function

    'リレーションテーブル修正用メソッド
    Private Sub modRelationTBL()

        '現在のrelationTableから、GRPNO=AddNOの行を除いた行を、仮テーブルへコピー
        Dim tmpTable As New DataTable
        tmpTable.Columns.Add("NO", GetType(String))
        tmpTable.Columns.Add("MACRO", GetType(String))
        tmpTable.Columns.Add("VALUE", GetType(String))
        tmpTable.Columns.Add("GRPNO", GetType(String))
        For Each rw As DataRow In relationTable.Rows
            If rw.Item("GRPNO") <> AddNo Then
                Dim rlRow As DataRow = tmpTable.NewRow()
                rlRow.Item("NO") = rw.Item("NO")
                rlRow.Item("MACRO") = rw.Item("MACRO")
                rlRow.Item("VALUE") = rw.Item("VALUE")
                rlRow.Item("GRPNO") = rw.Item("GRPNO")
                tmpTable.Rows.Add(rlRow)
            End If
        Next

        'リレーション用テーブル初期化
        relationTable.Dispose()

        '仮テーブルの値をリレーションテーブルへセット。（リレーション用テーブル作り直し）
        relationTable = New DataTable
        relationTable.Columns.Add("NO", GetType(String))
        relationTable.Columns.Add("MACRO", GetType(String))
        relationTable.Columns.Add("VALUE", GetType(String))
        relationTable.Columns.Add("GRPNO", GetType(String))
        For Each rw As DataRow In tmpTable.Rows
            Dim rlRow As DataRow = relationTable.NewRow()
            rlRow.Item("NO") = rw.Item("NO")
            rlRow.Item("MACRO") = rw.Item("MACRO")
            rlRow.Item("VALUE") = rw.Item("VALUE")
            rlRow.Item("GRPNO") = rw.Item("GRPNO")
            relationTable.Rows.Add(rlRow)
        Next

    End Sub

    'Frm_Info表示用メソッド
    Public Sub ShowFrmInfo(ByVal str1 As String, ByVal str2 As String)

        'サブ画面を一旦非表示へ
        If Frm_Info.Visible = True Then
            Frm_Info.Close()
        End If
        If Frm_Calc.Visible = True Then
            Frm_Calc.Close()
        End If
        If Frm_KeyBoard.Visible = True Then
            Frm_KeyBoard.Close()
        End If
        If Frm_Input.Visible = True Then
            Frm_Input.Close()
        End If

        Dim wdt1_def As Integer = Frm_Info.Label1.Width

        Frm_Info.Label1.Text = str1
        Frm_Info.Label2.Text = str2

        'labelの文字サイズにあわせて、フォームのサイズを変更
        Dim wdt1 As Integer = Frm_Info.Label1.Width
        Dim wdt2 As Integer = Frm_Info.Label2.Width
        Dim wdt As Integer = wdt1
        If wdt1 <= wdt2 Then
            wdt = wdt2
        End If

        'Frm_Infoのwidthをlabelの増加比率を考慮して大きくする。
        If wdt > wdt1_def Then
            Dim ratio As Single = wdt / wdt1_def

            Dim tmpWidth As Single = Frm_Info.Width * ratio
            Dim meWidth As Single = Me.Width
            'Frm_infoのwidthを超えなければ、実行
            If tmpWidth < meWidth Then
                Frm_Info.Width = Frm_Info.Width * ratio
                Frm_Info.FlowLayoutPanel1.Width = Frm_Info.FlowLayoutPanel1.Width * ratio
            End If
        End If

        Dim bufX, bufY As Integer
        'str2のテキストが未設定の場合
        If str2 = "" Then
            'label2およびFlowLayouotPanelを削除
            Frm_Info.Label2.Dispose()
            Frm_Info.FlowLayoutPanel1.Dispose()

            'ラベル1の位置をセンターへ移動（Y方向）
            bufY = Frm_Info.Height / 2 - Frm_Info.Label1.Height * 2
        Else
            bufY = Frm_Info.Location.Y '移動なし（Y方向）
        End If
        'ラベル1の位置をセンターへ移動（X方向）
        bufX = Frm_Info.Width / 2 - Frm_Info.Label1.Width / 2
        Frm_Info.Label1.Location = New Point(bufX, bufY)

        'ボタンをセンターへ
        bufX = Frm_Info.Width / 2 - Frm_Info.Btn_close.Width / 2
        bufY = Frm_Info.Btn_close.Location.Y '移動なし
        Frm_Info.Btn_close.Location = New Point(bufX, bufY)

        Frm_Info.Show()
        'フォームがメインフォームの後ろに隠れないようにする

        Me.AddOwnedForm(Frm_Info)

    End Sub


    '151118 hishiki　switch,input,correctの表示非表示対応
    'relationDispFlgの定義を保持するテーブルへ値を設定
    Private Sub setRelationDispFlgTbl(ByVal define As String, ByVal macro As String)

        Dim rlRow As DataRow
        Dim no As String = define.Replace("relation", "").ToString
        rlRow = relationDispflgTable.NewRow()
        rlRow.Item("NO") = no
        rlRow.Item("MACRO") = macro
        rlRow.Item("VALUE") = define
        rlRow.Item("GRPNO") = AddNo 'add.csvのグループNo
        relationDispflgTable.Rows.Add(rlRow)

    End Sub

    '151118 hishiki　switch,input,correctの表示非表示対応
    'relationDispFlgの値保持用テーブルへ値を設定
    Private Sub setRelationDispFlgValueTbl(ByVal macro As String, ByVal value As String)
        Dim rlRow As DataRow
        rlRow = relationDispflgValueTable.NewRow()
        rlRow.Item("MACRO") = macro
        rlRow.Item("VALUE") = value
        relationDispflgValueTable.Rows.Add(rlRow)
    End Sub

    '151118 hishiki add時のrelationTableへの追加用関数新規作成
    Private Sub addRelationTBL(ByVal grpNo As String)

        Dim tmpTable As New DataTable
        tmpTable.Columns.Add("NO", GetType(String))
        tmpTable.Columns.Add("MACRO", GetType(String))
        tmpTable.Columns.Add("VALUE", GetType(String))
        tmpTable.Columns.Add("GRPNO", GetType(String)) 'add.csvのグループNo

        Dim addrows As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & grpNo & "'")
        For Each addrow As DataRow In addrows
            Dim cpymacro As String = addrow.Item("COPY")
            Dim macro As String = addrow.Item("DEFINE")

            Dim rw_rel As DataRow() = relationTable.Select("MACRO='" & cpymacro & "'")
            If rw_rel.Length = 1 Then
                Dim tmprow As DataRow = tmpTable.NewRow()
                tmprow.Item("NO") = rw_rel(0).Item("NO")
                tmprow.Item("MACRO") = macro
                tmprow.Item("VALUE") = rw_rel(0).Item("VALUE")
                tmprow.Item("GRPNO") = grpNo
                tmpTable.Rows.Add(tmprow)
            End If
        Next

        '仮テーブルをNOで昇順ソート
        Dim tmprows As DataRow() = tmpTable.Select(Nothing, "NO").Clone
        'relationTable = tmpTable.Clone

        '仮テーブルの値（ソート済）をrelationTableへセット
        Dim rlRow As DataRow
        For Each rw As DataRow In tmprows
            rlRow = relationTable.NewRow()
            rlRow.Item("NO") = rw.Item("NO")
            rlRow.Item("MACRO") = rw.Item("MACRO")
            rlRow.Item("VALUE") = rw.Item("VALUE")
            rlRow.Item("GRPNO") = rw.Item("GRPNO") 'add.csvのグループNo
            relationTable.Rows.Add(rlRow)

        Next

    End Sub


    '●T_loadの対象行からrelationで始まる文字を検索し、relationTBLへ番号順に設定
    Private Sub setRelationTBL()
        'T_loadから、IDをキーにして対象行取得
        Dim rw_load As DataRow() = DSprg.Tables("T_load" & dispPrgNo).Select("NO=" & "'" & ID & "'" & "")
        If rw_load.Length <> 1 Then Exit Sub '対象行が1つ以外の場合エラー

        'リレーション用テーブル初期化
        'relationTable = New DataTable
        Dim tmpTable As New DataTable
        tmpTable.Columns.Add("NO", GetType(String))
        tmpTable.Columns.Add("MACRO", GetType(String))
        tmpTable.Columns.Add("VALUE", GetType(String))
        tmpTable.Columns.Add("GRPNO", GetType(String)) 'add.csvのグループNo

        '「relation」で始まる定義をT_loadから検索し仮テーブルへ登録
        For i As Integer = 0 To DSprg.Tables("T_load" & dispPrgNo).Columns.Count - 1
            Dim macro As String = DSprg.Tables("T_load" & dispPrgNo).Columns(i).ColumnName
            Dim value As String = rw_load(0)(i)

            'addモードの場合の処理
            If AddNo <> 0 Then
                Dim copymacro As String = ""
                'T_addから対象グループの行抽出
                Dim tmprows0 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & AddNo & "' AND " & "COPY='" & macro & "'")
                Dim targetMacro As String = ""
                If tmprows0.Length <> 0 Then
                    targetMacro = tmprows0(0).Item("DEFINE")
                End If

                'マクロ名をT_addの「DEFINE」で登録されたもので登録
                If targetMacro <> "" Then
                    macro = targetMacro
                End If
            End If

            If value.IndexOf("relation") = 0 Then
                Dim no As String = value.Replace("relation", "").ToString
                Dim rw_tmp As DataRow = tmpTable.NewRow
                rw_tmp.Item("NO") = no
                rw_tmp.Item("MACRO") = macro
                rw_tmp.Item("VALUE") = value
                rw_tmp.Item("GRPNO") = AddNo 'add.csvのグループNo
                tmpTable.Rows.Add(rw_tmp)
            End If

        Next

        '仮テーブルをNOで昇順ソート
        Dim tmprows As DataRow() = tmpTable.Select(Nothing, "NO").Clone
        'relationTable = tmpTable.Clone

        '仮テーブルの値（ソート済）をrelationTableへセット
        Dim rlRow As DataRow
        For Each rw As DataRow In tmprows
            rlRow = relationTable.NewRow()
            rlRow.Item("NO") = rw.Item("NO")
            rlRow.Item("MACRO") = rw.Item("MACRO")
            rlRow.Item("VALUE") = rw.Item("VALUE")
            rlRow.Item("GRPNO") = rw.Item("GRPNO") 'add.csvのグループNo
            relationTable.Rows.Add(rlRow)

                Debug.Print("test:value=" & rw.Item("VALUE"))

        Next

        '151118 hishiki start switch,input,correctの表示非表示対応
        ' relationDispflgTableの値を、relationTableへ反映(表示非表示の判定を一番最後に行う)
        For Each rw1 As DataRow In relationDispflgTable.Rows
            rlRow = relationTable.NewRow()
            rlRow.Item("NO") = rw1.Item("NO")
            rlRow.Item("MACRO") = rw1.Item("MACRO")
            rlRow.Item("VALUE") = rw1.Item("VALUE")
            rlRow.Item("GRPNO") = rw1.Item("GRPNO")
            relationTable.Rows.Add(rlRow)

        Next
        '151118 hishiki start switch,input,correctの表示非表示対応

    End Sub

    '●リレーション系コントロールに値を設定
    Private Sub setValueToRelationCntrl()

        txtChangeEventFlg = 0 '動的イベントを一時無効 '151130 hishiki txt_changeイベントの無限ループ対応

        Debug.Print("test:rows.count=" & relationTable.Rows.Count)

        For Each rw As DataRow In relationTable.Rows

            Dim define As String = rw.Item("VALUE")
            Dim macro As String = rw.Item("MACRO")
            Dim grpNO As Integer = rw.Item("GRPNO") 'add.csvのグループNo

            If macro = "#567" Then

                Debug.Print("test:define=" & define)
                Debug.Print("test:macro=" & macro)
            End If


            'DRAWINGの場合、T_relationから得た結果を基に図面を描画
            If rw.Item("MACRO").ToString.IndexOf("DRAWING") = 0 Then
                'ピクチャーボックスへ、図面反映（図面未使用の場合作成しない）
                If PctrFlg = 1 Then
                    Dim fileName As String = rw.Item("VALUE")
                    '「relation」で定義されていた場合、値を検索
                    If fileName.IndexOf("relation") = 0 Then
                        fileName = searchT_relation(fileName, 0)
                    End If

                    Dim folderName As String = System.IO.Path.Combine(Path, dispPrgName) '150129 hishiki
                    folderName = System.IO.Path.Combine(folderName, "drawing") '150129 hishiki
                    folderName = System.IO.Path.Combine(folderName, fileName) '150113 hishiki

                    If System.IO.File.Exists(folderName) Then
                        setDrawing(folderName)
                    Else
                        If Not (PctrBx.Image Is Nothing) Then
                            PctrBx.Image.Dispose()
                            PctrBx.Image = Nothing
                        End If
                    End If
                End If

                'DISPFLGの場合、T_relationから得た結果を基に、表示するプログラムの制御を行う
            ElseIf rw.Item("MACRO").ToString.IndexOf("DISPFLG") = 0 Then
                'T_loadのDISPFLGを設定
                prgDispFlg = rw.Item("VALUE")
                '「relation」で定義されていた場合、値を検索
                If prgDispFlg.IndexOf("relation") = 0 Then
                    prgDispFlg = searchT_relation(prgDispFlg, 0)
                    If prgDispFlg = "" Then
                        prgDispFlg = "1"
                    End If
                End If

                'その他の場合（マクロ）、T_relationから得た結果を基に、テキストボックスに値を設定する
            Else

                '対象TBを画面上で検索
                Dim c As Control() = FlowLayoutPanel1.Controls.Find("TB" & macro, True)

                '対象TBが見つかった場合
                If c.Length = 1 Then

                    Dim macroTB As TextBox = CType(c(0), TextBox)
                    Dim value As String = searchT_relation(define, grpNO)

                    '151118 hishiki start switch,input,correctの表示非表示対応

                    'defineが「relation_dispflg」の場合、表示非表示の制御を行う。
                    If define.Contains("relation_dispflg") Then
                        '対象TableLayoutPanelを検索
                        Dim c0 As Control() = FlowLayoutPanel1.Controls.Find("TLP" & macro, True)
                        If c0.Length = 1 Then '対象TLPが見つかった場合
                            Dim macroTLP As TableLayoutPanel = c0(0)

                            'relationDispflgの値をテーブルへ保存
                            Dim row_rel As DataRow() = relationDispflgValueTable.Select("MACRO='" & macro & "'")
                            If row_rel.Length = 0 Then
                                setRelationDispFlgValueTbl(macro, value) '未登録の場合、新規登録
                            ElseIf row_rel.Length = 1 Then '登録済みの場合、値を書き換え
                                row_rel(0).Item("VALUE") = value
                            End If

                            'relatoin_dispflgのValueの値に応じて、NCへ送信する場合の条件が異なる。
                            '0:非表示、値はTBの値を送信
                            '-1:非表示、値は0を送信
                            '上記以外：表示かつTBの値を送信（cntrl.csvのDISPFLGが１なら）
                            If value = "0" Or value = "-1" Then
                                macroTLP.Visible = False 'cntrl.csvのdispflgが1で、visibleがfalseの場合は、送信時に0に変更（brtoher）または送信しない（Fanuc)
                            Else
                                macroTLP.Visible = True
                            End If

                        End If
                        '151118 hishiki end switch,input,correctの表示非表示対応

                    Else

                        'valueがマクロ名（#を含む）の場合、対象マクロから値を取得してvalueへセット
                        Dim c_TB As Control()
                        If value.IndexOf("#") = 0 And value <> "" Then
                            c_TB = FlowLayoutPanel1.Controls.Find("TB" & value, True)
                            If c_TB.Length <> 1 Then
                                value = ""
                            Else
                                value = c_TB(0).Text
                            End If
                        End If

                        '値が数字の場合、フォーマットを変換
                        If IsNumeric(value) Then
                            Dim formatStr As String = makeFormatStr(value)
                            '160808 hishiki start Single.parse→Decimal.parseへ修正
                            value = Format(Decimal.Parse(value), formatStr)
                            'value = Format(Single.Parse(value), formatStr)
                            '160808 hishiki end 
                        End If

                        '対象コントロールを検索()
                        Dim c1 As Control() = FlowLayoutPanel1.Controls.Find("TLP" & macro, True)
                        If c1.Length = 1 Then

                            Dim macroTLP As TableLayoutPanel = c1(0)

                            '150909 hishiki 値が「-」の場合SENDFLG、DISPFLGを0へ変更し、非表示へ変更 - start -
                            '151006 hishiki フラグをいじると次回型式読込時にエラーとなるので再度修正（コメントアウト）
                            If value = "-" Then
                                'For Each rws As DataRow In DSprg.Tables("T_cntrl" & dispPrgNo).Rows
                                '    If rws.Item("MACRO") = macro Then
                                '        rws.Item("DISPFLG") = "0"
                                '        rws.Item("SENDFLG") = "0"
                                '        Exit For
                                '    End If
                                'Next

                                '151006 hishiki 値が「-」になったマクロを非表示かつテキスト値を0へ（）
                                macroTLP.Visible = False 'cntrl.csvのdispflgが1で、visibleがfalseの場合は、送信時に0に変更（brotoher）または送信しない（Fanuc)
                                macroTB.Text = "0"
                            Else

                                '151118 hishiki start switch,input,correctの表示非表示対応

                                'マクロ名をcntrl.csvで検索
                                Dim tmprows As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO='" & macro & "'")
                                '見つからなかった場合で、addモードの場合はadd.csvを検索
                                If tmprows.Length = 0 Then
                                    If grpNO > 0 Then
                                        Dim tmprow0 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & grpNO & "' AND " & "DEFINE='" & macro & "'")
                                        If tmprow0.Length > 0 Then
                                            macro = tmprow0(0).Item("COPY")
                                            tmprows = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO='" & macro & "'")
                                        End If
                                    End If
                                End If

                                If tmprows.Length <> 1 Then Exit Sub

                                'cntrl.csvのdispflgを検索
                                Dim dispflg As String = tmprows(0).Item("DISPFLG")
                                If dispflg = 1 Then
                                    '対象TBへセットする値が存在する場合、TLPが非表示なら表示へ戻す(cntrl.csvのdispflgが0の場合は非表示のまま)
                                    If macroTLP.Visible = False Then
                                        macroTLP.Visible = True
                                    End If
                                End If

                                'cntrl.csvのKINDを検索
                                Dim cntrl_kind As String = tmprows(0).Item("KIND")

                                'KINDがinput系の場合、初期値設定時のみ値をセット(画面表示後、txtchangeイベントでの値変更は無い)
                                If cntrl_kind = "input" Then
                                    If macroTB.Text = "" Then
                                        macroTB.Text = value
                                    End If

                                    'input系以外の場合は、対象TBへ値をセット
                                Else
                                    macroTB.Text = value
                                End If
                                '151118 hishiki end switch,input,correctの表示非表示対応

                                'テキストボックス及びテーブルレイアウトパネルの幅を再設定
                                Dim defaultWidth As Integer = TextRenderer.MeasureText(New String("0", TxtMaxInputNum), macroTB.Font).Width '半角数字のサイズ×最大文字数でwidth設定
                                Dim wdt As Integer = TextRenderer.MeasureText(New String("0", LenB(macroTB.Text)), macroTB.Font).Width '半角のサイズ×最大文字数でwidth設定
                                If wdt > defaultWidth Then
                                    macroTB.Width = wdt
                                Else
                                    macroTB.Width = defaultWidth
                                End If

                                Dim totalWdt As Object = 0

                                'テーブルレイアウトパネル内のコントロールの幅合計算出
                                Dim tlp As TableLayoutPanel = c1(0) 'getPositionFromControlを使用するためにtlpへ変換
                                For Each c2 As Control In tlp.Controls
                                    '160316 hishiki start tlpの2列目のコントロールを足し算対象外へ
                                    'totalWdt = totalWdt + c2.Width
                                    If tlp.GetPositionFromControl(c2).Row.ToString = "0" Then
                                        totalWdt = totalWdt + c2.Width
                                    End If
                                    '160316 hishiki end
                                Next

                                'テーブルレイアウトパネルの幅を再設定
                                Dim clmnCnt As Integer = macroTLP.ColumnCount
                                macroTLP.Width = totalWdt + clmnCnt * 10
                            End If

                            '150909 hishiki 値が「-」の場合SENDFLG、DISPFLGを0へ変更 - end -

                        End If
                    End If
                End If
            End If
        Next

        txtChangeEventFlg = 1 '動的イベント無効解除 '151130 hishiki txt_changeイベントの無限ループ対応

    End Sub

    '●T_loadの設定値を基に対応するマクロの値を取得
    Private Function getValueFrmMaster(ByVal define As String, ByVal macro As String, ByVal grpNo As Integer) As String
        Dim rtnStr As String = ""
        Dim n As Integer

        '数字の場合はそのままの値使用
        If IsNumeric(define) Then
            rtnStr = define
            '「size」で始まる場合は、sizes配列の中から検索
        ElseIf define.IndexOf("size") = 0 Then

            Dim tmpNum As String
            tmpNum = define.Replace("size", "")
            If Integer.TryParse(tmpNum, n) Then
                n = Integer.Parse(tmpNum)
            Else
                n = 0
            End If

            'valueにsizes(n-1)の値を設定
            If n <= sizes.Length And n > 0 Then
                If sizes(n - 1) IsNot Nothing Then
                    rtnStr = sizes(n - 1)
                    rtnStr = searchT_ChngValue(rtnStr, define) 'T_chngValueの中を検索して、再変換（検索未ヒットならそのままの値使用）
                End If
            End If

            '「define」で始まる場合の処理
        ElseIf define.IndexOf("define") = 0 Then
            'T_defineをdefineで検索し、検索結果を降順でソート
            Dim rws() As DataRow = DSprg.Tables("T_define" & dispPrgNo).Select("DEFINE='" & define & "'", "TXTLEN DESC")
            '検索結果が見つからなかった場合何もしない
            If rws.Length = 0 Then
            Else
                Dim targetStr As String = rws(0).Item("STR")
                Dim defineChngvl As String
                Dim defineCalc As String

                'STR定義文字が「size*」の場合
                If targetStr.IndexOf("size") = 0 Then
                    Dim tmpNum As String
                    tmpNum = targetStr.Replace("size", "")
                    If Integer.TryParse(tmpNum, n) Then
                        n = Integer.Parse(tmpNum) '「size*」の*の値を取得
                    Else
                        n = 0
                    End If

                    'valueにsizes(n-1)の値を設定
                    If n <= sizes.Length And n > 0 Then
                        If sizes(n - 1) IsNot Nothing Then
                            targetStr = sizes(n - 1)
                            'rtnStr = sizes(n - 1)
                        End If

                    End If

                    'defineChngvl = rws(0).Item("CHNGVL")
                    'defineCalc = rws(0).Item("CALC")

                Else 'それ以外の場合
                    'Dim tmpStr As String() = New String(3) {}
                    'tmpStr = searchDefineFrmRows(targetStr, rws, modelSplit)
                    'rtnStr = tmpStr(0)
                    'defineChngvl = tmpStr(1)
                    'defineCalc = tmpStr(2)

                End If

                Dim tmpStr As String() = New String(3) {}
                tmpStr = searchDefineFrmRows(targetStr, rws, modelSplit)
                rtnStr = tmpStr(0)
                defineChngvl = tmpStr(1)
                defineCalc = tmpStr(2)

                rtnStr = searchT_ChngValue(rtnStr, defineChngvl) 'T_chngValueの中を検索して、再変換（検索未ヒットならそのままの値使用）
                rtnStr = searchT_calc(defineCalc, rtnStr, grpNo) 'T_calcの中を検索して、再変換（検索未ヒットならそのままの値使用）

            End If

            'それ以外の処理
        Else
            rtnStr = define
        End If

        Return rtnStr
    End Function

    '●T_type_defineを検索し、ヒットした製品のIDを返却
    Private Function searchT_type_define(ByVal modelFullName As String) As Integer
        Dim targetID As Integer = -1

        'フル受注型式を取得。
        'フル受注型式を後ろから1文字ずつ削除しながらT_loadを検索し、値を画面へ反映していく
        Dim tmpStr As String = modelFullName

        '受注型式の文字列長さ分だけループ
        For i As Integer = 0 To modelFullName.Length - 1
            Dim rw() As DataRow = DSbase.Tables("T_type_define").Select("TYPE='" & tmpStr & "'")
            If rw.Length > 0 Then

                For j As Integer = 0 To rw.Length - 1
                    Dim flg As Integer = 1
                    Dim clmnCnt As Integer = DSbase.Tables("T_type_define").Columns.Count 'type_define.csvの列数取得
                    If clmnCnt > 2 Then '列数が２より大きい場合
                        For k As Integer = 0 To clmnCnt - 1
                            Dim fieldName As String = DSbase.Tables("T_type_define").Columns(k).ToString
                            If fieldName.Contains("DEFINE") Then
                                Dim define As String = rw(j)(k)
                                'type_define.csvは、and条件のみ(orなし)
                                If define = "" Then
                                    flg = flg * 1
                                Else
                                    flg = flg * searchT_type_relation(define)
                                End If

                            End If
                        Next
                        If flg >= 1 Then 'or含む場合1以上になる可能性あり
                            targetID = Integer.Parse(rw(j).Item("NO").ToString)
                            Return targetID
                            Exit Function
                        End If
                    End If
                Next

            End If
            '検索失敗したら、末尾の１文字削除して再び検索
            tmpStr = tmpStr.Remove(tmpStr.Length - 1, 1)
        Next

        Return targetID
    End Function

    '●T_type_relationから対象行を検索し、その中からターゲット値を取得。取得したターゲット値が条件を満たすかを判定し、判定結果を返却する関数。
    Private Function searchT_type_relation(ByVal define As String) As Integer
        Dim flg As Integer = 1
        Dim judgeValue As String = ""

        'T_type_relationから、defineで定義された行を検索
        Dim rw_T_type_relation As DataRow() = DSbase.Tables("T_type_relation").Select("DEFINE=" & "'" & define & "'" & "")
        'If rw_T_type_relation.Length <> 1 Then '対象行が見つからなかった場合、flg=0を返却 
        If rw_T_type_relation.Length = 0 Then '対象行が見つからなかった場合、flg=0を返却 150901条件ミスのため修正
            flg = 0
            Return flg
            Exit Function
        End If

        'T_type_relationの「STR」で定義された文字列から始まる文字を分割文字列の中から検索し、「BEFORE」の文字を「AFTER」に変換した後の値を取得
        Dim targetStr As String = rw_T_type_relation(0).Item("STR")
        Dim defChngvl As String = rw_T_type_relation(0).Item("CHNGVL")

        '「size」で始まる場合は、sizes配列の中から検索
        If targetStr.IndexOf("size") = 0 Then
            Dim tmpNum As String
            Dim n As Integer
            tmpNum = targetStr.Replace("size", "")
            If Integer.TryParse(tmpNum, n) Then
                n = Integer.Parse(tmpNum)
            Else
                n = 0
            End If

            'valueにsizes(n-1)の値を設定
            If n <= sizes.Length And n > 0 Then
                If sizes(n - 1) IsNot Nothing Then
                    judgeValue = sizes(n - 1)
                    Dim strBefore As String = rw_T_type_relation(0).Item("BEFORE")
                    Dim strAfter As String = rw_T_type_relation(0).Item("AFTER")
                    If strBefore.Length > 0 Then
                        judgeValue = judgeValue.Replace(strBefore, strAfter)
                    End If
                    judgeValue = searchT_type_chngvl(defChngvl, judgeValue)
                End If
            End If

            '「define」で始まる場合の処理
        Else
            Dim tmpStr As String() = New String(3) {}
            tmpStr = searchDefineFrmRows(targetStr, rw_T_type_relation, modelSplit)
            judgeValue = tmpStr(0)
            judgeValue = searchT_type_chngvl(defChngvl, judgeValue)
        End If

        Dim i As Integer = 5 '条件の検索は6列目から

        '取得したtargetValueが、条件式の条件を満たすかをチェック。
        Do While i < DSbase.Tables("T_type_relation").Columns.Count - 1

            '条件式の列数(type_relation.csvの6列目から1カウント）が3の倍数ではなかった場合対応
            Dim chk As Integer = 1
            Dim columnCnt As Integer = DSbase.Tables("T_type_relation").Columns.Count
            If columnCnt - 1 < i + 2 Then
                chk = 0
            End If

            If chk = 1 Then
                Dim condition As String = rw_T_type_relation(0)(i) '条件 and orの2種類(空白の場合andとみなす)　
                If condition = "" Then
                    condition = "and"
                End If
                Dim calc As String = rw_T_type_relation(0)(i + 1) '条件式（=,<,>,<=,>=の5種類）
                Dim value As String = rw_T_type_relation(0)(i + 2) '条件に使用するマクロの値（条件値）

                If calc <> "" Then

                    '条件値が*（ワイルドカード）や空白の場合は、どんな値でもOKの意味
                    If value = "*" Or value = "" Then
                        If condition = "and" Then '150127 hishiki orの場合のバグ修正
                            flg = flg * 1
                        Else '150127 hishiki orの場合のバグ修正
                            flg = flg + 1
                        End If

                    Else
                        'flg = flg * judgeRelation(flg, judgeValue, calc, value, condition)
                        flg = judgeRelation(flg, judgeValue, calc, value, condition) '150127 hishiki 「or」の場合のバグ修正
                    End If
                End If

            End If

            i = i + 3 '3列で1セット（1列目：条件　2列目：式　3列目：条件値）
        Loop

        Return flg
    End Function

    '●指定の文字列に対して、type_chngvl内で「BEFORE」で定義された値を「AFTER」に変換して返却するメソッド
    Private Function searchT_type_chngvl(ByVal define As String, ByVal targetStr As String) As String
        Dim rtnStr As String = targetStr
        'T_type_chngvlから、defineで定義された行を検索
        Dim rw_T_type_chngvl As DataRow() = DSbase.Tables("T_type_chngvl").Select("DEFINE=" & "'" & define & "'" & "")
        If rw_T_type_chngvl.Length = 0 Then '対象行が見つからなかった場合、flg=0を返却
            Return rtnStr
            Exit Function
        End If

        'T_type_chngvlのdefineで定義された行に対して、検索
        For Each rw As DataRow In rw_T_type_chngvl
            Dim beforeStr As String = rw.Item("BEFORE")
            Dim afterStr As String = rw.Item("AFTER")
            If targetStr.Contains(beforeStr) Then
                targetStr = targetStr.Replace(beforeStr, afterStr)
                rtnStr = targetStr
                Return rtnStr
                Exit Function
            End If

        Next

        Return rtnStr
    End Function


    '●引数の条件に対して判定を行い、結果を返却する関数
    Private Function judgeRelation(ByVal flg As Integer, ByVal targetValue As String, ByVal calc As String, ByVal value As String, ByVal condition As String) As Integer
        '式の形式により場合分け
        '条件が「and」の場合
        '　一致する場合、flgに1を掛ける
        '　一致しない場合flgに0を掛ける
        '条件が「and」以外の場合（条件が「or」の場合）
        '　一致する場合、flgに1を足す
        '　一致しない場合flgに0を足す

        '180808 hishiki start
        Dim n As Decimal
        Dim target As Decimal
        Dim val As Decimal
        If Decimal.TryParse(targetValue, n) Then
            target = Decimal.Parse(targetValue)
        Else
            Return 0
            Exit Function
        End If

        If Decimal.TryParse(value, n) Then
            val = Decimal.Parse(value)
        Else
            Return 0
            Exit Function
        End If

        'Dim n As Double
        'Dim target As Double
        'Dim val As Double
        'If Double.TryParse(targetValue, n) Then
        '    target = Double.Parse(targetValue)
        'Else
        '    Return 0
        '    Exit Function
        'End If

        'If Double.TryParse(value, n) Then
        '    val = Double.Parse(value)
        'Else
        '    Return 0
        '    Exit Function
        'End If
        '180808 hishiki end

        Select Case calc
            Case "="
                If target = val Then
                    If condition = "and" Then
                        flg = flg * 1
                    Else
                        flg = flg + 1
                    End If
                Else
                    If condition = "and" Then
                        flg = flg * 0
                    Else
                        flg = flg + 0
                    End If
                End If

            Case "<>"
                If target <> val Then
                    If condition = "and" Then
                        flg = flg * 1
                    Else
                        flg = flg + 1
                    End If
                Else
                    If condition = "and" Then
                        flg = flg * 0
                    Else
                        flg = flg + 0
                    End If
                End If

            Case "<"
                If target < val Then
                    If condition = "and" Then
                        flg = flg * 1
                    Else
                        flg = flg + 1
                    End If
                Else
                    If condition = "and" Then
                        flg = flg * 0
                    Else
                        flg = flg + 0
                    End If
                End If

            Case ">"
                If target > val Then
                    If condition = "and" Then
                        flg = flg * 1
                    Else
                        flg = flg + 1
                    End If
                Else
                    If condition = "and" Then
                        flg = flg * 0
                    Else
                        flg = flg + 0
                    End If
                End If

            Case ">="
                If target >= val Then
                    If condition = "and" Then
                        flg = flg * 1
                    Else
                        flg = flg + 1
                    End If
                Else
                    If condition = "and" Then
                        flg = flg * 0
                    Else
                        flg = flg + 0
                    End If
                End If

            Case "<="
                If target <= val Then
                    If condition = "and" Then
                        flg = flg * 1
                    Else
                        flg = flg + 1
                    End If
                Else
                    If condition = "and" Then
                        flg = flg * 0
                    Else
                        flg = flg + 0
                    End If
                End If

            Case Else '指定したフォーマット以外の文字の場合はフラグを0に設定
                flg = flg * 0

        End Select

        Return flg
    End Function

    '151113 hishiki relation.csvの条件に設定された定義から数値を取得
    Private Function setValueForRelationCondition(ByVal str As String, ByVal grpNo As Integer)
        Dim rtnValue As String = ""

        'value1がマクロの場合（#を含んでいる場合）
        If str.Contains("#") Then

            'addモードの場合、strのマクロ名はコピー元マクロ名の場合がある。その場合は、add.csvからターゲットマクロ名を取得しstrへ設定する。
            If grpNo > 0 Then
                Dim copymacro As String = ""
                'T_addから対象グループの行抽出
                Dim tmprows0 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & grpNo & "' AND " & "COPY='" & str & "'")
                If tmprows0.Length = 1 Then
                    'マクロ名をT_addの「DEFINE」で登録されたもので登録
                    str = tmprows0(0).Item("DEFINE")
                End If

            End If

            Dim c As Control() = FlowLayoutPanel1.Controls.Find("TB" & str, True)
            '条件用テキストボックスが見つからない、あるいは複数見つかった場合はエラーのため処理終了
            If c.Length <> 1 Then
                Return rtnValue
                Exit Function
            End If
            Dim macro As TextBox = CType(c(0), TextBox) '条件に使用するコントロール
            rtnValue = macro.Text

        ElseIf str.Contains("size") Then
            Dim tmpNum As String
            Dim n As Integer
            tmpNum = str.Replace("size", "")
            If Integer.TryParse(tmpNum, n) Then
                n = Integer.Parse(tmpNum)
            Else
                n = 0
            End If

            'valueにsizes(n-1)の値を設定
            If n <= sizes.Length And n > 0 Then
                If sizes(n - 1) IsNot Nothing Then
                    rtnValue = sizes(n - 1)
                End If
            End If

        ElseIf IsNumeric(str) Then
            rtnValue = str

        End If

        Return rtnValue


    End Function

    '151113 hishiki searchT_relation全体修正（条件がsize＊でも対応可能とした）
    Private Function searchT_relation(ByVal define As String, ByVal grpNO As Integer) As String

        Dim rtnValue As String = ""

        Dim rw_relation As DataRow() = DSprg.Tables("T_relation" & dispPrgNo).Select("DEFINE=" & "'" & define & "'" & "")
        If rw_relation.Length < 1 Then
            Return rtnValue
            Exit Function
        End If

        Dim i As Integer = 2 '条件の検索は3列目から

        For Each row As DataRow In rw_relation
            'T_relationの条件式にヒットしたかを判定するためのフラグ　1:ヒット　0：ヒットしない
            Dim flg As Integer = 1 'デフォルトを1で設定
            '1行目の列数分だ4列ずつループ
            Do While i < DSprg.Tables("T_relation" & dispPrgNo).Columns.Count - 1

                '条件式の列数(relation.csvの3列目から1カウント）が4の倍数ではなかった場合対応
                Dim chk As Integer = 1
                Dim columnCnt As Integer = DSprg.Tables("T_relation" & dispPrgNo).Columns.Count
                If columnCnt - 1 < i + 3 Then
                    chk = 0
                End If
                '
                If chk = 1 Then

                    '条件式の例
                    'and #503 >= 1
                    '「and」:row(i)　　　→condition
                    '「#503」:row(i+1)   →value1
                    '「>=」:row(i+2)     →calc
                    '「1」:row(i+3)      →value2

                    Dim condition As String = row(i) '条件 and orの2種類(空白の場合andとみなす)　
                    If condition = "" Then
                        condition = "and"
                    End If
                    Dim value1 As String = row(i + 1) '条件値１
                    Dim calc As String = row(i + 2) '条件式（=,<,>,<=,>=,<>の6種類）
                    Dim value2 As String = row(i + 3) '条件値2

                    'calcに何も値がない場合は、処理をスルー
                    If calc <> "" Then

                        '●conditionを確認
                        If condition = "and" Or condition = "or" Then
                        Else 'conditionがandでもorでも無い場合はエラーとみなして""を返却
                            Return rtnValue
                            Exit Function
                        End If

                        '160209 hishiki start 昔のマスタで動かないケースがあったのでvalue2がワイルドカード時の処理を元に戻した。
                        '条件値2が*（ワイルドカード）や空白の場合は、どんな値でもOKの意味で、無条件で適合とする
                        If value2 = "*" Or value2 = "" Then
                            If condition = "and" Then
                                flg = flg * 1
                            Else
                                flg = flg + 1
                            End If
                        Else
                            '●value1の値を設定(画面上のテキストボックスの値）
                            value1 = setValueForRelationCondition(value1, grpNO)

                            '●value2の値を設定
                            value2 = setValueForRelationCondition(value2, grpNO)

                            '式の形式により場合分け
                            '条件が「and」の場合
                            '　一致する場合、flgに1を掛ける
                            '　一致しない場合flgに0を掛ける
                            '条件が「and」以外の場合（条件が「or」の場合）
                            '　一致する場合、flgに1を足す
                            '　一致しない場合flgに0を足す
                            flg = judgeRelation(flg, value1, calc, value2, condition) '150127 hishiki orの場合のバグ修正
                        End If

                        ''●value1の値を設定
                        'value1 = setValueForRelationCondition(value1, grpNO)
                        ''value1が数値では無い場合エラーのため処理終了
                        'If IsNumeric(value1) = False Then
                        '    Return rtnValue
                        '    Exit Function
                        'End If

                        ''●value2の値を設定
                        'value2 = setValueForRelationCondition(value2, grpNO)
                        ''value2が数値では無い場合エラーのため処理終了
                        'If IsNumeric(value2) = False Then
                        '    Return rtnValue
                        '    Exit Function
                        'End If

                        '式の形式により場合分け
                        '条件が「and」の場合
                        '　一致する場合、flgに1を掛ける
                        '　一致しない場合flgに0を掛ける
                        '条件が「and」以外の場合（条件が「or」の場合）
                        '　一致する場合、flgに1を足す
                        '　一致しない場合flgに0を足す
                        'flg = judgeRelation(flg, value1, calc, value2, condition) '150127 hishiki orの場合のバグ修正

                        '160209 hishiki end

                    End If
                End If
                i = i + 4 '4列で1セット（1列目：条件　2列目：式　3列目：マクロ　3列目：条件値）
            Loop

            '1行分の条件式をすべて満たした場合、rtnvalueをセットして返却
            If flg > 0 Then
                Dim value As String = row.Item("VALUE")

                If value.IndexOf("calc") = 0 Then
                    value = searchT_calc(value, "", grpNO)
                End If
                rtnValue = value
                Exit For

                '条件式を満たさなかった場合、次の条件式をチェック
            Else
                '検索位置を戻す
                i = 2

            End If
        Next
        Return rtnValue

    End Function


    '●T_relationの値を検索して対象テキストに値を設定する関数 bk 151113 hishiki
    'Private Function searchT_relation(ByVal define As String, ByVal grpNO As Integer) As String

    '    Dim rtnValue As String = ""
    '    Dim rw_relation As DataRow() = DSprg.Tables("T_relation" & dispPrgNo).Select("DEFINE=" & "'" & define & "'" & "")
    '    If rw_relation.Length < 1 Then
    '        Return rtnValue
    '        Exit Function
    '    End If

    '    Dim i As Integer = 2 '条件の検索は3列目から

    '    For Each row As DataRow In rw_relation
    '        'T_relationの条件式にヒットしたかを判定するためのフラグ　1:ヒット　0：ヒットしない
    '        Dim flg As Integer = 1 'デフォルトを1で設定
    '        '1行目の列数分だ4列ずつループ
    '        Do While i < DSprg.Tables("T_relation" & dispPrgNo).Columns.Count - 1

    '            '条件式の列数(relation.csvの3列目から1カウント）が4の倍数ではなかった場合対応
    '            Dim chk As Integer = 1
    '            Dim columnCnt As Integer = DSprg.Tables("T_relation" & dispPrgNo).Columns.Count
    '            If columnCnt - 1 < i + 3 Then
    '                chk = 0
    '            End If
    '            '
    '            If chk = 1 Then
    '                Dim condition As String = row(i) '条件 and orの2種類(空白の場合andとみなす)　
    '                If condition = "" Then
    '                    condition = "and"
    '                End If

    '                Dim macroName As String = row(i + 1) '条件に使用するマクロ名
    '                'addモードの場合の処理
    '                If grpNO > 0 Then
    '                    Dim copymacro As String = ""
    '                    'T_addから対象グループの行抽出
    '                    Dim tmprows0 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & grpNO & "' AND " & "COPY='" & macroName & "'")
    '                    Dim targetMacro As String = ""
    '                    If tmprows0.Length <> 0 Then
    '                        targetMacro = tmprows0(0).Item("DEFINE")
    '                    End If

    '                    'マクロ名をT_addの「DEFINE」で登録されたもので登録
    '                    If targetMacro <> "" Then
    '                        macroName = targetMacro
    '                    End If
    '                End If

    '                Dim calc As String = row(i + 2) '条件式（=,<,>,<=,>=の5種類）
    '                Dim value As String = row(i + 3) '条件に使用する値

    '                If calc <> "" Then
    '                    '条件用テキストボックスコントロールを検索
    '                    Dim c As Control() = FlowLayoutPanel1.Controls.Find("TB" & macroName, True)
    '                    '条件用テキストボックスが見つからない、あるいは複数見つかった場合はエラーのため処理終了
    '                    If c.Length <> 1 Then
    '                        Return rtnValue
    '                        Exit Function
    '                    End If
    '                    Dim macro As TextBox = CType(c(0), TextBox) '条件に使用するコントロール

    '                    '条件値が*（ワイルドカード）や空白の場合は、どんな値でもOKの意味
    '                    If value = "*" Or value = "" Then
    '                        flg = flg * 1
    '                    Else
    '                        '141226　比較対象がマクロの値の場合の条件追加hishiki
    '                        If value.StartsWith("#") Then

    '                            'addモードの場合の処理
    '                            If grpNO > 0 Then
    '                                Dim copymacro As String = ""
    '                                'T_addから対象グループの行抽出
    '                                Dim tmprows0 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & grpNO & "' AND " & "COPY='" & value & "'")
    '                                Dim targetMacro As String = ""
    '                                If tmprows0.Length <> 0 Then
    '                                    targetMacro = tmprows0(0).Item("DEFINE")
    '                                End If

    '                                'マクロ名をT_addの「DEFINE」で登録されたもので登録
    '                                If targetMacro <> "" Then
    '                                    value = targetMacro
    '                                End If
    '                            End If

    '                            '条件用テキストボックスコントロールを検索
    '                            c = FlowLayoutPanel1.Controls.Find("TB" & value, True)
    '                            '条件用テキストボックスが見つからない、あるいは複数見つかった場合はエラーのため処理終了
    '                            If c.Length <> 1 Then
    '                                Return rtnValue
    '                                Exit Function
    '                            End If
    '                            value = c(0).Text
    '                        End If

    '                        '式の形式により場合分け
    '                        '条件が「and」の場合
    '                        '　一致する場合、flgに1を掛ける
    '                        '　一致しない場合flgに0を掛ける
    '                        '条件が「and」以外の場合（条件が「or」の場合）
    '                        '　一致する場合、flgに1を足す
    '                        '　一致しない場合flgに0を足す
    '                        flg = judgeRelation(flg, macro.Text, calc, value, condition) '150127 hishiki orの場合のバグ修正
    '                        'flg = flg * judgeRelation(flg, macro.Text, calc, value, condition)

    '                    End If
    '                End If

    '            End If

    '            i = i + 4 '4列で1セット（1列目：条件　2列目：式　3列目：マクロ　3列目：条件値）
    '        Loop


    '        '1行分の条件式をすべて満たした場合、対象テキストに、2列目の値を設定
    '        If flg > 0 Then
    '            Dim value As String = row.Item("VALUE")
    '            If value.IndexOf("calc") = 0 Then
    '                value = searchT_calc(value, "", grpNO)
    '            End If
    '            rtnValue = value
    '            Exit For
    '        Else
    '            '検索位置を戻す
    '            i = 2

    '        End If
    '    Next
    '    Return rtnValue

    'End Function

    '●T_calcから対象式を検索して、計算結果を対象テキストに設定する関数。エラーの場合""を返却
    Private Function searchT_calc(ByVal define As String, ByVal defValue As String, ByVal grpNo As String) As Object

        Dim result As Object = defValue
        Dim calc As String = ""

        Dim rw_calc As DataRow() = DSprg.Tables("T_calc" & dispPrgNo).Select("DEFINE=" & "'" & define & "'" & "")
        If rw_calc.Length <> 1 Then
            Return result
            Exit Function
        End If

        'T_calcを1列ごと読込み、数式（文字列）を作成。
        For i As Integer = 1 To DSprg.Tables("T_calc" & dispPrgNo).Columns.Count - 1
            Dim str As String = rw_calc(0)(i)

            '「#」が含まれる場合（マクロ指定の場合）
            If str.Contains("#") Then

                Dim macro As String
                If str.IndexOf("#") = 0 Then 'strがマクロ名だけの場合
                    macro = str
                Else 'strの中に、math.csvで定義された計算式が含まれる場合

                    If str.Contains("(") And str.Contains(")") Then
                        Dim s As Integer = str.IndexOf("(")
                        Dim f As Integer = str.IndexOf(")")
                        macro = str.Substring(s + 1, f - s - 1) 'マクロ名抽出
                    Else
                        Dim s As Integer = str.IndexOf("#")
                        macro = str.Substring(s, str.Length - s) 'マクロ名抽出
                    End If

                End If

                'addモードの場合の処理
                Dim targetMacro As String = ""
                If grpNo > 0 Then
                    Dim tmprow0 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("GRP='" & grpNo & "' AND " & "COPY='" & macro & "'")
                    If tmprow0.Length > 0 Then
                        targetMacro = tmprow0(0).Item("DEFINE")
                    End If
                End If

                'マクロ名をT_addの「DEFINE」で登録されたもので登録
                If targetMacro <> "" Then
                    macro = targetMacro
                End If

                '条件用テキストボックスコントロールを検索
                Dim c As Control() = FlowLayoutPanel1.Controls.Find("TB" & macro, True)
                '条件用テキストボックスが見つからない、あるいは複数見つかった場合はエラー
                If c.Length <> 1 Then Exit For

                Dim TBvalue As String = CType(c(0), TextBox).Text '指定マクロのテキスト値を抽出

                Dim math As String = chkMath(str) '数式を抽出
                '180808 hishiki start
                'Dim value As Double
                Dim value As Decimal
                '180808 hishiki end

                '数式が存在する場合、計算結果をstrに反映
                If math <> "" Then
                    '180808 hishiki start
                    value = Decimal.Parse(TBvalue)
                    'value = Double.Parse(TBvalue)
                    '180808 hishiki end
                    value = getCalcMathResult(math, value)
                    str = value.ToString
                Else
                    str = TBvalue
                End If


            Else 'マクロ名が無い場合

                Dim math As String = chkMath(str)
                Dim value As Double
                '文字列内に定義defineが入力されていた場合は、引数で取得した値を使用
                If str.Contains(define) Then
                    'If str.Contains(define) And defValue <> "" And IsNumeric(defValue) Then
                    If defValue <> "" Then
                        If IsNumeric(defValue) Then
                            If math <> "" Then
                                '180808 hishiki start
                                value = Decimal.Parse(defValue) '引数の値をdoubleへ変換
                                'value = Double.Parse(defValue) '引数の値をdoubleへ変換
                                '180808 hishiki end
                                value = getCalcMathResult(math, value) '計算式と引数の値から、計算結果を取得
                            Else
                                '180808 hishiki start
                                value = Decimal.Parse(defValue) '引数の値をdoubleへ変換
                                'value = Double.Parse(defValue) '引数の値をdoubleへ変換
                                '180808 hishiki end
                            End If
                            str = value.ToString

                        Else 'defValueが数値ではない場合エラー。そのままの値を返却する。（画面で赤字表示される）
                            result = defValue
                            Return result
                            Exit Function

                        End If

                    Else 'defValueが空白の場合、空白を返却する。
                        result = ""
                        Return result
                        Exit Function

                    End If

                    '20150105 hishiki　calc.csvの定義の中にcalcの定義が使用できるように変更
                ElseIf str.Contains("calc") Then
                    'strの文字からcalc.csvの定義に当てはまる部分を検索し、その部分を計算してstrへ反映
                    For Each rw As DataRow In DSprg.Tables("T_calc" & dispPrgNo).Rows
                        Dim tmpStr As String = rw.Item("DEFINE")
                        If str.Contains(tmpStr) Then
                            Dim tmpValue As String = searchT_calc(tmpStr, "", grpNo)
                            str = str.Replace(tmpStr, tmpValue)

                            '数式が存在する場合、計算結果をstrに反映
                            If math <> "" Then
                                '180808 hishiki start
                                value = Decimal.Parse(tmpValue)
                                'value = Double.Parse(tmpValue)
                                '180808 hishiki end
                                value = getCalcMathResult(math, value)
                                str = value.ToString
                            End If
                            Exit For
                        End If
                    Next

                Else
                    If math <> "" Then
                        Dim chk As Boolean = IsContainNum(str)
                        If chk = True Then
                            value = getNumericValue(str) '文字列内から数値を取り出し
                            value = getCalcMathResult(math, value) '計算式と取り出した数値から、計算結果を取得
                            str = value.ToString
                        End If

                    End If
                End If

            End If

            calc = calc & str
        Next

        '文字列に「=」が含まれているとエラーとなるため取り除く
        If calc.Contains("=") Then
            calc = calc.Replace("=", "")
        End If

        result = getCalcResult(calc)

        Return result
    End Function

    '●header.csvからdelの定義を検索。ヒットした場合型式から対象文字を除外し、除外後の型式を返却する関数
    Private Function searchT_headerDel(ByVal typeName As String) As String

        '引数で取得した品目名から分割文字列作成
        Dim array As String() = Split(typeName, "-")
        Dim rtnStr As String = ""

        Dim tmprow1 As DataRow() = DSbase.Tables("T_header").Select("DEFINE = '" & array(0) & "' and KIND='del'")

        '読み込んだ型式の最初の分割文字列が削除対象ではなかった場合、読み込んだ型式をそのまま返却
        If tmprow1.Length = 0 Then
            rtnStr = typeName

            '読み込んだ型式の最初の分割文字列が削除対象の場合、削除対象文字と「-」を削除した型式を返却
        Else
            rtnStr = typeName.Remove(0, array(0).Length + 1) '削除対象文字 + 「-」を削除
        End If


        ''delで定義された文字を除外した後の分割文字列格納用配列
        'Dim tmpArray As String()
        'Dim cnt As Integer = 0
        'ReDim tmpArray(cnt)

        ''分割文字列を1つずつ検索し、header.csvにおいてdelで定義されていない文字をtmpArrayへ格納
        'For i As Integer = 0 To UBound(array)
        '    Dim tmprow1 As DataRow() = DSbase.Tables("T_header").Select("DEFINE = '" & array(i) & "' and KIND='del'")
        '    If tmprow1.Length = 0 Then
        '        ReDim Preserve tmpArray(cnt)
        '        tmpArray(cnt) = array(i)

        '        cnt = cnt + 1
        '    End If
        'Next

        ''tmpArrayを利用して、対象文字を除外した品目名作成
        'rtnStr = tmpArray(0) & "-"
        'For j As Integer = 1 To UBound(tmpArray)
        '    rtnStr = rtnStr & tmpArray(j) & "-"
        'Next
        'If rtnStr.Substring(rtnStr.Length - 1) = "-" Then
        '    rtnStr = rtnStr.Remove(rtnStr.Length - 1) '末尾に「-」があった場合、削除
        'End If

        '編集後の品目名を返却
        Return rtnStr

    End Function

    '●header.csvからaddの定義を検索。ヒットした場合、分割文字列の編集を行う。
    '（例１）G-AAA-B7の場合
    '分割後はG、AAA、B7が配列に格納される。
    'Gがaddで設定されている場合本メソッド実行後は
    'G-AAA、""、B7の配列が返却される
    Private Function searchT_headerAdd(ByVal array As String()) As String()
        Dim rtnValue As String()
        ReDim rtnValue(UBound(array))

        'header.csvに定義がなかった場合、分割文字列をそのまま返却
        rtnValue = array

        'header.csvに定義があった場合、分割文字列を編集
        Dim tmprow1 As DataRow() = DSbase.Tables("T_header").Select("DEFINE = '" & array(0) & "' and KIND='add'")
        If tmprow1.Length > 0 Then
            rtnValue(0) = rtnValue(0) & "-" & rtnValue(1) '分割文字列の1文字目と2文字目を結合して分割文字列1文字目に設定
            rtnValue(1) = "" '分割文字列2文字目を空白に設定
        End If

        Return rtnValue

    End Function

    '●図面描画する関数
    Private Sub setDrawing(ByVal filePath As String)
        '描画先とするImageオブジェクトを作成する
        'Dim Lcanvas As New Bitmap(480, 300)
        Dim Lcanvas As New Bitmap(PctrWidth, PctrHeight)

        'ImageオブジェクトのGraphicsオブジェクトを作成する
        Try
            Dim g As Graphics = Graphics.FromImage(Lcanvas)
            Dim Limg As Image = Image.FromFile(filePath)

            g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor
            g.DrawImage(Limg, 0, 0, Limg.Width, Limg.Height)
            'Imageオブジェクトのリソースを解放する
            Limg.Dispose()
            'Graphicsオブジェクトのリソースを解放する
            g.Dispose()
            If Not (PctrBx.Image Is Nothing) Then
                PctrBx.Image.Dispose()
                PctrBx.Image = Nothing
            End If
            PctrBx.Image = Lcanvas
        Catch ex As Exception 'エラー発生したら何もしない
            Logger.Warn("err9")
            Logger.Warn("type=" & TB_Model.Text)
            Logger.Warn(ex.ToString)
        End Try

    End Sub

    '●引数で受け取った「行」から定義を検索し、設定に応じて値を変換する関数
    Private Function searchDefineFrmRows(ByVal targetStr As String, ByVal rws As DataRow(), ByVal array As String()) As String()

        '141226　hishiki　rtnvalueをstringからstring(3)へ変更
        '返却文字列
        '0:変換後文字列
        '1:CHNGVLの定義名
        '2:CALCの定義名
        Dim rtnValue As String() = New String(3) {}
        rtnValue(0) = ""
        rtnValue(1) = ""
        rtnValue(2) = ""

        Dim strBefore As String = ""
        Dim strAfter As String = ""
        Dim tmpStrBefore As String = ""
        Dim tmpStrAfter As String = ""

        For Each rw As DataRow In rws
            strBefore = rw.Item("BEFORE")
            strAfter = rw.Item("AFTER")

            rtnValue(1) = rw.Item("CHNGVL")

            Dim tblname As String = rw.Table.TableName
            If tblname = "T_type_relation" Then
                rtnValue(2) = ""
            Else
                rtnValue(2) = rw.Item("CALC")
            End If

            'strBeforeが「"-"」で定義されていた場合、tmpStrBefore,tmpStrAfterに値を設定
            '（分割文字列の中にtargetStrで定義された文字列が見つからず、かつ、値を表示する場合は、BEFOREに「-」、AFTERに設定したい値を設定しておく）
            If strBefore = "-" Then
                tmpStrBefore = strBefore
                If strAfter = "" Then
                    tmpStrAfter = targetStr
                Else

                    tmpStrAfter = strAfter
                End If

            End If

            For i As Integer = 0 To UBound(array)
                '「STR」で定義した文字で始まる文字の場合
                If array(i).IndexOf(targetStr) = 0 And targetStr <> "" Then
                    If array(i).Contains(strBefore) Then
                        If strBefore = "" Then
                            rtnValue(0) = array(i) 'strBeforeが空白の場合そのままの値を返却
                        Else
                            rtnValue(0) = array(i).Replace(strBefore, strAfter) 'strBeforeをstrAfterに変更した値を返却
                        End If

                        If IsNumeric(rtnValue(0)(0)) Then '150131 hishiki 変換後の文字列の最初の文字が数字だったら処理を抜ける
                            Return rtnValue
                            Exit Function
                        Else
                            rtnValue(0) = "" '変換後の文字列の最初の文字が数字ではない場合、返却値ではないため元に戻す
                        End If
                    End If
                End If
            Next
        Next

        'tmpStrBeforeに「"-"」が設定され、かつrtnValueに値が設定されていない場合、tmpStrAfterを返却
        '（分割文字列の中にtargetStrで定義された文字列が見つからず、かつ、値を表示する場合は、BEFOREに「-」、AFTERに設定したい値を設定しておく）
        If tmpStrBefore = "-" And rtnValue(0) = "" Then
            rtnValue(0) = tmpStrAfter
        End If

        Return rtnValue

    End Function

    '●T_chngvalueから定義を検索し、設定に応じて値を変換する関数
    Function searchT_ChngValue(ByVal value As String, ByVal define As String) As String
        Dim rtnValue As String = value

        'T_ChngValueをdefineで検索
        Dim rws() As DataRow = DSprg.Tables("T_ChngValue" & dispPrgNo).Select("DEFINE='" & define & "'", "TXTLEN")
        '検索結果が見つからなかった場合
        If rws.Length = 0 Then
            Return rtnValue
            Exit Function
        End If

        For Each rw As DataRow In rws
            Dim strBefore As String = rw.Item("BEFORE")
            Dim strAfter As String = rw.Item("AFTER")
            '文字列の中に「BEFORE」で定義された文字が存在した場合
            If value.Contains(strBefore) And strBefore <> "" Then
                rtnValue = value.Replace(strBefore, strAfter)
                Exit For
            End If
        Next

        '未変換の場合は、引数をそのまま返却
        Return rtnValue

    End Function

    '●
    Private Function chkSendMacro(ByVal macroName As String) As String

        Dim value As String = "" '対象テキストボックスのデータ

        Dim c As Control() = FlowLayoutPanel1.Controls.Find("TB" & macroName, True)
        '対象TextBoxが１つだけ見つかった場合
        If c.Length = 1 Then
            value = CType(c(0), TextBox).Text 'テキストボックスの値を返却値にセット

            'テキストの値が空白であったり、テキストボックスの背景色が赤の場合、返却値に「err」をセット
            If c(0).Text = "" Or c(0).BackColor = Color.Red Then
                value = "err"
            Else

                '151118 hishiki start　switch,input,correctの表示非表示対応
                Dim relationDispflg As String = "1"
                '対象TBが非表示の場合、relationDispflgを検索しセットする。
                If c(0).Visible = False Then
                    Dim rw_rel As DataRow() = relationDispflgValueTable.Select("MACRO='" & macroName & "'")
                    If rw_rel.Length = 1 Then
                        relationDispflg = rw_rel(0).Item("VALUE")
                    End If
                End If

                'relationDispflg = -1 の場合、値を0に変更して送信
                If relationDispflg = "-1" Then
                    value = 0

                    'relationDispflgが１または０の場合は、テキストに設定された値を送信
                    '151118 hishiki end　switch,input,correctの表示非表示対応
                Else

                    '150928 hishiki 各マクロへ上限値下限値設定 start

                    Dim rw_cntrl As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO='" & macroName & "'")
                    'cntrl.csvに対象マクロの情報があるか検索。
                    If rw_cntrl.Length <> 1 Then

                        '151118 hishiki start
                        'cntrl.csvにデータがない場合、add.csvを検索する。
                        Dim rw_add As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("DEFINE='" & macroName & "'")
                        If rw_add.Length = 1 Then
                            'add.csvにデータがある場合（addモード）、対象マクロのコピー元のデータを利用する。
                            Dim macro As String = rw_add(0).Item("COPY").ToString
                            rw_cntrl = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO='" & macro & "'")
                            If rw_cntrl.Length <> 1 Then
                                value = "err"
                            End If

                            'cntrl.csvにもadd.csvにもデータがない場合はエラーとする。
                        Else
                            value = "err"
                        End If
                        '151118 hishiki end

                    End If

                    Dim maxValue As Integer = 0
                    Dim minValue As Integer = 0
                    'T_cntrlの中にMAX,MINのフィールドが存在し、MIN,MAXに下限上限が設定されていた場合、値が制限値の範囲内かチェック実行
                    If DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("MAX") And _
                        DSprg.Tables("T_cntrl" & dispPrgNo).Columns.Contains("MIN") Then

                        If IsDBNull(rw_cntrl(0).Item("MAX")) = False And IsDBNull(rw_cntrl(0).Item("MIN")) = False Then '文字化け時に空白ではなく、NULLが設定されるため条件追加

                            'MAX,MIN両方に設定があった場合
                            If IsNumeric(rw_cntrl(0).Item("MAX")) And IsNumeric(rw_cntrl(0).Item("MIN")) Then

                                maxValue = rw_cntrl(0).Item("MAX") 'MAXに値設定の場合、MAXの値を表示
                                minValue = rw_cntrl(0).Item("MIN") 'MINに値設定の場合、MINの値を表示

                                '値が範囲内なら、何もしない
                                If minValue <= value And value <= maxValue Then
                                    '値が範囲外の場合、エラー表示し、対象コントロールのテキストのバックカラーを赤にする
                                Else
                                    value = "err"
                                End If

                                'MINのみ設定があった場合
                            ElseIf rw_cntrl(0).Item("MAX") = "" And IsNumeric(rw_cntrl(0).Item("MIN")) Then
                                minValue = rw_cntrl(0).Item("MIN") 'MINに値設定の場合、MINの値を表示

                                '値が範囲外の場合、エラー表示し、対象コントロールのテキストのバックカラーを赤にする
                                If minValue > value Then
                                    value = "err"
                                End If


                                'MAXのみ設定があった場合
                            ElseIf IsNumeric(rw_cntrl(0).Item("MAX")) And rw_cntrl(0).Item("MIN") = "" Then
                                maxValue = rw_cntrl(0).Item("MAX") 'MAXに値設定の場合、MAXの値を表示

                                '値が範囲外の場合、エラー表示し、対象コントロールのテキストのバックカラーを赤にする
                                If maxValue < value Then
                                    value = "err"
                                End If

                                'MIN,MAXともに未設定の場合は何もしない
                            Else

                            End If
                        End If
                    End If
                    '150928 hishiki 各マクロへ上限値下限値設定 end

                End If

            End If

        Else '対象TextBoxが見つからなかった場合、返却値に「nothing」をセットする。
            value = "nothing"
        End If

        If value = "err" Then
            c(0).BackColor = Color.Red
        End If

        Return value

    End Function

    '●NC機送信用テキスト作成関数(レックスロス用)
    Private Sub makeSendTxt_rex()
        Dim errflg As Integer = 0
        Dim macroName As String
        Dim parameter As String
        Dim datatype As String
        Dim Output As String = ""   '出力データ
        Dim value As String = "" '対象テキストボックスのデータ
        errLabel = New Label

        'T_cntrl_rexを基にFlowLayoutPanel1へコントロール配置
        For Each rw As DataRow In DSprg.Tables("T_cntrl_rex" & dispPrgNo).Rows
            parameter = rw.Item("PARAMETER")
            datatype = rw.Item("DATATYPE")
            macroName = rw.Item("MACRO")

            If macroName.Contains("#") Then 'マクロ名の場合、画面上から対象テキストボックスを検索し、テキストボックスの値を取得
                value = chkSendMacro(macroName)
            Else 'マクロ名ではない場合、cntrl_rex.csvに記述してある値を利用
                value = macroName
            End If

            'データタイプごとにvalueの確認を行う
            Select Case datatype
                Case "boolean" 'データタイプがbooleanの場合で値がFALSE、TRUE以外の場合はエラーとする

                    'valueの値が小文字の場合、大文字に変換
                    If String.Compare("TRUE", value, True) = 0 Then
                        value = "TRUE"
                    ElseIf String.Compare("FALSE", value, True) = 0 Then
                        value = "FALSE"
                    End If

                    'cntrl_rex.csvに1か0で記述されていた場合、それぞれTRUE、FALSEに変換する
                    If value = "1" Then
                        value = "TRUE"
                    ElseIf value = "0" Then
                        value = "FALSE"
                    End If

                    'TRUE、FALSE以外の場合はerrとする(nothingもエラー)
                    If value <> "FALSE" And value <> "TRUE" Then
                        value = "err"
                    End If

                Case "int" 'int型の場合
                    If IsNumeric(value) = False Then '数値では無い場合エラー(nothingもエラー)
                        value = "err"

                    Else '数値の場合
                        'int型ではない場合（小数点を含む場合）、値を四捨五入してint型に変換
                        If value.Contains(".") Then
                            value = CInt(value).ToString
                        End If
                        value = Format(Integer.Parse(value), "0") '整数型のフォーマットに変換
                        '※int型なのに実数型で送信した場合、NC機側で小数点以下を切り上げる動きとなる

                    End If

                Case "real" 'real型の場合
                    If IsNumeric(value) = False Then '数値では無い場合エラー(nothingもエラー)

                        value = "err"

                    Else '数値の場合
                        '160808 hishiki start Single.parse→Decimal.parseへ修正
                        value = Format(Decimal.Parse(value), "0.000") '小数点第3位まで表示のフォーマットに変換
                        'value = Format(Single.Parse(value), "0.000") '小数点第3位まで表示のフォーマットに変換
                        '160808 hishiki end 
                    End If
            End Select

            If value = "err" Then 'エラーの場合、エラーメッセージを作成して、errflgに１をセット
                If macroName.Contains("#") Then
                    errLabel.Text = errLabel.Text & macroName & " " 'マクロ番号を含む場合、エラー表示にマクロ名を使用
                Else
                    errLabel.Text = errLabel.Text & parameter & " " 'マクロ番号を含まない場合、エラー表示にパラメータを使用
                End If
                errflg = 1


            Else 'エラーではない場合、送信文字列作成

                Output = Output & value & ";" & parameter & vbCrLf '「;parameter」はただのコメント文。記述がなくても転送時の動作に影響は無い

            End If

        Next

        'エラーが無かった場合、ファイル作成
        If errflg = 0 Then
            Dim ParaTemp As New System.IO.StreamWriter(MACRO_txt, False, System.Text.Encoding.Default)
            ParaTemp.WriteLine(Output)
            ParaTemp.Close()
            sendFileFlg = 1

            'エラーの場合、エラー用フォーム表示
        Else

            Dim str1 As String = "Check Next TextBox"
            Dim str2 As String = errLabel.Text
            ShowFrmInfo(str1, str2)

        End If

    End Sub

    '150928 hishiki Brother機能追加
    '●NC機送信用テキスト作成関数（brother）
    Private Sub makeSendTxt_brother()
        Dim errflg As Integer = 0
        Dim sendFlg As String
        Dim Output As String = ""   '出力データ
        Dim value As String = "" '対象テキストボックスのデータ
        errLabel = New Label

        'TopMacroとEndMacroを比較してEndMacroの値の方が小さい場合、TopMacroとEndMacroを入れ替え
        If TopMacro >= EndMacro Then
            Dim tmp_T As String = TopMacro
            TopMacro = EndMacro
            EndMacro = tmp_T
        End If

        Dim tmpMacro As Integer = TopMacro

        Dim addrw As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("macro='add'")
        Dim addflg As Integer = 0
        If addrw.Length > 0 Then
            addflg = 1
        End If

        'SbrotherNcSysは、対象範囲を0で初期化する動きがないため、DNC側で実装
        Do Until tmpMacro > EndMacro

            Dim srchMacro As String = "#" & tmpMacro
            Dim tmprow1 As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("MACRO='" & srchMacro & "'")
            Dim tmprow2 As DataRow() = DSprg.Tables("T_add" & dispPrgNo).Select("DEFINE='" & srchMacro & "'")

            'Cntrl.csvのMacroの定義を検索して、対象マクロがなかった場合
            If tmprow1.Length = 0 Then
                'add使用している場合
                If addflg = 1 Then
                    'add.csvに登録がない場合、送信値を0に設定
                    If tmprow2.Length = 0 Then
                        value = "0"
                        'add.csvに登録がある場合、画面上から対象マクロを検索してその値をセット
                    Else
                        value = chkSendMacro(srchMacro) '画面から対象マクロを検索して、そのテキストの値を取得
                    End If

                    'add未使用の場合（cntl.csvにもadd.csvにも登録なしの場合）
                Else
                    value = "0"
                End If

                'Cntrl.csvのMacroの定義を検索して、対象マクロが見つかった場合
            Else
                sendFlg = tmprow1(0).Item("SENDFLG")
                If sendFlg = "1" Then
                    value = chkSendMacro(srchMacro) '画面から対象マクロを検索して、そのテキストの値を取得
                Else
                    value = "0" 'sendflgが0の場合は、テキストの値を送らず、0を設定する
                End If

            End If

            If value = "err" Then 'エラーの場合
                errLabel.Text = errLabel.Text & srchMacro & " "
                errflg = 1
                'ElseIf value = "nothing" Then 'マクロが画面上に見つからなかった場合何もしない '1511118 hishiki 
            Else 'エラーではない場合

                '151118 hishiki start Brotherの場合、SmacroSysは指定範囲を0に書き換えないため、0を送信する必要あり
                If value = "nothing" Then
                    value = "0"
                End If
                '151118 hishiki end
                Output = Output & tmpMacro & " = " & value & vbCrLf
            End If

            tmpMacro = tmpMacro + 1

        Loop

        '送信するマクロの値にエラーが無かった場合、ファイル作成
        If errflg = 0 Then
            'macro.txtを更新
            Dim ParaTemp As New System.IO.StreamWriter(MACRO_txt, False, System.Text.Encoding.Default)
            ParaTemp.WriteLine(Output)
            ParaTemp.Close()

            'command.txtを更新（Brotherの場合、command.txtが更新されるとmacro.txtの値をNCへ送信）
            Dim ParaTemp_Command As New System.IO.StreamWriter(COMMAND_txt, False, System.Text.Encoding.Default)
            Dim Output_Command As String = "nc_WPrm," & TopMacro & "," & EndMacro
            ParaTemp_Command.WriteLine(Output_Command)
            ParaTemp_Command.Close()

            sendFileFlg = 1

            'エラーの場合、エラー用フォーム表示
        Else

            Dim str1 As String = "Check Next TextBox"
            Dim str2 As String = errLabel.Text
            ShowFrmInfo(str1, str2)

        End If

    End Sub


    '●NC機送信用テキスト作成関数
    Private Sub makeSendTxt()
        Dim errflg As Integer = 0
        Dim macroName As String
        Dim sendFlg As String
        Dim Output As String = ""   '出力データ
        Dim value As String = "" '対象テキストボックスのデータ
        errLabel = New Label

        '151029 hishiki 1.09のときの修正がバグとなり、sendflg = 0でも送信されてしまっていたため1.08の時の処理に戻した
        For Each rw As DataRow In DSprg.Tables("T_cntrl" & dispPrgNo).Rows

            macroName = rw.Item("MACRO")
            If macroName = "add" Then
                For Each rws As DataRow In DSprg.Tables("T_add" & dispPrgNo).Rows
                    macroName = rws.Item("DEFINE")

                    value = chkSendMacro(macroName)
                    If value = "err" Then 'エラーの場合
                        errLabel.Text = errLabel.Text & macroName & " "
                        errflg = 1
                    ElseIf value = "nothing" Then 'マクロが画面上に見つからなかった場合何もしない
                    Else 'エラーではない場合
                        If macroName.Contains("#") Then
                            macroName = macroName.Replace("#", "")
                        End If
                        Output = Output & macroName & " = " & value & vbCrLf
                    End If
                Next

            Else
                sendFlg = rw.Item("SENDFLG")

                If sendFlg = "1" Then
                    value = chkSendMacro(macroName)
                    If value = "err" Then 'エラーの場合
                        errLabel.Text = errLabel.Text & macroName & " "
                        errflg = 1
                    ElseIf value = "nothing" Then 'マクロが画面上に見つからなかった場合何もしない(Fanucの場合、smacrosysが指定範囲を0へ書き換えるため特に操作不要)
                    Else 'エラーではない場合
                        If macroName.Contains("#") Then
                            macroName = macroName.Replace("#", "")
                        End If
                        Output = Output & macroName & " = " & value & vbCrLf
                    End If
                End If

            End If

        Next

        'エラーが無かった場合、ファイル作成
        If errflg = 0 Then
            Dim ParaTemp As New System.IO.StreamWriter(MACRO_txt, False, System.Text.Encoding.Default)
            'Dim ParaTemp As New System.IO.StreamWriter(MACRO_txt, False, System.Text.Encoding.GetEncoding("shift_jis"))
            ParaTemp.WriteLine(Output)
            ParaTemp.Close()
            sendFileFlg = 1

            'エラーの場合、エラー用フォーム表示
        Else

            Dim str1 As String = "Check Next TextBox"
            Dim str2 As String = errLabel.Text
            ShowFrmInfo(str1, str2)

        End If

    End Sub

    'TB_alartのテキストボックスの長さ設定
    Private Sub setTBalart()
        TB_alart.Width = TextRenderer.MeasureText(New String("0", LenB(TB_alart.Text)), TB_alart.Font).Width '半角のサイズ×最大文字数でwidth設定
        TB_alart.Location = New Point( _
            Me.Location.X + (Me.Width - TB_alart.Width) \ 2, _
            Me.Location.Y + (Me.Height - TB_alart.Height) \ 2)
    End Sub

    '●送信ボタン押下時イベント
    Private Sub Btn_send_Click(sender As System.Object, e As System.EventArgs) Handles Btn_send.Click
        Dim Cnt As Integer = 0
        For Each c As Control In FlowLayoutPanel1.Controls
            Cnt = Cnt + 1
        Next

        Try
            '画面上にコントロールが表示されていた場合、表示の値を基にMACRO.txt作成
            If Cnt > 0 Then

                '160127 hishiki start
                If performClickFlg = 1 Then
                    'performClick（add使用時の自動送信）の場合はaddボタンを赤にしない
                    performClickFlg = 0 'flgを戻す
                Else
                    setBtnAdd(0) '送信ボタン押下時は、addボタンを赤にする。
                End If

                'setBtnAdd(0) 'addflgを0にし、ボタンを赤へ変更
                '160127 hishiki end

                setValueToPresetCSV() 'preset.csvを更新

                'Fanucの場合
                If SendFileFormat = 1 Then
                    makeSendTxt() 'マクロ送信用テキスト編集後、上書き保存

                    'Brotherの場合
                ElseIf SendFileFormat = 3 Then '150928 hishiki ・Brother機能追加
                    makeSendTxt_brother()

                    'レックスロスの場合
                ElseIf SendFileFormat = 2 Then
                    makeSendTxt_rex()

                Else

                End If

            End If
        Catch ex As Exception
            Logger.Warn(ex.ToString)
            Dim str1 As String = "Check Next TextBox"
            Dim str2 As String = ""
            ShowFrmInfo(str1, str2)
        End Try


    End Sub

    '●preset.csvの値を、画面上の値に書き換える
    Private Sub setValueToPresetCSV()

        Dim TBValue As String = ""
        Dim tmpMacroName As String = ""
        Dim presetDefine As String = ""

        Dim tmpTable As DataTable = New DataTable
        tmpTable.Columns.Add("DEFINE", GetType(String)) '定義名
        tmpTable.Columns.Add("VALUE", GetType(String)) '値

        '画面上にpresetを使用しているフォームがあるか検索。みつかったら、その値をtmpTableへ保存
        For Each c As Control In FlowLayoutPanel1.Controls
            If c.Name.IndexOf("TLP") = 0 Then
                tmpMacroName = c.Name.Replace("TLP", "")

                'テーブルレイアウトパネル内のコントロールを検索し、LBL_PRESETの名前を含んだコントロールを検索
                For Each cc As Control In c.Controls
                    If cc.Name.Contains("LBL_PRESET") Then
                        presetDefine = cc.Name.Replace("LBL_PRESET", "") 'ラベル名からpresetの定義名を取得

                        '対象テキストボックスの値を取得
                        Dim target_TB As Control() = FlowLayoutPanel1.Controls.Find("TB" & tmpMacroName, True)
                        If target_TB.Length <> 1 Then Exit Sub '同じ名前のテキストボックスが2つ以上あったらエラーのため処理を抜ける

                        TBValue = target_TB(0).Text.ToString

                        'tmpTableに定義名と値を保存
                        Dim row As DataRow = tmpTable.NewRow()
                        row("DEFINE") = presetDefine
                        row("VALUE") = TBValue
                        tmpTable.Rows.Add(row)

                        Exit For
                    End If
                Next

            End If

            presetDefine = "" '空白に戻す

        Next

        '画面上にpresetを使用しているフォームがない場合、処理を抜ける
        If tmpTable.Rows.Count = 0 Then Exit Sub

        '画面上のテキストボックスの値を基に、preset.csvの内容を作成
        Dim Output As String = "DEFINE,VALUE" & vbCrLf
        Dim T_DEFINE As String = ""
        Dim T_VALUE As String = ""
        For Each rw As DataRow In DSprg.Tables("T_preset" & dispPrgNo).Rows
            T_DEFINE = rw.Item("DEFINE")
            T_VALUE = rw.Item("VALUE")

            'tmpTable内に定義があった場合、tmpTable内の値（画面上の値）に置き換え
            Dim tmprow As DataRow() = tmpTable.Select("DEFINE='" & T_DEFINE & "'")
            If tmprow.Length = 1 Then
                T_VALUE = tmprow(0).Item("VALUE").ToString
            End If

            Output = Output & T_DEFINE & "," & T_VALUE & vbCrLf
        Next

        'preset.csvの内容を更新して保存
        Dim fileName As String = "preset.csv"
        fileName = System.IO.Path.Combine(dispPrgName, fileName) 'masterフォルダ内のどのフォルダか指定 prg1/preset.csv
        fileName = System.IO.Path.Combine(Path, fileName) 'フルパス作成 c:/****/master/prg1/preset.csv
        If System.IO.File.Exists(fileName) Then
            Try
                Dim ParaTemp As New System.IO.StreamWriter(fileName, False, System.Text.Encoding.Default)
                'Dim ParaTemp As New System.IO.StreamWriter(fileName, False, System.Text.Encoding.GetEncoding("shift_jis"))
                ParaTemp.WriteLine(Output)
                ParaTemp.Close()

            Catch ex As Exception
                Logger.Warn("err14")
                Logger.Warn(ex.ToString)
            End Try

        End If

    End Sub

    '●文字列から計算結果を返す関数。エラーの場合"NG"を返却
    Private Function getCalcResult(ByRef exp As String) As String
        '式を計算する
        Dim dt As New System.Data.DataTable()

        Dim mth As String = chkMath(exp)
        If mth <> "" Then
            exp = exp.Replace(mth, "")
        End If

        Dim result As Decimal
        Try

            '151006 hishiki 計算式が空時のバグ対応 if文追加
            If exp = "" Then
                result = ""
            Else
                result = CDbl(dt.Compute(exp, ""))
                If mth <> "" Then
                    result = getCalcMathResult(mth, result) '計算式と取り出した数値から、計算結果を取得
                End If

            End If


        Catch ex As Exception
            Logger.Warn("err10")
            Logger.Warn("exp=" & exp)
            Logger.Warn(ex.ToString)
            result = ""
        End Try


        Dim returnStr As String = (result).ToString

        Return returnStr

    End Function


    ''●文字列から計算結果を返す関数。エラーの場合"NG"を返却
    'Private Function getCalcResult(ByRef exp As String) As Object
    '    '式を計算する
    '    Dim dt As New System.Data.DataTable()

    '    Dim mth As String = chkMath(exp)
    '    If mth <> "" Then
    '        exp = exp.Replace(mth, "")
    '    End If

    '    Dim result As Object
    '    Try

    '        '151006 hishiki 計算式が空時のバグ対応 if文追加
    '        If exp = "" Then
    '            result = ""
    '        Else
    '            result = CDbl(dt.Compute(exp, ""))
    '            If mth <> "" Then
    '                result = getCalcMathResult(mth, result) '計算式と取り出した数値から、計算結果を取得
    '            End If

    '        End If


    '    Catch ex As Exception
    '        Logger.Warn("err10")
    '        Logger.Warn("exp=" & exp)
    '        Logger.Warn(ex.ToString)
    '        result = ""
    '    End Try

    '    Return result

    'End Function

    '●引数の計算式（文字列）と、引数の値から計算を行い結果を返却するメソッド
    Private Function getCalcMathResult(ByVal exp As String, ByVal value As Double) As Double

        Dim rtnValue As Double
        Select Case exp
            Case "Abs"
                rtnValue = Math.Abs(value)
            Case "Acos"
                rtnValue = Math.Acos(value)
            Case "Asin"
                rtnValue = Math.Asin(value)
            Case "Atan"
                rtnValue = Math.Atan(value)
            Case "Ceiling"
                rtnValue = Math.Ceiling(value)
            Case "Cos"
                rtnValue = Math.Cos(value)
            Case "Cosh"
                rtnValue = Math.Cosh(value)
            Case "Exp"
                rtnValue = Math.Exp(value)
            Case "Floor"
                rtnValue = Math.Floor(value)
            Case "Log"
                rtnValue = Math.Log(value)
            Case "Log10"
                rtnValue = Math.Log10(value)
            Case "Round"
                rtnValue = Math.Round(value, MidpointRounding.AwayFromZero) '銀行丸めではなく、四捨五入を実行
            Case "Sign"
                rtnValue = Math.Sign(value)
            Case "Sin"
                rtnValue = Math.Sin(value)
            Case "Sinh"
                rtnValue = Math.Sinh(value)
            Case "Sqrt"
                rtnValue = Math.Sqrt(value)
            Case "Tan"
                rtnValue = Math.Tan(value)
            Case "Tanh"
                rtnValue = Math.Tanh(value)
            Case "Truncate"
                rtnValue = Math.Truncate(value)
            Case Else
                rtnValue = value
        End Select

        Return rtnValue
    End Function

    '●引数の文字列中に数字が存在するかチェックするメソッド
    Private Function IsContainNum(ByVal str As String) As Boolean
        Dim chk As Boolean = False

        For i As Integer = 0 To str.Length - 1
            If IsNumeric(str(i)) Then
                chk = True
                Exit For
            End If
        Next

        Return chk

    End Function

    '●引数の計算式（文字列）の中から数字を抽出するメソッド
    Private Function getNumericValue(ByVal exp As String) As Double
        Dim tmpStr As String = ""
        Dim rtnValue As Object
        For i As Integer = 0 To exp.Length - 1
            If IsNumeric(exp(i)) Or exp(i) = "." Then
                tmpStr = tmpStr & exp(i)
            End If
        Next

        '160808 hishiki start
        rtnValue = Decimal.Parse(tmpStr)
        'rtnValue = Double.Parse(tmpStr)
        '160808 hishiki end            

        Return rtnValue

    End Function

    '●引数の計算式（文字列）の中に、T_mathで定義された計算式が含まれるかを確認し、計算式を返却するメソッド
    Private Function chkMath(ByVal exp As String) As String
        Dim rtnValue As String = ""
        Dim def As String = ""

        Dim DV As New DataView(DSbase.Tables("T_math"))
        DV.Sort = "DEFINE DESC" 'DEFINEで降順ソート
        Dim tmptbl As DataTable = DV.ToTable(False)

        For Each rw As DataRow In tmptbl.Rows
            def = rw.Item("DEFINE")
            If exp.Contains(def) Then
                rtnValue = def
                Exit For
            End If
        Next

        Return rtnValue
    End Function

    '●標準で設置してあるコントロールのサイズを設定
    Private Sub setDefaultControlSize()

        '画面上部のフォームの大きさを自動調整
        TB_Prg.Width = TextRenderer.MeasureText(New String("0", LenB(TB_PrgMaxInputStr) + 2), TB_Prg.Font).Width '半角のサイズ×文字数でwidth設定

        Btn_chngprgrm.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        Btn_chngprgrm.Width = TextRenderer.MeasureText(New String("0", LenB(Btn_chngprgrm.Text) + 2), Btn_chngprgrm.Font).Width '半角のサイズ×文字数でwidth設定

        TB_Model.Width = (FlowLayoutPanel2.Width - TB_Prg.Width - Btn_chngprgrm.Width) * 0.95 'フローレイアウトパネル

        '画面下部のフォームの大きさを自動調整
        Btn_Keyboard.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        Btn_Keyboard.Width = TextRenderer.MeasureText(New String("0", LenB(Btn_Keyboard.Text) + 2), Btn_Keyboard.Font).Width '半角のサイズ×文字数でwidth設定

        Btn_send.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        Btn_send.Width = TextRenderer.MeasureText(New String("0", LenB(Btn_send.Text) + 2), Btn_send.Font).Width '半角のサイズ×文字数でwidth設定

        Btn_chgOperator.Font = New System.Drawing.Font("MS UI Gothic", BtnStrSize, FontStyle.Bold, GraphicsUnit.Point, BtnStrSize)
        Btn_chgOperator.Width = TextRenderer.MeasureText(New String("0", LenB(Btn_chgOperator.Text) + 2), Btn_chgOperator.Font).Width '半角のサイズ×文字数でwidth設定

        If WorkInfoRecordFlg = 1 Then
            TB_Barcode.Width = (FlowLayoutPanel3.Width - Btn_chgOperator.Width - Btn_Keyboard.Width - Btn_send.Width) * 0.95
        Else
            TB_Barcode.Width = (FlowLayoutPanel3.Width - Btn_Keyboard.Width - Btn_send.Width) * 0.95
        End If


    End Sub


    '●画面上のコントロールの有効化無効化を設定するメソッド
    Private Sub setCntrlsEnable(ByVal flg As Boolean)

        'フローレイアウトパネル上のコントロールの有効化無効化
        For Each c As Control In FlowLayoutPanel1.Controls

            If c.Name.IndexOf("TLP") = 0 Then
                c.Enabled = flg
            End If
        Next

        '残りのコントロールの有効化無効化
        TB_Barcode.Enabled = flg
        Btn_send.Enabled = flg
        Btn_Keyboard.Enabled = flg
        Btn_chngprgrm.Enabled = flg
        TB_Prg.Enabled = flg
        TB_Model.Enabled = flg

        TB_Model.SelectionLength = 0 'TB_Modelの反転防止
        TB_alart.SelectionLength = 0 'TB_alartの反転防止

    End Sub

    '●measure用コントロールに測定値を反映するメソッド
    Public Sub setValueToMeasureTB()

        TB_measure.Text = TB_Barcode.Text
        'RemoveHandler TB_Barcode.TextChanged, AddressOf TB_Barcode_TextChanged
        TB_Barcode.Text = "" '入力文字を削除
        'AddHandler TB_Barcode.TextChanged, AddressOf TB_Barcode_TextChanged

    End Sub

    '●measure用テキストボックスの背景色をini.csvで指定された色で設定するメソッド
    Public Sub setMeasureTxtBackColor(ByVal TxtBx As TextBox)
        Select Case MeasureTextColor

            Case "yellow"
                TxtBx.BackColor = Color.Yellow
            Case "blue"
                TxtBx.BackColor = Color.Blue
            Case "orange"
                TxtBx.BackColor = Color.Orange
            Case "red"
                TxtBx.BackColor = Color.Red
            Case "green"
                TxtBx.BackColor = Color.Green
            Case Else '上記以外の場合、強制的に黄色に設定
                TxtBx.BackColor = Color.Yellow

        End Select
    End Sub

    '●引数の文字列のバイト数を計算して返却するメソッド（全角は2バイト、半角は1バイトで計算される）
    Public Function LenB(ByVal str As String) As Integer
        Dim r As New System.Text.RegularExpressions.Regex("^[a-zA-Z0-9]+$+")
        Dim rtnValue As Integer = 0
        For i As Integer = 0 To str.Length - 1
            If r.IsMatch(str(i)) = False Then
                If str(i) = "." Or str(i) = "+" Or str(i) = "-" Then
                    rtnValue = rtnValue + 1
                Else
                    rtnValue = rtnValue + 2
                End If

            Else
                rtnValue = rtnValue + 1
            End If
        Next

        Return rtnValue + 1 '1バイト分余裕を持たした値を返却

    End Function

    '画面表示時のテキストボックスフォーマットを作成
    Private Function makeFormatStr(ByVal str As String) As String
        Dim foundIndex As Integer = str.IndexOf(".")
        Dim formatCnt As Integer = 0
        Dim formatStr As String

        Dim cnt As Integer = 0

        If foundIndex = -1 Then
            formatStr = "0"
        Else
            formatCnt = str.Length - foundIndex - 1
            formatStr = "0."
            For i As Integer = 0 To formatCnt - 1
                formatStr = formatStr & "0"

                '160805 hishiki start 小数点以下桁数をini.csvで可変にできるように修正
                ''150105 hishiki 小数点以下4桁までの表示とする
                'cnt = cnt + 1
                'If cnt >= 4 Then
                '    Exit For
                'End If

                cnt = cnt + 1
                If cnt >= DecimalPlace Then
                    Exit For
                End If
                '160805 hishiki end

            Next
        End If

        Return formatStr
    End Function

    'FlowLayoutPanel1下に隠したテキストボックス（オペレータID入力用）が変更したときのイベント
    Private Sub TB_OpeID_TextChanged(sender As System.Object, e As System.EventArgs) Handles TB_OpeID.TextChanged
        OperatorID = TB_OpeID.Text
        If OperatorID <> "" Then
            If OperatorID = "" Then
                OperatorName = ""
            Else
                '作業者名取得
                Try
                    OperatorName = getOperatorName(OperatorID)
                Catch ex As Exception
                    OperatorName = ""
                End Try
            End If

            '見出し表示設定
            operatorInfo = "  Operator:" & OperatorName & "  MachineID:" & MachineID & "  Status:" & PRO_STATUSCD & "  S_Status:" & PRO_S_STATUSCD
            Me.Text = versionName & operatorInfo
            TB_OpeID.Text = "" '検索終わったら空白に戻す。（再度この関数が呼ばれるが、空白のためスルーされる）
        End If

    End Sub

    'メインフォーム表示後のイベント
    Private Sub Frm_main_Shown(sender As System.Object, e As System.EventArgs) Handles MyBase.Shown

        TB_Barcode.Focus()

        '実績記録フラグオンなら、作業者ID入力フォーム表示
        If WorkInfoRecordFlg = 1 Then

            'その他のサブフォームが表示されていたら閉じる。
            If Frm_Calc.Visible = True Then
                Frm_Calc.Close()
            End If
            If Frm_KeyBoard.Visible = True Then
                Frm_KeyBoard.Close()
            End If
            'Inputフォームが表示済みなら、フォーカスをあてる
            If Frm_Input.Visible Then
                Frm_Input.Focus()
                'Inputフォームが非表示なら、表示
            Else
                Frm_Input.Show()
            End If
        End If
    End Sub

    'メインフォーム非アクティブ時のイベント
    Private Sub Frm_main_Deactivate(sender As System.Object, e As System.EventArgs) Handles MyBase.Deactivate
        If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行
        MefocusOffDate_old = Now '時間初期化

    End Sub

    '160128 hishiki add
    'onoff.txtを監視して、1（機械稼動中）になったら、switchフォームの対象テキスト、ボタンの値をマスタで指定した値へ戻す。
    Private Sub changeSwitchFormTextONOFF()

        If DSprg.Tables("T_switch" & dispPrgNo).Columns.Contains("ONOFF") = False Then Exit Sub

        'cntrl.csvの中からKIND=switchで定義された行を抽出
        Dim rws_cntrl As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("KIND='switch'")
        If rws_cntrl.Length = 0 Then Exit Sub

        'switchのフォーム数分ループ
        For Each rw In rws_cntrl
            Dim macro As String = rw.Item("MACRO")

            'T_loadから、IDをキーにして対象行取得
            Dim rw_load As DataRow() = DSprg.Tables("T_load" & dispPrgNo).Select("NO=" & "'" & ID & "'" & "")
            If rw_load.Length <> 1 Then Exit Sub

            'load.csvの対象行からswitchの定義名を取得
            Dim define_switch = rw_load(0).Item(macro)

            'load.csvに書かれたswitchの定義名がswitch.csvに存在しない場合（switchを使わない場合「-」などがありえる）forループを１回飛ばす。
            Dim rws_switch As DataRow() = DSprg.Tables("T_switch" & dispPrgNo).Select("DEFINE='" & define_switch & "'")
            If rws_switch.Length = 0 Then
                Continue For 'forループの処理を飛ばす
            End If

            '対象定義のONOFFの項目の中に「1」があれば表示中の値をその項目の値に変更
            For Each rws In rws_switch
                If IsDBNull(rws.Item("ONOFF")) = False Then
                    If rws.Item("ONOFF") = "1" Then
                        '画面上に対象マクロがあるかチェック
                        Dim c As Control() = FlowLayoutPanel1.Controls.Find("TB" & macro, True)
                        Dim c1 As Control() = FlowLayoutPanel1.Controls.Find("BTN_switch" & macro, True)
                        If c.Length = 1 And c1.Length = 1 Then

                            Dim sendValue_now As String = c(0).Text '画面上の現在の値を取得
                            Dim sendValue_onoff As String = rws.Item("SENDVALUE") 'マスタ設定値を取得

                            'マスタ設定値と画面上の値が異なる場合、画面の値をマスタ設定値へ戻す
                            If sendValue_now <> sendValue_onoff Then
                                'ボタン表示値を変更
                                Dim btnValue As String = rws.Item("DISPVALUE")
                                c1(0).Text = btnValue
                                'TBの値を変更
                                c(0).Text = sendValue_onoff
                            End If

                        End If
                    End If
                End If
            Next

        Next
    End Sub

    '160216 hishiki add
    'onoff.txtを監視して、1（機械稼動中）になったら、correctフォームの対象テキストの値をマスタで指定した値へ戻す。
    Private Sub changeCorrectFormTextONOFF()

        'correct.csvにONOFFの項目がない場合、処理を行わない
        If DSprg.Tables("T_correct" & dispPrgNo).Columns.Contains("ONOFF") = False Then Exit Sub

        'cntrl.csvの中からKIND=correctで定義された行を抽出
        Dim rws_cntrl As DataRow() = DSprg.Tables("T_cntrl" & dispPrgNo).Select("KIND='correct'")
        If rws_cntrl.Length = 0 Then Exit Sub

        'correctのフォーム数分ループ
        For Each rw In rws_cntrl
            Dim macro As String = rw.Item("MACRO")

            'T_loadから、IDをキーにして対象行取得
            Dim rw_load As DataRow() = DSprg.Tables("T_load" & dispPrgNo).Select("NO=" & "'" & ID & "'" & "")
            If rw_load.Length <> 1 Then Exit Sub

            'load.csvの対象行からcorrectの定義名を取得
            Dim define_correct = rw_load(0).Item(macro)

            'load.csvに書かれたcorrectの定義名がcorrect.csvに存在しない場合（correctを使わない場合「-」などがありえる）forループを１回飛ばす。
            Dim rws_correct As DataRow() = DSprg.Tables("T_correct" & dispPrgNo).Select("DEFINE='" & define_correct & "'")
            If rws_correct.Length = 0 Then
                Continue For 'forループの処理を飛ばす
            End If

            '対象定義のONOFFの項目の中に「1」があれば表示中の値をその項目の値に変更
            For Each rws In rws_correct
                If IsDBNull(rws.Item("ONOFF")) = False Then
                    If rws.Item("ONOFF") = "1" Then
                        '画面上に対象マクロがあるかチェック
                        Dim c As Control() = FlowLayoutPanel1.Controls.Find("TB" & macro, True)
                        If c.Length = 1 Then

                            Dim sendValue_now As String = c(0).Text '画面上の現在の値を取得
                            Dim sendValue_onoff As String = rws.Item("DEFVALUE") 'マスタ設定値を取得

                            'マスタ設定値が「preset」で始まる場合、preset.csvから値を取得
                            If sendValue_onoff.StartsWith("preset") Then
                                Dim tmprows As DataRow() = DSprg.Tables("T_preset" & dispPrgNo).Select("DEFINE='" & sendValue_onoff & "'")
                                If tmprows.Length = 1 Then
                                    sendValue_onoff = tmprows(0).Item("VALUE")

                                    '160808 hishiki start
                                    Dim UPDWN As String = rws("UPDWN").ToString
                                    Dim index_UPDWN As Integer = UPDWN.IndexOf(".") 'updwnの値の.の位置を取得
                                    Dim index_val As Integer = sendValue_onoff.IndexOf(".") 'valueの値の.の位置を取得
                                    Dim DecimalPlace_UP As Integer = Len(UPDWN) - index_UPDWN 'updwnの小数点以下桁数を取得
                                    Dim DecimalPlace_val As Integer = Len(sendValue_onoff) - index_val 'valueの小数点以下桁数を取得
                                    Dim tmpStr As String = UPDWN
                                    If DecimalPlace_val > DecimalPlace_UP Then
                                        tmpStr = sendValue_onoff '小数点以下桁数が多いほうを、画面表示時のフォーマットのベースとして選択
                                    End If
                                    'Dim tmpStr As String = rws("UPDWN")'画面表示時のフォーマットをUPDWNの値をベースに作成
                                    Dim formatStr As String = makeFormatStr(tmpStr)

                                    sendValue_onoff = Format(Decimal.Parse(sendValue_onoff), formatStr)
                                    'sendValue_onoff = Format(Single.Parse(sendValue_onoff), formatStr)
                                    '160808 hishiki end                    
                                Else
                                    sendValue_onoff = ""
                                End If
                            End If

                            'マスタ設定値と画面上の値が異なる場合、画面の値をマスタ設定値へ戻す
                            If sendValue_now <> sendValue_onoff Then
                                'TBの値を変更
                                c(0).Text = sendValue_onoff
                            End If

                        End If
                    End If
                End If
            Next

        Next
    End Sub



    '●タイマー処理
    Private Sub Timer1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer1.Tick

        '●onoff.txtが更新されているか確認（テキストは機械稼動停止時に更新される）
        Try
            NdtCreate = System.IO.File.GetLastWriteTime(ONOFF_txt)
            'onoff.txtが更新されている場合の処理
            If OdtCreate <> NdtCreate Then

                Dim Read As String = ""
                Dim Reader As New IO.StreamReader(ONOFF_txt)
                Try
                    Read = Reader.ReadLine  '1行読込
                    Reader.Close()          'ファイルを閉じる
                    Dim temp As String = Read.Substring(0)
                    'ファイルが1の時（機械稼働中）
                    If temp = "1" Then
                        TB_alart.Text = TB_alart_text_machineON
                        MachineOnFlg_now = 1
                        OdtCreate = NdtCreate

                        '160128 hishiki start
                        '160216 hishiki  correct系もonoff機能追加依頼対応
                        'onoff.txtの値が1かつ、onoffSwitchflgオンの場合、
                        'switchフォームの対象テキスト、ボタンの値をマスタで指定した値へ戻す。
                        If onoffSwitchflg = 1 Or onoffCorrectflg = 1 Then
                            onoff1to0Flg = 1
                            'changeSwitchFormTextONOFF() 160216 hishiki コメントアウト
                        End If
                        '160128 hishiki end

                        'ファイルが0の時（機械停止中）
                    ElseIf temp = "0" Then
                        TB_alart.Text = TB_alart_text_send
                        MachineOnFlg_now = 0
                        TB_alart.Visible = False
                        OdtCreate = NdtCreate

                        '160216 hishiki start onoff.csvが1から0になった時、フォームの対象テキスト、ボタンの値をマスタで指定した値へ戻す。
                        If onoff1to0Flg = 1 Then
                            onoff1to0Flg = 0 'フラグを元に戻す

                            If onoffSwitchflg = 1 Then
                                changeSwitchFormTextONOFF()
                            End If

                            If onoffCorrectflg = 1 Then
                                changeCorrectFormTextONOFF()
                            End If

                        End If
                        '160216 hishiki end

                        '▼151012 hishiki Brother機能追加 start
                        '通信エラーの場合
                    ElseIf temp = "-1" Then

                        'ブラザー使用の場合のみ、commuStateを-1に設定する。
                        If SendFileFormat = 3 Then
                            commuState = -1
                        End If

                        'onoff.txtを0：機械停止中へ戻す
                        Dim onoffValue As String = ""
                        Dim ParaTemp_ONOFF As New System.IO.StreamWriter(ONOFF_txt, False, System.Text.Encoding.Default)
                        Dim Output_ONOFF As String = "0" 'onoff.txtを「0」:機械停止中へ戻す
                        ParaTemp_ONOFF.WriteLine(Output_ONOFF)
                        ParaTemp_ONOFF.Close()

                        OdtCreate = NdtCreate
                        '▲151012 hishiki Brother機能追加 end

                    End If
                Catch ex As Exception
                    Reader.Close()
                End Try
            End If
        Catch ex As Exception
        End Try

        '▼151012 hishiki Brother機能追加 start
        '●通信エラーの場合
        If commuState = -1 Then

            'waitFlgオンの場合、オフに戻す（送信中から通常状態へ戻す）
            If waitFlg = 1 Then
                'コントロールの無効化解除
                setCntrlsEnable(True)
                txtChangeEventFlg = 1 'イベント無効化解除

                'アラート非表示
                TB_alart.Visible = False

                'waitTimeの状態を戻す
                waitTime_now = Now
                waitTime_old = Now

                'フラグ初期化
                waitFlg = 0
                sendFileFlg = 0

                'フォーカスをTB_Barcodeに当てる
                TB_Barcode.Focus()
            End If

            Dim str1 As String = "NC Communication Err"
            Dim str2 As String = "Close NC Macro Variables !"

            'NC Communication Errとは別の原因でFrm_Infoが表示されている場合、閉じる
            If Frm_Info.Visible = True Then
                If Frm_Info.Label1.Text <> str1 Then
                    Frm_Info.Close()
                End If
            End If

            'Frm_Infoが表示中（NC Communication errとして）の場合は何もしないが非表示の場合、表示する
            'commuStateは、Frm_Infoクローズイベントで0へ戻す
            If Frm_Info.Visible = False Then

                ShowFrmInfo(str1, str2)
                'フォームがメインフォームの後ろに隠れないようにする
                Me.AddOwnedForm(Frm_Info)
                Frm_Info.BackColor = Color.Yellow

            End If
        End If
        '▲151012 hishiki Brother機能追加 end


        '●機械稼働中の場合、指定時間DNCのコントロール無効化処理
        If waitFlg = 1 Then '待機フラグオンの場合
            waitTime_now = Now
            Dim diff As Object = DateDiff("s", waitTime_old, waitTime_now)
            '指定時間以上経過した場合、下記の処理実行
            If diff >= WaitTime_AfterSend Then

                'コントロールの無効化解除
                setCntrlsEnable(True)
                txtChangeEventFlg = 1 'イベント無効化解除

                'アラート非表示
                TB_alart.Visible = False

                'waitTimeの状態を戻す
                waitTime_now = Now
                waitTime_old = Now

                'フラグ初期化
                waitFlg = 0
                sendFileFlg = 0

                'フォーカスをTB_Barcodeに当てる
                TB_Barcode.Focus()

            End If

        Else
            'マクロ送信フラグオンの場合、waitFlgをオンにする
            If sendFileFlg = 1 Then

                'アラートを送信中アラートに変更
                TB_alart.Text = TB_alart_text_send

                'コントロールの無効化
                txtChangeEventFlg = 0 'イベント無効化
                setCntrlsEnable(False)

                'アラート表示
                TB_alart.Visible = True
                setTBalart()

                waitFlg = 1 'waitFlgオン
                waitTime_old = Now

            ElseIf MachineOnFlg_now = 1 Then '機械稼働中の場合

                '機械稼動状態変化が起こったときだけ下記処理実行
                If MachineOnFlg_now <> MachineOnFlg_old Then

                    'アラートを機械稼働中アラートに変更
                    TB_alart.Text = TB_alart_text_machineON

                    'コントロールの無効化
                    txtChangeEventFlg = 0 'イベント無効化
                    setCntrlsEnable(False)

                    'アラート表示
                    TB_alart.Visible = True
                    setTBalart()

                    MachineOnFlg_old = MachineOnFlg_now '機械稼動状態を同じにする

                End If

            ElseIf MachineOnFlg_now = 0 Then '機械停止中の場合

                '機械稼動状態変化が起こったときだけ下記処理実行
                If MachineOnFlg_now <> MachineOnFlg_old Then

                    'コントロールの無効化解除
                    setCntrlsEnable(True)
                    txtChangeEventFlg = 1 'イベント無効化解除

                    'アラート非表示
                    TB_alart.Visible = False

                    MachineOnFlg_old = MachineOnFlg_now '機械稼動状態を同じにする

                    'フォーカスをTB_Barcodeに当てる
                    TB_Barcode.Focus()

                End If
            End If

        End If

        '●フォーカス制御
        Dim frmDispFlg As Integer
        Dim frm As Form '表示中フォーム（キーボード、info、calc、inputは開いたときmain以外の他画面を閉じる）
        If Frm_KeyBoard.Visible = True Then
            frmDispFlg = 1
            frm = Frm_KeyBoard
        ElseIf Frm_Info.Visible = True Then
            frmDispFlg = 2
            frm = Frm_Info
        ElseIf Frm_Calc.Visible = True Then
            frmDispFlg = 3
            frm = Frm_Calc
        ElseIf Frm_Input.Visible = True Then
            frmDispFlg = 4
            frm = Frm_Input
        Else
            frmDispFlg = 0
            frm = Me
        End If

        '①TB_Barcodeのフォーカスが外れたら、所定時間後元に戻す処理を行う
        If frmDispFlg = 0 Then 'frm_mainのみ開いていた場合
            If TB_Barcode.Focused = False Then
                focusOffDate_now = Now
                Dim buf As Object = DateDiff("s", focusOffDate_old, focusOffDate_now)
                '所定時間経過したら、フォーカスを戻す
                If buf >= WaitTime_TB_Focus Then
                    TB_Barcode.Focus()
                    TB_Barcode.SelectionLength = 0 '文字列の反転防止
                    focusOffDate_old = focusOffDate_now
                End If
            Else '経過時間を0にする。
                focusOffDate_now = Now
                focusOffDate_old = focusOffDate_now
            End If

            'キーボード、info、calcのどれかが開いていた場合、TB_Barcodeのフォーカスは戻さない
        Else '経過時間を0にする。
            focusOffDate_now = Now
            focusOffDate_old = focusOffDate_now
        End If

        '②表示中フォームのフォーカスが外れたら、所定時間後元に戻す処理を行う 150131 hishiki
        '2015/08/31 ins ↓ tsukiji 日報監視、無操作時間が経過後、DNCをアクティブにする。
        Dim c As New clsFormFocus
        Try

            Dim activeFrm As Form = Form.ActiveForm
            Dim activeFrmName As String = ""
            If Not activeFrm Is Nothing Then
                activeFrmName = activeFrm.Name
            End If
            If activeFrmName <> frm.Name And activeFrmName <> "SplashScreen1" Then
                '表示中のフォームのフォーカスが外れた場合
                '
                If Not c.execFormFocus(WaitTime_TB_Focus) Then
                    '既存動作が必要
                    MefocusOffDate_now = Now
                    Dim buf As Object = DateDiff("s", MefocusOffDate_old, MefocusOffDate_now)

                    '所定時間経過したら、フォーカスを戻す
                    If buf >= WaitTime_TB_Focus Then
                        If frmDispFlg > 0 Then 'frm_main以外のフォームが表示の場合、まずfrm_mainをアクティブへ
                            Me.WindowState = System.Windows.Forms.FormWindowState.Minimized
                            Me.WindowState = System.Windows.Forms.FormWindowState.Normal

                        End If

                        frm.WindowState = System.Windows.Forms.FormWindowState.Minimized
                        frm.WindowState = System.Windows.Forms.FormWindowState.Normal

                        TB_Barcode.SelectionLength = 0 '文字列の反転防止
                        MefocusOffDate_old = MefocusOffDate_now '時間差を0に戻す

                    End If
                Else
                    'アクティブ処理済み

                End If


            Else '経過時間を0にする。
                MefocusOffDate_now = Now
                MefocusOffDate_old = MefocusOffDate_now
            End If

        Catch ex As Exception
        End Try
        '2015/08/31 ins ↑ tsukiji 日報監視、無操作時間が経過後、DNCをアクティブにする。

        '2015/08/31 del ↓ tsukiji 日報監視、無操作時間が経過後、DNCをアクティブにする。
        'Dim activeFrm As Form = Form.ActiveForm
        'Dim activeFrmName As String = ""
        'If Not activeFrm Is Nothing Then
        '    activeFrmName = activeFrm.Name
        'End If

        'If activeFrmName <> frm.Name And activeFrmName <> "SplashScreen1" Then '表示中のフォームのフォーカスが外れた場合
        '    MefocusOffDate_now = Now
        '    Dim buf As Object = DateDiff("s", MefocusOffDate_old, MefocusOffDate_now)

        '    '所定時間経過したら、フォーカスを戻す
        '    If buf >= WaitTime_TB_Focus Then
        '        If frmDispFlg > 0 Then 'frm_main以外のフォームが表示の場合、まずfrm_mainをアクティブへ
        '            'Me.WindowState = System.Windows.Forms.FormWindowState.Minimized
        '            'Me.WindowState = System.Windows.Forms.FormWindowState.Normal

        '        End If

        '        'frm.WindowState = System.Windows.Forms.FormWindowState.Minimized
        '        'frm.WindowState = System.Windows.Forms.FormWindowState.Normal

        '        TB_Barcode.SelectionLength = 0 '文字列の反転防止
        '        MefocusOffDate_old = MefocusOffDate_now '時間差を0に戻す

        '    End If
        'Else '経過時間を0にする。
        '    MefocusOffDate_now = Now
        '    MefocusOffDate_old = MefocusOffDate_now
        'End If
        '2015/08/31 del ↑ tsukiji 日報監視、無操作時間が経過後、DNCをアクティブにする。

    End Sub

    'フォームのサイズを使用PCの画面サイズにあわせて変更 引数：フルスクリーンに対するパーセント（フルスクリーンの場合100を指定）
    Private Sub changeFormSize(ByVal ratio As Integer)

        'デフォルトのフォーム1の縦横比取得
        Dim defRatioW_H As Single = ToHalfAdjust(Me.Width / Me.Height, 2)

        'フォーム上のコントロールを取得し、それぞれのW,H,X,Yの値を保持
        Dim all As Control() = GetAllControls(Me)
        Dim cntrl_Frm(all.Length - 1) As Control
        Dim Wratio_Frm(all.Length - 1) As Single
        Dim Hratio_Frm(all.Length - 1) As Single
        Dim Xratio_Frm(all.Length - 1) As Single
        Dim Yratio_Frm(all.Length - 1) As Single

        '現在のフォームの位置、縦横比を取得
        Dim i As Integer = 0
        For Each c As Control In all '比率を設定
            cntrl_Frm(i) = c
            Wratio_Frm(i) = c.Width / ClientSize.Width
            Hratio_Frm(i) = c.Height / ClientSize.Height
            Xratio_Frm(i) = c.Location.X / ClientSize.Width
            Yratio_Frm(i) = c.Location.Y / ClientSize.Height
            i = i + 1
        Next

        '使用PCのモニターの縦横比を取得
        Dim screenRacioW_H As Single = ToHalfAdjust(Screen.GetWorkingArea(Me).Width / Screen.GetWorkingArea(Me).Height, 2)

        'フォームサイズを使用環境に合わせてフルスクリーンへ変更
        '使用するモニターの縦横比に応じて、メイン画面のサイズ設定
        If screenRacioW_H >= defRatioW_H Then 'デフォルトのメイン画面の縦横比に対してモニターが横長の場合

            Me.Height = Screen.GetWorkingArea(Me).Height * ratio / 100 '縦方向のサイズをモニターのサイズに合わせる
            Me.Width = Me.Height * defRatioW_H '横方向は、設定した高さ×デフォルト縦横比

        Else
            Me.Width = Screen.GetWorkingArea(Me).Width * ratio / 100 '横方向のサイズをモニターのサイズに合わせる
            Me.Height = Me.Width / defRatioW_H '縦方向は、設定した幅/デフォルト縦横比
        End If

        '初期の位置関係、サイズ比率を保持したまま画面サイズにあわせてコントロールの位置およびサイズ変更
        Dim ControllerPosition As Point = New Point()
        Dim j As Integer = 0
        For j = 0 To cntrl_Frm.Length - 1
            cntrl_Frm(j).Width = Wratio_Frm(j) * ClientSize.Width
            cntrl_Frm(j).Height = Hratio_Frm(j) * ClientSize.Height
            ControllerPosition.X = Xratio_Frm(j) * ClientSize.Width
            ControllerPosition.Y = Yratio_Frm(j) * ClientSize.Height
            cntrl_Frm(j).Location = ControllerPosition
        Next

    End Sub

    'フォーム上のコントロールを取得
    Public Function GetAllControls(ByVal top As Control) As Control()
        Dim buf As ArrayList = New ArrayList
        For Each c As Control In top.Controls
            buf.Add(c)
            buf.AddRange(GetAllControls(c))
        Next
        Return CType(buf.ToArray(GetType(Control)), Control())
    End Function

    '引数で指定した精度の数値に四捨五入した値を返却
    Public Function ToHalfAdjust(ByVal dValue As Double, ByVal iDigits As Integer) As Single
        Dim dCoef As Single = System.Math.Pow(10, iDigits)

        If dValue > 0 Then
            Return System.Math.Floor((dValue * dCoef) + 0.5) / dCoef
        Else
            Return System.Math.Ceiling((dValue * dCoef) - 0.5) / dCoef
        End If
    End Function


    ''コンボボックスが押下されたときのイベント（押下されただけでリスト表示）
    'Private Sub cmb_enter(ByVal sender As Object, ByVal e As System.EventArgs)
    '    If txtChangeEventFlg = 0 Then Exit Sub 'フラグが1の場合処理実行

    '    Dim cmb1 As ComboBox

    '    cmb1 = CType(sender, ComboBox)
    '    cmb1.DroppedDown = True

    '    cmb1.SelectionLength = 0 '文字列の反転防止
    '    TB_Barcode.Focus()

    'End Sub


    ''●文字列に全角が含まれているかチェックする関数
    'Private Function getStrType(ByRef Value As String) As String

    '    '正規表現パターンを指定(英字a-z,A-Z,数値0-9)
    '    Dim r As New System.Text.RegularExpressions.Regex("^[a-zA-Z0-9]+$")

    '    'デフォルト返却値に半角文字を設定
    '    Dim rtnStr As String = "0"

    '    '全角の場合（valueに半角スペースがあった場合、取り除いてから判定）
    '    If r.IsMatch(Value.Replace(" ", "")) = False Then
    '        rtnStr = "＋"
    '    End If

    '    Return rtnStr

    'End Function

    '********これを使用すると計算機の表示が遅くなるため使用しない********
    ''メインフォームが非アクティブ（後ろに隠れる）になった場合指定秒後、前面表示
    'Private Sub Frm_main_Deactivate(sender As System.Object, e As System.EventArgs) Handles MyBase.Deactivate
    '    System.Threading.Thread.Sleep(3000)
    'End Sub

    'Private Sub Frm_main_Activated(sender As System.Object, e As System.EventArgs) Handles MyBase.Activated
    '    MefocusOffDate_old = Now
    '    'タイマー処理開始
    '    Timer1.Start()

    'End Sub

End Class
